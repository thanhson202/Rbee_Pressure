
Rbee_Pressure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b58  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  08008d40  08008d40  00009d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba0  08009ba0  0000b09c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ba0  08009ba0  0000aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ba8  08009ba8  0000b09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ba8  08009ba8  0000aba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bac  08009bac  0000abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08009bb0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cfc  200000a0  08009c4c  0000b0a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  08009c4c  0000bd9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013be6  00000000  00000000  0000b0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003625  00000000  00000000  0001ecab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  000222d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104b  00000000  00000000  00023768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfa9  00000000  00000000  000247b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017388  00000000  00000000  0004175c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3e94  00000000  00000000  00058ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006550  00000000  00000000  000fc9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00102f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000a0 	.word	0x200000a0
 8000204:	00000000 	.word	0x00000000
 8000208:	08008d28 	.word	0x08008d28

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000a4 	.word	0x200000a4
 8000224:	08008d28 	.word	0x08008d28

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	@ 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dce:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	@ 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	@ 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	@ 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__gesf2>:
 800101c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001020:	e006      	b.n	8001030 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__lesf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	e002      	b.n	8001030 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__cmpsf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001034:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001038:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	bf18      	it	ne
 8001042:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001046:	d011      	beq.n	800106c <__cmpsf2+0x40>
 8001048:	b001      	add	sp, #4
 800104a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800104e:	bf18      	it	ne
 8001050:	ea90 0f01 	teqne	r0, r1
 8001054:	bf58      	it	pl
 8001056:	ebb2 0003 	subspl.w	r0, r2, r3
 800105a:	bf88      	it	hi
 800105c:	17c8      	asrhi	r0, r1, #31
 800105e:	bf38      	it	cc
 8001060:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001064:	bf18      	it	ne
 8001066:	f040 0001 	orrne.w	r0, r0, #1
 800106a:	4770      	bx	lr
 800106c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001070:	d102      	bne.n	8001078 <__cmpsf2+0x4c>
 8001072:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001076:	d105      	bne.n	8001084 <__cmpsf2+0x58>
 8001078:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800107c:	d1e4      	bne.n	8001048 <__cmpsf2+0x1c>
 800107e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001082:	d0e1      	beq.n	8001048 <__cmpsf2+0x1c>
 8001084:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__aeabi_cfrcmple>:
 800108c:	4684      	mov	ip, r0
 800108e:	4608      	mov	r0, r1
 8001090:	4661      	mov	r1, ip
 8001092:	e7ff      	b.n	8001094 <__aeabi_cfcmpeq>

08001094 <__aeabi_cfcmpeq>:
 8001094:	b50f      	push	{r0, r1, r2, r3, lr}
 8001096:	f7ff ffc9 	bl	800102c <__cmpsf2>
 800109a:	2800      	cmp	r0, #0
 800109c:	bf48      	it	mi
 800109e:	f110 0f00 	cmnmi.w	r0, #0
 80010a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a4 <__aeabi_fcmpeq>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff fff4 	bl	8001094 <__aeabi_cfcmpeq>
 80010ac:	bf0c      	ite	eq
 80010ae:	2001      	moveq	r0, #1
 80010b0:	2000      	movne	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmplt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffea 	bl	8001094 <__aeabi_cfcmpeq>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmple>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffe0 	bl	8001094 <__aeabi_cfcmpeq>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpge>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffd2 	bl	800108c <__aeabi_cfrcmple>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpgt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffc8 	bl	800108c <__aeabi_cfrcmple>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_f2iz>:
 8001108:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800110c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001110:	d30f      	bcc.n	8001132 <__aeabi_f2iz+0x2a>
 8001112:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001116:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111a:	d90d      	bls.n	8001138 <__aeabi_f2iz+0x30>
 800111c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001120:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001124:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	bf18      	it	ne
 800112e:	4240      	negne	r0, r0
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2iz+0x3a>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d105      	bne.n	800114e <__aeabi_f2iz+0x46>
 8001142:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001146:	bf08      	it	eq
 8001148:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr

08001154 <cJSON_strdup>:
/* strlen of character literals resolved at compile time */
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = {internal_malloc, internal_free, internal_realloc};

static unsigned char *cJSON_strdup(const unsigned char *string, const internal_hooks *const hooks) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  size_t length = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  unsigned char *copy = NULL;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]

  if (string == NULL) {
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <cJSON_strdup+0x1c>
    return NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	e015      	b.n	800119c <cJSON_strdup+0x48>
  }

  length = strlen((const char *)string) + sizeof("");
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff f859 	bl	8000228 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
  copy = (unsigned char *)hooks->allocate(length);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	4798      	blx	r3
 8001184:	60b8      	str	r0, [r7, #8]
  if (copy == NULL) {
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <cJSON_strdup+0x3c>
    return NULL;
 800118c:	2300      	movs	r3, #0
 800118e:	e005      	b.n	800119c <cJSON_strdup+0x48>
  }
  memcpy(copy, string, length);
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f006 fb78 	bl	800788a <memcpy>

  return copy;
 800119a:	68bb      	ldr	r3, [r7, #8]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <cJSON_New_Item>:
    global_hooks.reallocate = realloc;
  }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks *const hooks) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  cJSON *node = (cJSON *)hooks->allocate(sizeof(cJSON));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2028      	movs	r0, #40	@ 0x28
 80011b2:	4798      	blx	r3
 80011b4:	60f8      	str	r0, [r7, #12]
  if (node) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <cJSON_New_Item+0x22>
    memset(node, '\0', sizeof(cJSON));
 80011bc:	2228      	movs	r2, #40	@ 0x28
 80011be:	2100      	movs	r1, #0
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f006 fac1 	bl	8007748 <memset>
  }

  return node;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  cJSON *next = NULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  while (item != NULL) {
 80011dc:	e03d      	b.n	800125a <cJSON_Delete+0x8a>
    next = item->next;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60fb      	str	r3, [r7, #12]
    if (!(item->type & cJSON_IsReference) && (item->child != NULL)) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d108      	bne.n	8001202 <cJSON_Delete+0x32>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <cJSON_Delete+0x32>
      cJSON_Delete(item->child);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ffe7 	bl	80011d0 <cJSON_Delete>
    }
    if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL)) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <cJSON_Delete+0x58>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d008      	beq.n	8001228 <cJSON_Delete+0x58>
      global_hooks.deallocate(item->valuestring);
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <cJSON_Delete+0x9c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6912      	ldr	r2, [r2, #16]
 800121e:	4610      	mov	r0, r2
 8001220:	4798      	blx	r3
      item->valuestring = NULL;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
    }
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10c      	bne.n	800124e <cJSON_Delete+0x7e>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <cJSON_Delete+0x7e>
      global_hooks.deallocate(item->string);
 800123c:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <cJSON_Delete+0x9c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6a12      	ldr	r2, [r2, #32]
 8001244:	4610      	mov	r0, r2
 8001246:	4798      	blx	r3
      item->string = NULL;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
    }
    global_hooks.deallocate(item);
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <cJSON_Delete+0x9c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	4798      	blx	r3
    item = next;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	607b      	str	r3, [r7, #4]
  while (item != NULL) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1be      	bne.n	80011de <cJSON_Delete+0xe>
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000

08001270 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void) {
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
  struct lconv *lconv = localeconv();
  return (unsigned char)lconv->decimal_point[0];
#else
  return '.';
 8001274:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <ensure>:
  cJSON_bool format; /* is this print a formatted print */
  internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char *ensure(printbuffer *const p, size_t needed) {
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  unsigned char *newbuffer = NULL;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  size_t newsize = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]

  if ((p == NULL) || (p->buffer == NULL)) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <ensure+0x20>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <ensure+0x24>
    return NULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	e083      	b.n	80013aa <ensure+0x12c>
  }

  if ((p->length > 0) && (p->offset >= p->length)) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <ensure+0x3c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d301      	bcc.n	80012ba <ensure+0x3c>
    /* make sure that offset is valid */
    return NULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e077      	b.n	80013aa <ensure+0x12c>
  }

  if (needed > INT_MAX) {
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da01      	bge.n	80012c4 <ensure+0x46>
    /* sizes bigger than INT_MAX are currently not supported */
    return NULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e072      	b.n	80013aa <ensure+0x12c>
  }

  needed += p->offset + 1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	3301      	adds	r3, #1
 80012ce:	603b      	str	r3, [r7, #0]
  if (needed <= p->length) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d805      	bhi.n	80012e6 <ensure+0x68>
    return p->buffer + p->offset;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	4413      	add	r3, r2
 80012e4:	e061      	b.n	80013aa <ensure+0x12c>
  }

  if (p->noalloc) {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <ensure+0x74>
    return NULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e05b      	b.n	80013aa <ensure+0x12c>
  }

  /* calculate new buffer size */
  if (needed > (INT_MAX / 2)) {
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f8:	d308      	bcc.n	800130c <ensure+0x8e>
    /* overflow of int, use INT_MAX if possible */
    if (needed <= INT_MAX) {
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db03      	blt.n	8001308 <ensure+0x8a>
      newsize = INT_MAX;
 8001300:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	e004      	b.n	8001312 <ensure+0x94>
    } else {
      return NULL;
 8001308:	2300      	movs	r3, #0
 800130a:	e04e      	b.n	80013aa <ensure+0x12c>
    }
  } else {
    newsize = needed * 2;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
  }

  if (p->hooks.reallocate != NULL) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d018      	beq.n	800134c <ensure+0xce>
    /* reallocate with realloc if available */
    newbuffer = (unsigned char *)p->hooks.reallocate(p->buffer, newsize);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	4610      	mov	r0, r2
 8001326:	4798      	blx	r3
 8001328:	60f8      	str	r0, [r7, #12]
    if (newbuffer == NULL) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d132      	bne.n	8001396 <ensure+0x118>
      p->hooks.deallocate(p->buffer);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	4610      	mov	r0, r2
 800133a:	4798      	blx	r3
      p->length = 0;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
      p->buffer = NULL;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

      return NULL;
 8001348:	2300      	movs	r3, #0
 800134a:	e02e      	b.n	80013aa <ensure+0x12c>
    }
  } else {
    /* otherwise reallocate manually */
    newbuffer = (unsigned char *)p->hooks.allocate(newsize);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	4798      	blx	r3
 8001354:	60f8      	str	r0, [r7, #12]
    if (!newbuffer) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10d      	bne.n	8001378 <ensure+0xfa>
      p->hooks.deallocate(p->buffer);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	4610      	mov	r0, r2
 8001366:	4798      	blx	r3
      p->length = 0;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
      p->buffer = NULL;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

      return NULL;
 8001374:	2300      	movs	r3, #0
 8001376:	e018      	b.n	80013aa <ensure+0x12c>
    }

    memcpy(newbuffer, p->buffer, p->offset + 1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	3301      	adds	r3, #1
 8001382:	461a      	mov	r2, r3
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f006 fa80 	bl	800788a <memcpy>
    p->hooks.deallocate(p->buffer);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	4610      	mov	r0, r2
 8001394:	4798      	blx	r3
  }
  p->length = newsize;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	605a      	str	r2, [r3, #4]
  p->buffer = newbuffer;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	601a      	str	r2, [r3, #0]

  return newbuffer + p->offset;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4413      	add	r3, r2
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer *const buffer) {
 80013b2:	b590      	push	{r4, r7, lr}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  const unsigned char *buffer_pointer = NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  if ((buffer == NULL) || (buffer->buffer == NULL)) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <update_offset+0x3a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00f      	beq.n	80013ec <update_offset+0x3a>
    return;
  }
  buffer_pointer = buffer->buffer + buffer->offset;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4413      	add	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]

  buffer->offset += strlen((const char *)buffer_pointer);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689c      	ldr	r4, [r3, #8]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7fe ff23 	bl	8000228 <strlen>
 80013e2:	4603      	mov	r3, r0
 80013e4:	18e2      	adds	r2, r4, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	e000      	b.n	80013ee <update_offset+0x3c>
    return;
 80013ec:	bf00      	nop
}
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}

080013f4 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b) {
 80013f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013f8:	b08a      	sub	sp, #40	@ 0x28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001400:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001424:	f7ff fb54 	bl	8000ad0 <__aeabi_dcmpgt>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <compare_double+0x44>
 800142e:	69bc      	ldr	r4, [r7, #24]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001436:	e003      	b.n	8001440 <compare_double+0x4c>
 8001438:	693c      	ldr	r4, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001440:	e9c7 4508 	strd	r4, r5, [r7, #32]
  return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001444:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001448:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144c:	f7fe fef8 	bl	8000240 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4690      	mov	r8, r2
 8001456:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <compare_double+0x9c>)
 8001460:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001464:	f7ff f8a4 	bl	80005b0 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	2101      	movs	r1, #1
 800146e:	460c      	mov	r4, r1
 8001470:	4640      	mov	r0, r8
 8001472:	4649      	mov	r1, r9
 8001474:	f7ff fb18 	bl	8000aa8 <__aeabi_dcmple>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <compare_double+0x8e>
 800147e:	2300      	movs	r3, #0
 8001480:	461c      	mov	r4, r3
 8001482:	b2e3      	uxtb	r3, r4
}
 8001484:	4618      	mov	r0, r3
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800148e:	bf00      	nop
 8001490:	3cb00000 	.word	0x3cb00000

08001494 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON *const item, printbuffer *const output_buffer) {
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b093      	sub	sp, #76	@ 0x4c
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  double d = item->valuedouble;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  int length = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	647b      	str	r3, [r7, #68]	@ 0x44
  size_t i = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	829a      	strh	r2, [r3, #20]
  unsigned char decimal_point = get_decimal_point();
 80014ca:	f7ff fed1 	bl	8001270 <get_decimal_point>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  double test = 0.0;
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

  if (output_buffer == NULL) {
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <print_number+0x56>
    return false;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e0b0      	b.n	800164c <print_number+0x1b8>
  }

  /* This checks for NaN and Infinity */
  if (isnan(d) || isinf(d)) {
 80014ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014f2:	f7ff faf7 	bl	8000ae4 <__aeabi_dcmpun>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d121      	bne.n	8001540 <print_number+0xac>
 80014fc:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80014fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001500:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001504:	2301      	movs	r3, #1
 8001506:	461e      	mov	r6, r3
 8001508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800150c:	4b51      	ldr	r3, [pc, #324]	@ (8001654 <print_number+0x1c0>)
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7ff fae7 	bl	8000ae4 <__aeabi_dcmpun>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10b      	bne.n	8001534 <print_number+0xa0>
 800151c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001520:	4b4c      	ldr	r3, [pc, #304]	@ (8001654 <print_number+0x1c0>)
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f7ff fabf 	bl	8000aa8 <__aeabi_dcmple>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <print_number+0xa0>
 8001530:	2300      	movs	r3, #0
 8001532:	461e      	mov	r6, r3
 8001534:	b2f3      	uxtb	r3, r6
 8001536:	f083 0301 	eor.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <print_number+0xbc>
    length = sprintf((char *)number_buffer, "null");
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4944      	ldr	r1, [pc, #272]	@ (8001658 <print_number+0x1c4>)
 8001546:	4618      	mov	r0, r3
 8001548:	f005 ffda 	bl	8007500 <siprintf>
 800154c:	6478      	str	r0, [r7, #68]	@ 0x44
 800154e:	e03b      	b.n	80015c8 <print_number+0x134>
  } else if (d == (double)item->valueint) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffc1 	bl	80004dc <__aeabi_i2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001562:	f7ff fa8d 	bl	8000a80 <__aeabi_dcmpeq>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <print_number+0xec>
    length = sprintf((char *)number_buffer, "%d", item->valueint);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4939      	ldr	r1, [pc, #228]	@ (800165c <print_number+0x1c8>)
 8001576:	4618      	mov	r0, r3
 8001578:	f005 ffc2 	bl	8007500 <siprintf>
 800157c:	6478      	str	r0, [r7, #68]	@ 0x44
 800157e:	e023      	b.n	80015c8 <print_number+0x134>
  } else {
    /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
    length = sprintf((char *)number_buffer, "%1.15g", d);
 8001580:	f107 0014 	add.w	r0, r7, #20
 8001584:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001588:	4935      	ldr	r1, [pc, #212]	@ (8001660 <print_number+0x1cc>)
 800158a:	f005 ffb9 	bl	8007500 <siprintf>
 800158e:	6478      	str	r0, [r7, #68]	@ 0x44

    /* Check whether the original double can be recovered */
    if ((sscanf((char *)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d)) {
 8001590:	f107 0208 	add.w	r2, r7, #8
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4932      	ldr	r1, [pc, #200]	@ (8001664 <print_number+0x1d0>)
 800159a:	4618      	mov	r0, r3
 800159c:	f005 ffd0 	bl	8007540 <siscanf>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <print_number+0x124>
 80015a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015ae:	f7ff ff21 	bl	80013f4 <compare_double>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <print_number+0x134>
      /* If not, print with 17 decimal places of precision */
      length = sprintf((char *)number_buffer, "%1.17g", d);
 80015b8:	f107 0014 	add.w	r0, r7, #20
 80015bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015c0:	4929      	ldr	r1, [pc, #164]	@ (8001668 <print_number+0x1d4>)
 80015c2:	f005 ff9d 	bl	8007500 <siprintf>
 80015c6:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  /* sprintf failed or buffer overrun occurred */
  if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1))) {
 80015c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db02      	blt.n	80015d4 <print_number+0x140>
 80015ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015d0:	2b19      	cmp	r3, #25
 80015d2:	dd01      	ble.n	80015d8 <print_number+0x144>
    return false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e039      	b.n	800164c <print_number+0x1b8>
  }

  /* reserve appropriate space in the output */
  output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80015d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015da:	3301      	adds	r3, #1
 80015dc:	4619      	mov	r1, r3
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7ff fe4d 	bl	800127e <ensure>
 80015e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (output_pointer == NULL) {
 80015e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <print_number+0x15c>
    return false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e02d      	b.n	800164c <print_number+0x1b8>
  }

  /* copy the printed number to the output and replace locale
   * dependent decimal point with '.' */
  for (i = 0; i < ((size_t)length); i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80015f4:	e01a      	b.n	800162c <print_number+0x198>
    if (number_buffer[i] == decimal_point) {
 80015f6:	f107 0214 	add.w	r2, r7, #20
 80015fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001604:	429a      	cmp	r2, r3
 8001606:	d105      	bne.n	8001614 <print_number+0x180>
      output_pointer[i] = '.';
 8001608:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800160a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800160c:	4413      	add	r3, r2
 800160e:	222e      	movs	r2, #46	@ 0x2e
 8001610:	701a      	strb	r2, [r3, #0]
      continue;
 8001612:	e008      	b.n	8001626 <print_number+0x192>
    }

    output_pointer[i] = number_buffer[i];
 8001614:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001618:	4413      	add	r3, r2
 800161a:	f107 0114 	add.w	r1, r7, #20
 800161e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001620:	440a      	add	r2, r1
 8001622:	7812      	ldrb	r2, [r2, #0]
 8001624:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ((size_t)length); i++) {
 8001626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001628:	3301      	adds	r3, #1
 800162a:	643b      	str	r3, [r7, #64]	@ 0x40
 800162c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800162e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001630:	429a      	cmp	r2, r3
 8001632:	d3e0      	bcc.n	80015f6 <print_number+0x162>
  }
  output_pointer[i] = '\0';
 8001634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001638:	4413      	add	r3, r2
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]

  output_buffer->offset += (size_t)length;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001644:	441a      	add	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	609a      	str	r2, [r3, #8]

  return true;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	374c      	adds	r7, #76	@ 0x4c
 8001650:	46bd      	mov	sp, r7
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	7fefffff 	.word	0x7fefffff
 8001658:	08008d4c 	.word	0x08008d4c
 800165c:	08008d54 	.word	0x08008d54
 8001660:	08008d58 	.word	0x08008d58
 8001664:	08008d60 	.word	0x08008d60
 8001668:	08008d64 	.word	0x08008d64

0800166c <print_string_ptr>:

  return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char *const input, printbuffer *const output_buffer) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  const unsigned char *input_pointer = NULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  unsigned char *output = NULL;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  unsigned char *output_pointer = NULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  size_t output_length = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  /* numbers of additional characters needed for escaping */
  size_t escape_characters = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]

  if (output_buffer == NULL) {
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <print_string_ptr+0x28>
    return false;
 8001690:	2300      	movs	r3, #0
 8001692:	e110      	b.n	80018b6 <print_string_ptr+0x24a>
  }

  /* empty string */
  if (input == NULL) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d111      	bne.n	80016be <print_string_ptr+0x52>
    output = ensure(output_buffer, sizeof("\"\""));
 800169a:	2103      	movs	r1, #3
 800169c:	6838      	ldr	r0, [r7, #0]
 800169e:	f7ff fdee 	bl	800127e <ensure>
 80016a2:	6138      	str	r0, [r7, #16]
    if (output == NULL) {
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <print_string_ptr+0x42>
      return false;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e103      	b.n	80018b6 <print_string_ptr+0x24a>
    }
    strcpy((char *)output, "\"\"");
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4a83      	ldr	r2, [pc, #524]	@ (80018c0 <print_string_ptr+0x254>)
 80016b2:	8811      	ldrh	r1, [r2, #0]
 80016b4:	7892      	ldrb	r2, [r2, #2]
 80016b6:	8019      	strh	r1, [r3, #0]
 80016b8:	709a      	strb	r2, [r3, #2]

    return true;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0fb      	b.n	80018b6 <print_string_ptr+0x24a>
  }

  /* set "flag" to 1 if something needs to be escaped */
  for (input_pointer = input; *input_pointer; input_pointer++) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e024      	b.n	800170e <print_string_ptr+0xa2>
    switch (*input_pointer) {
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b22      	cmp	r3, #34	@ 0x22
 80016ca:	dc0f      	bgt.n	80016ec <print_string_ptr+0x80>
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	db13      	blt.n	80016f8 <print_string_ptr+0x8c>
 80016d0:	3b08      	subs	r3, #8
 80016d2:	4a7c      	ldr	r2, [pc, #496]	@ (80018c4 <print_string_ptr+0x258>)
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <print_string_ptr+0x84>
 80016ea:	e005      	b.n	80016f8 <print_string_ptr+0x8c>
 80016ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80016ee:	d103      	bne.n	80016f8 <print_string_ptr+0x8c>
    case '\f':
    case '\n':
    case '\r':
    case '\t':
      /* one character escape sequence */
      escape_characters++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
      break;
 80016f6:	e007      	b.n	8001708 <print_string_ptr+0x9c>
    default:
      if (*input_pointer < 32) {
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b1f      	cmp	r3, #31
 80016fe:	d802      	bhi.n	8001706 <print_string_ptr+0x9a>
        /* UTF-16 escape sequence uXXXX */
        escape_characters += 5;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3305      	adds	r3, #5
 8001704:	617b      	str	r3, [r7, #20]
      }
      break;
 8001706:	bf00      	nop
  for (input_pointer = input; *input_pointer; input_pointer++) {
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	3301      	adds	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1d6      	bne.n	80016c4 <print_string_ptr+0x58>
    }
  }
  output_length = (size_t)(input_pointer - input) + escape_characters;
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	461a      	mov	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	4413      	add	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

  output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3303      	adds	r3, #3
 8001728:	4619      	mov	r1, r3
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f7ff fda7 	bl	800127e <ensure>
 8001730:	6138      	str	r0, [r7, #16]
  if (output == NULL) {
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <print_string_ptr+0xd0>
    return false;
 8001738:	2300      	movs	r3, #0
 800173a:	e0bc      	b.n	80018b6 <print_string_ptr+0x24a>
  }

  /* no characters have to be escaped */
  if (escape_characters == 0) {
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d117      	bne.n	8001772 <print_string_ptr+0x106>
    output[0] = '\"';
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2222      	movs	r2, #34	@ 0x22
 8001746:	701a      	strb	r2, [r3, #0]
    memcpy(output + 1, input, output_length);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	3301      	adds	r3, #1
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	f006 f89a 	bl	800788a <memcpy>
    output[output_length + 1] = '\"';
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3301      	adds	r3, #1
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4413      	add	r3, r2
 800175e:	2222      	movs	r2, #34	@ 0x22
 8001760:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3302      	adds	r3, #2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]

    return true;
 800176e:	2301      	movs	r3, #1
 8001770:	e0a1      	b.n	80018b6 <print_string_ptr+0x24a>
  }

  output[0] = '\"';
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2222      	movs	r2, #34	@ 0x22
 8001776:	701a      	strb	r2, [r3, #0]
  output_pointer = output + 1;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	3301      	adds	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
  /* copy the string */
  for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++) {
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e086      	b.n	8001892 <print_string_ptr+0x226>
    if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\')) {
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b1f      	cmp	r3, #31
 800178a:	d90c      	bls.n	80017a6 <print_string_ptr+0x13a>
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b22      	cmp	r3, #34	@ 0x22
 8001792:	d008      	beq.n	80017a6 <print_string_ptr+0x13a>
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b5c      	cmp	r3, #92	@ 0x5c
 800179a:	d004      	beq.n	80017a6 <print_string_ptr+0x13a>
      /* normal character, copy */
      *output_pointer = *input_pointer;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	781a      	ldrb	r2, [r3, #0]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e06f      	b.n	8001886 <print_string_ptr+0x21a>
    } else {
      /* character needs to be escaped */
      *output_pointer++ = '\\';
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	61ba      	str	r2, [r7, #24]
 80017ac:	225c      	movs	r2, #92	@ 0x5c
 80017ae:	701a      	strb	r2, [r3, #0]
      switch (*input_pointer) {
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b22      	cmp	r3, #34	@ 0x22
 80017b6:	dc3d      	bgt.n	8001834 <print_string_ptr+0x1c8>
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	db59      	blt.n	8001870 <print_string_ptr+0x204>
 80017bc:	3b08      	subs	r3, #8
 80017be:	2b1a      	cmp	r3, #26
 80017c0:	d856      	bhi.n	8001870 <print_string_ptr+0x204>
 80017c2:	a201      	add	r2, pc, #4	@ (adr r2, 80017c8 <print_string_ptr+0x15c>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	08001849 	.word	0x08001849
 80017cc:	08001869 	.word	0x08001869
 80017d0:	08001859 	.word	0x08001859
 80017d4:	08001871 	.word	0x08001871
 80017d8:	08001851 	.word	0x08001851
 80017dc:	08001861 	.word	0x08001861
 80017e0:	08001871 	.word	0x08001871
 80017e4:	08001871 	.word	0x08001871
 80017e8:	08001871 	.word	0x08001871
 80017ec:	08001871 	.word	0x08001871
 80017f0:	08001871 	.word	0x08001871
 80017f4:	08001871 	.word	0x08001871
 80017f8:	08001871 	.word	0x08001871
 80017fc:	08001871 	.word	0x08001871
 8001800:	08001871 	.word	0x08001871
 8001804:	08001871 	.word	0x08001871
 8001808:	08001871 	.word	0x08001871
 800180c:	08001871 	.word	0x08001871
 8001810:	08001871 	.word	0x08001871
 8001814:	08001871 	.word	0x08001871
 8001818:	08001871 	.word	0x08001871
 800181c:	08001871 	.word	0x08001871
 8001820:	08001871 	.word	0x08001871
 8001824:	08001871 	.word	0x08001871
 8001828:	08001871 	.word	0x08001871
 800182c:	08001871 	.word	0x08001871
 8001830:	08001841 	.word	0x08001841
 8001834:	2b5c      	cmp	r3, #92	@ 0x5c
 8001836:	d11b      	bne.n	8001870 <print_string_ptr+0x204>
      case '\\':
        *output_pointer = '\\';
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	225c      	movs	r2, #92	@ 0x5c
 800183c:	701a      	strb	r2, [r3, #0]
        break;
 800183e:	e022      	b.n	8001886 <print_string_ptr+0x21a>
      case '\"':
        *output_pointer = '\"';
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2222      	movs	r2, #34	@ 0x22
 8001844:	701a      	strb	r2, [r3, #0]
        break;
 8001846:	e01e      	b.n	8001886 <print_string_ptr+0x21a>
      case '\b':
        *output_pointer = 'b';
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2262      	movs	r2, #98	@ 0x62
 800184c:	701a      	strb	r2, [r3, #0]
        break;
 800184e:	e01a      	b.n	8001886 <print_string_ptr+0x21a>
      case '\f':
        *output_pointer = 'f';
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2266      	movs	r2, #102	@ 0x66
 8001854:	701a      	strb	r2, [r3, #0]
        break;
 8001856:	e016      	b.n	8001886 <print_string_ptr+0x21a>
      case '\n':
        *output_pointer = 'n';
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	226e      	movs	r2, #110	@ 0x6e
 800185c:	701a      	strb	r2, [r3, #0]
        break;
 800185e:	e012      	b.n	8001886 <print_string_ptr+0x21a>
      case '\r':
        *output_pointer = 'r';
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2272      	movs	r2, #114	@ 0x72
 8001864:	701a      	strb	r2, [r3, #0]
        break;
 8001866:	e00e      	b.n	8001886 <print_string_ptr+0x21a>
      case '\t':
        *output_pointer = 't';
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2274      	movs	r2, #116	@ 0x74
 800186c:	701a      	strb	r2, [r3, #0]
        break;
 800186e:	e00a      	b.n	8001886 <print_string_ptr+0x21a>
      default:
        /* escape and print as unicode codepoint */
        sprintf((char *)output_pointer, "u%04x", *input_pointer);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4914      	ldr	r1, [pc, #80]	@ (80018c8 <print_string_ptr+0x25c>)
 8001878:	69b8      	ldr	r0, [r7, #24]
 800187a:	f005 fe41 	bl	8007500 <siprintf>
        output_pointer += 4;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	3304      	adds	r3, #4
 8001882:	61bb      	str	r3, [r7, #24]
        break;
 8001884:	bf00      	nop
  for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++) {
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	3301      	adds	r3, #1
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f af74 	bne.w	8001784 <print_string_ptr+0x118>
      }
    }
  }
  output[output_length + 1] = '\"';
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4413      	add	r3, r2
 80018a4:	2222      	movs	r2, #34	@ 0x22
 80018a6:	701a      	strb	r2, [r3, #0]
  output[output_length + 2] = '\0';
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3302      	adds	r3, #2
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4413      	add	r3, r2
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]

  return true;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	08008d6c 	.word	0x08008d6c
 80018c4:	04000037 	.word	0x04000037
 80018c8:	08008d70 	.word	0x08008d70

080018cc <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON *const item, printbuffer *const p) { return print_string_ptr((unsigned char *)item->valuestring, p); }
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	6839      	ldr	r1, [r7, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fec5 	bl	800166c <print_string_ptr>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <print>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length) { return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0); }

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON *const item, cJSON_bool format, const internal_hooks *const hooks) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	@ 0x38
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  static const size_t default_buffer_size = 256;
  printbuffer buffer[1];
  unsigned char *printed = NULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34

  memset(buffer, 0, sizeof(buffer));
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2224      	movs	r2, #36	@ 0x24
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f005 ff1f 	bl	8007748 <memset>

  /* create buffer */
  buffer->buffer = (unsigned char *)hooks->allocate(default_buffer_size);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a3b      	ldr	r2, [pc, #236]	@ (80019fc <print+0x110>)
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4610      	mov	r0, r2
 8001914:	4798      	blx	r3
 8001916:	4603      	mov	r3, r0
 8001918:	613b      	str	r3, [r7, #16]
  buffer->length = default_buffer_size;
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <print+0x110>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	617b      	str	r3, [r7, #20]
  buffer->format = format;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
  buffer->hooks = *hooks;
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192a:	ca07      	ldmia	r2, {r0, r1, r2}
 800192c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (buffer->buffer == NULL) {
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d042      	beq.n	80019bc <print+0xd0>
    goto fail;
  }

  /* print the value */
  if (!print_value(item, buffer)) {
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	4619      	mov	r1, r3
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f86f 	bl	8001a20 <print_value>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03b      	beq.n	80019c0 <print+0xd4>
    goto fail;
  }
  update_offset(buffer);
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fd30 	bl	80013b2 <update_offset>

  /* check if reallocate is available */
  if (hooks->reallocate != NULL) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <print+0x8a>
    printed = (unsigned char *)hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	6938      	ldr	r0, [r7, #16]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	3201      	adds	r2, #1
 8001964:	4611      	mov	r1, r2
 8001966:	4798      	blx	r3
 8001968:	6378      	str	r0, [r7, #52]	@ 0x34
    if (printed == NULL) {
 800196a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196c:	2b00      	cmp	r3, #0
 800196e:	d029      	beq.n	80019c4 <print+0xd8>
      goto fail;
    }
    buffer->buffer = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e020      	b.n	80019b8 <print+0xcc>
  } else /* otherwise copy the JSON over to a new buffer */
  {
    printed = (unsigned char *)hooks->allocate(buffer->offset + 1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	3201      	adds	r2, #1
 800197e:	4610      	mov	r0, r2
 8001980:	4798      	blx	r3
 8001982:	6378      	str	r0, [r7, #52]	@ 0x34
    if (printed == NULL) {
 8001984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01e      	beq.n	80019c8 <print+0xdc>
      goto fail;
    }
    memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800198a:	6939      	ldr	r1, [r7, #16]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	4293      	cmp	r3, r2
 8001994:	bf28      	it	cs
 8001996:	4613      	movcs	r3, r2
 8001998:	461a      	mov	r2, r3
 800199a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800199c:	f005 ff75 	bl	800788a <memcpy>
    printed[buffer->offset] = '\0'; /* just to be sure */
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019a4:	4413      	add	r3, r2
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

    /* free the buffer */
    hooks->deallocate(buffer->buffer);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4610      	mov	r0, r2
 80019b2:	4798      	blx	r3
    buffer->buffer = NULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  }

  return printed;
 80019b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ba:	e01a      	b.n	80019f2 <print+0x106>
    goto fail;
 80019bc:	bf00      	nop
 80019be:	e004      	b.n	80019ca <print+0xde>
    goto fail;
 80019c0:	bf00      	nop
 80019c2:	e002      	b.n	80019ca <print+0xde>
      goto fail;
 80019c4:	bf00      	nop
 80019c6:	e000      	b.n	80019ca <print+0xde>
      goto fail;
 80019c8:	bf00      	nop

fail:
  if (buffer->buffer != NULL) {
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <print+0xf2>
    hooks->deallocate(buffer->buffer);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4610      	mov	r0, r2
 80019d8:	4798      	blx	r3
    buffer->buffer = NULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  }

  if (printed != NULL) {
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <print+0x104>
    hooks->deallocate(printed);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019ea:	4798      	blx	r3
    printed = NULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  return NULL;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3738      	adds	r7, #56	@ 0x38
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	08009a0c 	.word	0x08009a0c

08001a00 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item) { return (char *)print(item, true, &global_hooks); }
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <cJSON_Print+0x1c>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff6d 	bl	80018ec <print>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000

08001a20 <print_value>:

  return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON *const item, printbuffer *const output_buffer) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  unsigned char *output = NULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]

  if ((item == NULL) || (output_buffer == NULL)) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <print_value+0x1a>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <print_value+0x1e>
    return false;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e0c9      	b.n	8001bd2 <print_value+0x1b2>
  }

  switch ((item->type) & 0xFF) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b80      	cmp	r3, #128	@ 0x80
 8001a46:	f000 808e 	beq.w	8001b66 <print_value+0x146>
 8001a4a:	2b80      	cmp	r3, #128	@ 0x80
 8001a4c:	f300 80c0 	bgt.w	8001bd0 <print_value+0x1b0>
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	dc49      	bgt.n	8001ae8 <print_value+0xc8>
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f340 80bb 	ble.w	8001bd0 <print_value+0x1b0>
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	2b1f      	cmp	r3, #31
 8001a5e:	f200 80b7 	bhi.w	8001bd0 <print_value+0x1b0>
 8001a62:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <print_value+0x48>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001b13 	.word	0x08001b13
 8001a6c:	08001b37 	.word	0x08001b37
 8001a70:	08001bd1 	.word	0x08001bd1
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001bd1 	.word	0x08001bd1
 8001a7c:	08001bd1 	.word	0x08001bd1
 8001a80:	08001bd1 	.word	0x08001bd1
 8001a84:	08001b5b 	.word	0x08001b5b
 8001a88:	08001bd1 	.word	0x08001bd1
 8001a8c:	08001bd1 	.word	0x08001bd1
 8001a90:	08001bd1 	.word	0x08001bd1
 8001a94:	08001bd1 	.word	0x08001bd1
 8001a98:	08001bd1 	.word	0x08001bd1
 8001a9c:	08001bd1 	.word	0x08001bd1
 8001aa0:	08001bd1 	.word	0x08001bd1
 8001aa4:	08001bad 	.word	0x08001bad
 8001aa8:	08001bd1 	.word	0x08001bd1
 8001aac:	08001bd1 	.word	0x08001bd1
 8001ab0:	08001bd1 	.word	0x08001bd1
 8001ab4:	08001bd1 	.word	0x08001bd1
 8001ab8:	08001bd1 	.word	0x08001bd1
 8001abc:	08001bd1 	.word	0x08001bd1
 8001ac0:	08001bd1 	.word	0x08001bd1
 8001ac4:	08001bd1 	.word	0x08001bd1
 8001ac8:	08001bd1 	.word	0x08001bd1
 8001acc:	08001bd1 	.word	0x08001bd1
 8001ad0:	08001bd1 	.word	0x08001bd1
 8001ad4:	08001bd1 	.word	0x08001bd1
 8001ad8:	08001bd1 	.word	0x08001bd1
 8001adc:	08001bd1 	.word	0x08001bd1
 8001ae0:	08001bd1 	.word	0x08001bd1
 8001ae4:	08001bb9 	.word	0x08001bb9
 8001ae8:	2b40      	cmp	r3, #64	@ 0x40
 8001aea:	d06b      	beq.n	8001bc4 <print_value+0x1a4>
 8001aec:	e070      	b.n	8001bd0 <print_value+0x1b0>
  case cJSON_NULL:
    output = ensure(output_buffer, 5);
 8001aee:	2105      	movs	r1, #5
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f7ff fbc4 	bl	800127e <ensure>
 8001af6:	60f8      	str	r0, [r7, #12]
    if (output == NULL) {
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <print_value+0xe2>
      return false;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e067      	b.n	8001bd2 <print_value+0x1b2>
    }
    strcpy((char *)output, "null");
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a35      	ldr	r2, [pc, #212]	@ (8001bdc <print_value+0x1bc>)
 8001b06:	6810      	ldr	r0, [r2, #0]
 8001b08:	6018      	str	r0, [r3, #0]
 8001b0a:	7912      	ldrb	r2, [r2, #4]
 8001b0c:	711a      	strb	r2, [r3, #4]
    return true;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e05f      	b.n	8001bd2 <print_value+0x1b2>

  case cJSON_False:
    output = ensure(output_buffer, 6);
 8001b12:	2106      	movs	r1, #6
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f7ff fbb2 	bl	800127e <ensure>
 8001b1a:	60f8      	str	r0, [r7, #12]
    if (output == NULL) {
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <print_value+0x106>
      return false;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e055      	b.n	8001bd2 <print_value+0x1b2>
    }
    strcpy((char *)output, "false");
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <print_value+0x1c0>)
 8001b2a:	6810      	ldr	r0, [r2, #0]
 8001b2c:	6018      	str	r0, [r3, #0]
 8001b2e:	8892      	ldrh	r2, [r2, #4]
 8001b30:	809a      	strh	r2, [r3, #4]
    return true;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e04d      	b.n	8001bd2 <print_value+0x1b2>

  case cJSON_True:
    output = ensure(output_buffer, 5);
 8001b36:	2105      	movs	r1, #5
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f7ff fba0 	bl	800127e <ensure>
 8001b3e:	60f8      	str	r0, [r7, #12]
    if (output == NULL) {
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <print_value+0x12a>
      return false;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e043      	b.n	8001bd2 <print_value+0x1b2>
    }
    strcpy((char *)output, "true");
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4a25      	ldr	r2, [pc, #148]	@ (8001be4 <print_value+0x1c4>)
 8001b4e:	6810      	ldr	r0, [r2, #0]
 8001b50:	6018      	str	r0, [r3, #0]
 8001b52:	7912      	ldrb	r2, [r2, #4]
 8001b54:	711a      	strb	r2, [r3, #4]
    return true;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e03b      	b.n	8001bd2 <print_value+0x1b2>

  case cJSON_Number:
    return print_number(item, output_buffer);
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff fc99 	bl	8001494 <print_number>
 8001b62:	4603      	mov	r3, r0
 8001b64:	e035      	b.n	8001bd2 <print_value+0x1b2>

  case cJSON_Raw: {
    size_t raw_length = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
    if (item->valuestring == NULL) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <print_value+0x156>
      return false;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e02d      	b.n	8001bd2 <print_value+0x1b2>
    }

    raw_length = strlen(item->valuestring) + sizeof("");
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fb54 	bl	8000228 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	3301      	adds	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
    output = ensure(output_buffer, raw_length);
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	6838      	ldr	r0, [r7, #0]
 8001b8a:	f7ff fb78 	bl	800127e <ensure>
 8001b8e:	60f8      	str	r0, [r7, #12]
    if (output == NULL) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <print_value+0x17a>
      return false;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e01b      	b.n	8001bd2 <print_value+0x1b2>
    }
    memcpy(output, item->valuestring, raw_length);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f005 fe71 	bl	800788a <memcpy>
    return true;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e012      	b.n	8001bd2 <print_value+0x1b2>
  }

  case cJSON_String:
    return print_string(item, output_buffer);
 8001bac:	6839      	ldr	r1, [r7, #0]
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fe8c 	bl	80018cc <print_string>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	e00c      	b.n	8001bd2 <print_value+0x1b2>

  case cJSON_Array:
    return print_array(item, output_buffer);
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f814 	bl	8001be8 <print_array>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	e006      	b.n	8001bd2 <print_value+0x1b2>

  case cJSON_Object:
    return print_object(item, output_buffer);
 8001bc4:	6839      	ldr	r1, [r7, #0]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f894 	bl	8001cf4 <print_object>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	e000      	b.n	8001bd2 <print_value+0x1b2>

  default:
    return false;
 8001bd0:	2300      	movs	r3, #0
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08008d4c 	.word	0x08008d4c
 8001be0:	08008d7c 	.word	0x08008d7c
 8001be4:	08008d84 	.word	0x08008d84

08001be8 <print_array>:

  return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON *const item, printbuffer *const output_buffer) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  size_t length = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  cJSON *current_element = item->child;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	613b      	str	r3, [r7, #16]

  if (output_buffer == NULL) {
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <print_array+0x22>
    return false;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e070      	b.n	8001cec <print_array+0x104>
  }

  /* Compose the output array. */
  /* opening square bracket */
  output_pointer = ensure(output_buffer, 1);
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f7ff fb36 	bl	800127e <ensure>
 8001c12:	6178      	str	r0, [r7, #20]
  if (output_pointer == NULL) {
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <print_array+0x36>
    return false;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e066      	b.n	8001cec <print_array+0x104>
  }

  *output_pointer = '[';
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	225b      	movs	r2, #91	@ 0x5b
 8001c22:	701a      	strb	r2, [r3, #0]
  output_buffer->offset++;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	609a      	str	r2, [r3, #8]
  output_buffer->depth++;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	60da      	str	r2, [r3, #12]

  while (current_element != NULL) {
 8001c38:	e03d      	b.n	8001cb6 <print_array+0xce>
    if (!print_value(current_element, output_buffer)) {
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	6938      	ldr	r0, [r7, #16]
 8001c3e:	f7ff feef 	bl	8001a20 <print_value>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <print_array+0x64>
      return false;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e04f      	b.n	8001cec <print_array+0x104>
    }
    update_offset(output_buffer);
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	f7ff fbb0 	bl	80013b2 <update_offset>
    if (current_element->next) {
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d02a      	beq.n	8001cb0 <print_array+0xc8>
      length = (size_t)(output_buffer->format ? 2 : 1);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <print_array+0x7e>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e000      	b.n	8001c68 <print_array+0x80>
 8001c66:	2301      	movs	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
      output_pointer = ensure(output_buffer, length + 1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6838      	ldr	r0, [r7, #0]
 8001c72:	f7ff fb04 	bl	800127e <ensure>
 8001c76:	6178      	str	r0, [r7, #20]
      if (output_pointer == NULL) {
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <print_array+0x9a>
        return false;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e034      	b.n	8001cec <print_array+0x104>
      }
      *output_pointer++ = ',';
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	617a      	str	r2, [r7, #20]
 8001c88:	222c      	movs	r2, #44	@ 0x2c
 8001c8a:	701a      	strb	r2, [r3, #0]
      if (output_buffer->format) {
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <print_array+0xb6>
        *output_pointer++ = ' ';
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	617a      	str	r2, [r7, #20]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	701a      	strb	r2, [r3, #0]
      }
      *output_pointer = '\0';
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
      output_buffer->offset += length;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	441a      	add	r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	609a      	str	r2, [r3, #8]
    }
    current_element = current_element->next;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	613b      	str	r3, [r7, #16]
  while (current_element != NULL) {
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1be      	bne.n	8001c3a <print_array+0x52>
  }

  output_pointer = ensure(output_buffer, 2);
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	f7ff fadd 	bl	800127e <ensure>
 8001cc4:	6178      	str	r0, [r7, #20]
  if (output_pointer == NULL) {
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <print_array+0xe8>
    return false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e00d      	b.n	8001cec <print_array+0x104>
  }
  *output_pointer++ = ']';
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	617a      	str	r2, [r7, #20]
 8001cd6:	225d      	movs	r2, #93	@ 0x5d
 8001cd8:	701a      	strb	r2, [r3, #0]
  *output_pointer = '\0';
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
  output_buffer->depth--;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	1e5a      	subs	r2, r3, #1
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	60da      	str	r2, [r3, #12]

  return true;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <print_object>:

  return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON *const item, printbuffer *const output_buffer) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  size_t length = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  cJSON *current_item = item->child;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]

  if (output_buffer == NULL) {
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <print_object+0x22>
    return false;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e108      	b.n	8001f28 <print_object+0x234>
  }

  /* Compose the output: */
  length = (size_t)(output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <print_object+0x2e>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e000      	b.n	8001d24 <print_object+0x30>
 8001d22:	2301      	movs	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
  output_pointer = ensure(output_buffer, length + 1);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f7ff faa6 	bl	800127e <ensure>
 8001d32:	61f8      	str	r0, [r7, #28]
  if (output_pointer == NULL) {
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <print_object+0x4a>
    return false;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e0f4      	b.n	8001f28 <print_object+0x234>
  }

  *output_pointer++ = '{';
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	61fa      	str	r2, [r7, #28]
 8001d44:	227b      	movs	r2, #123	@ 0x7b
 8001d46:	701a      	strb	r2, [r3, #0]
  output_buffer->depth++;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	60da      	str	r2, [r3, #12]
  if (output_buffer->format) {
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <print_object+0x70>
    *output_pointer++ = '\n';
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	61fa      	str	r2, [r7, #28]
 8001d60:	220a      	movs	r2, #10
 8001d62:	701a      	strb	r2, [r3, #0]
  }
  output_buffer->offset += length;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	609a      	str	r2, [r3, #8]

  while (current_item) {
 8001d70:	e0a0      	b.n	8001eb4 <print_object+0x1c0>
    if (output_buffer->format) {
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d022      	beq.n	8001dc0 <print_object+0xcc>
      size_t i;
      output_pointer = ensure(output_buffer, output_buffer->depth);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6838      	ldr	r0, [r7, #0]
 8001d82:	f7ff fa7c 	bl	800127e <ensure>
 8001d86:	61f8      	str	r0, [r7, #28]
      if (output_pointer == NULL) {
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <print_object+0x9e>
        return false;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e0ca      	b.n	8001f28 <print_object+0x234>
      }
      for (i = 0; i < output_buffer->depth; i++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e007      	b.n	8001da8 <print_object+0xb4>
        *output_pointer++ = '\t';
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	61fa      	str	r2, [r7, #28]
 8001d9e:	2209      	movs	r2, #9
 8001da0:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < output_buffer->depth; i++) {
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d3f2      	bcc.n	8001d98 <print_object+0xa4>
      }
      output_buffer->offset += output_buffer->depth;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	441a      	add	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	609a      	str	r2, [r3, #8]
    }

    /* print key */
    if (!print_string_ptr((unsigned char *)current_item->string, output_buffer)) {
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fc50 	bl	800166c <print_string_ptr>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <print_object+0xe2>
      return false;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e0a8      	b.n	8001f28 <print_object+0x234>
    }
    update_offset(output_buffer);
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f7ff faeb 	bl	80013b2 <update_offset>

    length = (size_t)(output_buffer->format ? 2 : 1);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <print_object+0xf4>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e000      	b.n	8001dea <print_object+0xf6>
 8001de8:	2301      	movs	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length);
 8001dec:	68f9      	ldr	r1, [r7, #12]
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f7ff fa45 	bl	800127e <ensure>
 8001df4:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL) {
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <print_object+0x10c>
      return false;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e093      	b.n	8001f28 <print_object+0x234>
    }
    *output_pointer++ = ':';
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	61fa      	str	r2, [r7, #28]
 8001e06:	223a      	movs	r2, #58	@ 0x3a
 8001e08:	701a      	strb	r2, [r3, #0]
    if (output_buffer->format) {
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <print_object+0x128>
      *output_pointer++ = '\t';
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	61fa      	str	r2, [r7, #28]
 8001e18:	2209      	movs	r2, #9
 8001e1a:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	441a      	add	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	609a      	str	r2, [r3, #8]

    /* print value */
    if (!print_value(current_item, output_buffer)) {
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	69b8      	ldr	r0, [r7, #24]
 8001e2c:	f7ff fdf8 	bl	8001a20 <print_value>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <print_object+0x146>
      return false;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e076      	b.n	8001f28 <print_object+0x234>
    }
    update_offset(output_buffer);
 8001e3a:	6838      	ldr	r0, [r7, #0]
 8001e3c:	f7ff fab9 	bl	80013b2 <update_offset>

    /* print comma if not last */
    length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <print_object+0x158>
 8001e48:	2201      	movs	r2, #1
 8001e4a:	e000      	b.n	8001e4e <print_object+0x15a>
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <print_object+0x166>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <print_object+0x168>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f7ff fa09 	bl	800127e <ensure>
 8001e6c:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL) {
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <print_object+0x184>
      return false;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e057      	b.n	8001f28 <print_object+0x234>
    }
    if (current_item->next) {
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <print_object+0x196>
      *output_pointer++ = ',';
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	61fa      	str	r2, [r7, #28]
 8001e86:	222c      	movs	r2, #44	@ 0x2c
 8001e88:	701a      	strb	r2, [r3, #0]
    }

    if (output_buffer->format) {
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <print_object+0x1a8>
      *output_pointer++ = '\n';
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	61fa      	str	r2, [r7, #28]
 8001e98:	220a      	movs	r2, #10
 8001e9a:	701a      	strb	r2, [r3, #0]
    }
    *output_pointer = '\0';
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
    output_buffer->offset += length;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	441a      	add	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	609a      	str	r2, [r3, #8]

    current_item = current_item->next;
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	61bb      	str	r3, [r7, #24]
  while (current_item) {
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f47f af5b 	bne.w	8001d72 <print_object+0x7e>
  }

  output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <print_object+0x1d8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	e000      	b.n	8001ece <print_object+0x1da>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	f7ff f9d4 	bl	800127e <ensure>
 8001ed6:	61f8      	str	r0, [r7, #28]
  if (output_pointer == NULL) {
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <print_object+0x1ee>
    return false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e022      	b.n	8001f28 <print_object+0x234>
  }
  if (output_buffer->format) {
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <print_object+0x218>
    size_t i;
    for (i = 0; i < (output_buffer->depth - 1); i++) {
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	e007      	b.n	8001f00 <print_object+0x20c>
      *output_pointer++ = '\t';
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	61fa      	str	r2, [r7, #28]
 8001ef6:	2209      	movs	r2, #9
 8001ef8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (output_buffer->depth - 1); i++) {
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	3301      	adds	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d3f1      	bcc.n	8001ef0 <print_object+0x1fc>
    }
  }
  *output_pointer++ = '}';
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	61fa      	str	r2, [r7, #28]
 8001f12:	227d      	movs	r2, #125	@ 0x7d
 8001f14:	701a      	strb	r2, [r3, #0]
  *output_pointer = '\0';
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
  output_buffer->depth--;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	1e5a      	subs	r2, r3, #1
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	60da      	str	r2, [r3, #12]

  return true;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <suffix_object>:
CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON *const object, const char *const string) { return get_object_item(object, string, true); }

CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string) { return cJSON_GetObjectItem(object, string) ? 1 : 0; }

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  prev->next = item;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	601a      	str	r2, [r3, #0]
  item->prev = prev;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	605a      	str	r2, [r3, #4]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <add_item_to_array>:
  reference->type |= cJSON_IsReference;
  reference->next = reference->prev = NULL;
  return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  cJSON *child = NULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]

  if ((item == NULL) || (array == NULL) || (array == item)) {
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <add_item_to_array+0x22>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <add_item_to_array+0x22>
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d101      	bne.n	8001f76 <add_item_to_array+0x26>
    return false;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e01e      	b.n	8001fb4 <add_item_to_array+0x64>
  }

  child = array->child;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	60fb      	str	r3, [r7, #12]
  /*
   * To find the last item in array quickly, we use prev in array
   */
  if (child == NULL) {
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <add_item_to_array+0x46>
    /* list is empty, start new one */
    array->child = item;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	609a      	str	r2, [r3, #8]
    item->prev = item;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
    item->next = NULL;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e00d      	b.n	8001fb2 <add_item_to_array+0x62>
  } else {
    /* append to the end */
    if (child->prev) {
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <add_item_to_array+0x62>
      suffix_object(child->prev, item);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ffc3 	bl	8001f30 <suffix_object>
      array->child->prev = item;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
    }
  }

  return true;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <cast_away_const>:
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void *cast_away_const(const void *string) { return (void *)string; }
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <add_item_to_object>:
#if defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
#pragma GCC diagnostic pop
#endif

static cJSON_bool add_item_to_object(cJSON *const object, const char *const string, cJSON *const item, const internal_hooks *const hooks, const cJSON_bool constant_key) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
  char *new_key = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  int new_type = cJSON_Invalid;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]

  if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item)) {
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <add_item_to_object+0x30>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <add_item_to_object+0x30>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <add_item_to_object+0x30>
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d101      	bne.n	8002004 <add_item_to_object+0x34>
    return false;
 8002000:	2300      	movs	r3, #0
 8002002:	e036      	b.n	8002072 <add_item_to_object+0xa2>
  }

  if (constant_key) {
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <add_item_to_object+0x4e>
    new_key = (char *)cast_away_const(string);
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f7ff ffd6 	bl	8001fbc <cast_away_const>
 8002010:	6178      	str	r0, [r7, #20]
    new_type = item->type | cJSON_StringIsConst;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	e00e      	b.n	800203c <add_item_to_object+0x6c>
  } else {
    new_key = (char *)cJSON_strdup((const unsigned char *)string, hooks);
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	68b8      	ldr	r0, [r7, #8]
 8002022:	f7ff f897 	bl	8001154 <cJSON_strdup>
 8002026:	6178      	str	r0, [r7, #20]
    if (new_key == NULL) {
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <add_item_to_object+0x62>
      return false;
 800202e:	2300      	movs	r3, #0
 8002030:	e01f      	b.n	8002072 <add_item_to_object+0xa2>
    }

    new_type = item->type & ~cJSON_StringIsConst;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800203a:	613b      	str	r3, [r7, #16]
  }

  if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <add_item_to_object+0x8c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <add_item_to_object+0x8c>
    hooks->deallocate(item->string);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a12      	ldr	r2, [r2, #32]
 8002058:	4610      	mov	r0, r2
 800205a:	4798      	blx	r3
  }

  item->string = new_key;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	621a      	str	r2, [r3, #32]
  item->type = new_type;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	60da      	str	r2, [r3, #12]

  return add_item_to_array(object, item);
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff ff70 	bl	8001f50 <add_item_to_array>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <cJSON_AddNumberToObject>:

  cJSON_Delete(bool_item);
  return NULL;
}

CJSON_PUBLIC(cJSON *) cJSON_AddNumberToObject(cJSON *const object, const char *const name, const double number) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	e9c7 2300 	strd	r2, r3, [r7]
  cJSON *number_item = cJSON_CreateNumber(number);
 800208a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800208e:	f000 f81b 	bl	80020c8 <cJSON_CreateNumber>
 8002092:	6178      	str	r0, [r7, #20]
  if (add_item_to_object(object, name, number_item, &global_hooks, false)) {
 8002094:	2300      	movs	r3, #0
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <cJSON_AddNumberToObject+0x44>)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff ff96 	bl	8001fd0 <add_item_to_object>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <cJSON_AddNumberToObject+0x32>
    return number_item;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	e003      	b.n	80020b6 <cJSON_AddNumberToObject+0x3a>
  }

  cJSON_Delete(number_item);
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff f88e 	bl	80011d0 <cJSON_Delete>
  return NULL;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000
 80020c4:	00000000 	.word	0x00000000

080020c8 <cJSON_CreateNumber>:
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	e9c7 0100 	strd	r0, r1, [r7]
  cJSON *item = cJSON_New_Item(&global_hooks);
 80020d2:	481f      	ldr	r0, [pc, #124]	@ (8002150 <cJSON_CreateNumber+0x88>)
 80020d4:	f7ff f866 	bl	80011a4 <cJSON_New_Item>
 80020d8:	60f8      	str	r0, [r7, #12]
  if (item) {
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d02c      	beq.n	800213a <cJSON_CreateNumber+0x72>
    item->type = cJSON_Number;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2208      	movs	r2, #8
 80020e4:	60da      	str	r2, [r3, #12]
    item->valuedouble = num;
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ec:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (num >= INT_MAX) {
 80020f0:	a315      	add	r3, pc, #84	@ (adr r3, 8002148 <cJSON_CreateNumber+0x80>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020fa:	f7fe fcdf 	bl	8000abc <__aeabi_dcmpge>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <cJSON_CreateNumber+0x46>
      item->valueint = INT_MAX;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800210a:	615a      	str	r2, [r3, #20]
 800210c:	e015      	b.n	800213a <cJSON_CreateNumber+0x72>
    } else if (num <= (double)INT_MIN) {
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <cJSON_CreateNumber+0x8c>)
 8002114:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002118:	f7fe fcc6 	bl	8000aa8 <__aeabi_dcmple>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <cJSON_CreateNumber+0x64>
      item->valueint = INT_MIN;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002128:	615a      	str	r2, [r3, #20]
 800212a:	e006      	b.n	800213a <cJSON_CreateNumber+0x72>
    } else {
      item->valueint = (int)num;
 800212c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002130:	f7fe fcee 	bl	8000b10 <__aeabi_d2iz>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	615a      	str	r2, [r3, #20]
    }
  }

  return item;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	f3af 8000 	nop.w
 8002148:	ffc00000 	.word	0xffc00000
 800214c:	41dfffff 	.word	0x41dfffff
 8002150:	20000000 	.word	0x20000000
 8002154:	c1e00000 	.word	0xc1e00000

08002158 <cJSON_CreateObject>:
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
  cJSON *item = cJSON_New_Item(&global_hooks);
 800215e:	4807      	ldr	r0, [pc, #28]	@ (800217c <cJSON_CreateObject+0x24>)
 8002160:	f7ff f820 	bl	80011a4 <cJSON_New_Item>
 8002164:	6078      	str	r0, [r7, #4]
  if (item) {
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <cJSON_CreateObject+0x1a>
    item->type = cJSON_Object;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2240      	movs	r2, #64	@ 0x40
 8002170:	60da      	str	r2, [r3, #12]
  }

  return item;
 8002172:	687b      	ldr	r3, [r7, #4]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000000 	.word	0x20000000

08002180 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002184:	f3bf 8f4f 	dsb	sy
}
 8002188:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <__NVIC_SystemReset+0x24>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002192:	4904      	ldr	r1, [pc, #16]	@ (80021a4 <__NVIC_SystemReset+0x24>)
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_SystemReset+0x28>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800219a:	f3bf 8f4f 	dsb	sy
}
 800219e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <__NVIC_SystemReset+0x20>
 80021a4:	e000ed00 	.word	0xe000ed00
 80021a8:	05fa0004 	.word	0x05fa0004

080021ac <turnOnA76XX>:
bool AT_Stop_MQTT = false;
bool inital_check = false;
uint16_t count_errors = 0;
int timeout_pb_done = 40000;

void turnOnA76XX(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  printf("Enable SIMCOM\n");
 80021b0:	4815      	ldr	r0, [pc, #84]	@ (8002208 <turnOnA76XX+0x5c>)
 80021b2:	f005 f99d 	bl	80074f0 <puts>
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021bc:	4813      	ldr	r0, [pc, #76]	@ (800220c <turnOnA76XX+0x60>)
 80021be:	f003 f83e 	bl	800523e <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 80021c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80021c6:	f001 fdc1 	bl	8003d4c <HAL_Delay>
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021d0:	480e      	ldr	r0, [pc, #56]	@ (800220c <turnOnA76XX+0x60>)
 80021d2:	f003 f834 	bl	800523e <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 80021d6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80021da:	f001 fdb7 	bl	8003d4c <HAL_Delay>
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021e4:	4809      	ldr	r0, [pc, #36]	@ (800220c <turnOnA76XX+0x60>)
 80021e6:	f003 f82a 	bl	800523e <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80021ea:	20c8      	movs	r0, #200	@ 0xc8
 80021ec:	f001 fdae 	bl	8003d4c <HAL_Delay>
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021f6:	4805      	ldr	r0, [pc, #20]	@ (800220c <turnOnA76XX+0x60>)
 80021f8:	f003 f821 	bl	800523e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80021fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002200:	f001 fda4 	bl	8003d4c <HAL_Delay>
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	08008d8c 	.word	0x08008d8c
 800220c:	40010800 	.word	0x40010800

08002210 <Sleep_Stm32_A7672S>:
int Sleep_Stm32_A7672S(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	printf("begin sleep mode STM32");
 8002214:	4814      	ldr	r0, [pc, #80]	@ (8002268 <Sleep_Stm32_A7672S+0x58>)
 8002216:	f005 f903 	bl	8007420 <iprintf>
	//Sleep Simcom A7672S
	  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, SET);
 800221a:	2201      	movs	r2, #1
 800221c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002220:	4812      	ldr	r0, [pc, #72]	@ (800226c <Sleep_Stm32_A7672S+0x5c>)
 8002222:	f003 f80c 	bl	800523e <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8002226:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800222a:	f001 fd8f 	bl	8003d4c <HAL_Delay>
	  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002234:	480d      	ldr	r0, [pc, #52]	@ (800226c <Sleep_Stm32_A7672S+0x5c>)
 8002236:	f003 f802 	bl	800523e <HAL_GPIO_WritePin>
	  HAL_Delay(6000);
 800223a:	f241 7070 	movw	r0, #6000	@ 0x1770
 800223e:	f001 fd85 	bl	8003d4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002248:	4809      	ldr	r0, [pc, #36]	@ (8002270 <Sleep_Stm32_A7672S+0x60>)
 800224a:	f002 fff8 	bl	800523e <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(OPEN_SENSOR_GPIO_Port, OPEN_SENSOR_Pin, GPIO_PIN_RESET);
	HAL_TIM_Base_Start_IT(&htim6);
 800224e:	4809      	ldr	r0, [pc, #36]	@ (8002274 <Sleep_Stm32_A7672S+0x64>)
 8002250:	f003 fe18 	bl	8005e84 <HAL_TIM_Base_Start_IT>
	//CLose sensor
	//HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin,GPIO_PIN_RESET);
	HAL_SuspendTick();
 8002254:	f001 fd9e 	bl	8003d94 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 8002258:	2102      	movs	r1, #2
 800225a:	2000      	movs	r0, #0
 800225c:	f003 f808 	bl	8005270 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8002260:	f001 fda6 	bl	8003db0 <HAL_ResumeTick>
	NVIC_SystemReset();
 8002264:	f7ff ff8c 	bl	8002180 <__NVIC_SystemReset>
 8002268:	08008d9c 	.word	0x08008d9c
 800226c:	40010800 	.word	0x40010800
 8002270:	40010c00 	.word	0x40010c00
 8002274:	2000038c 	.word	0x2000038c

08002278 <fn_check_signal_simcom>:
  } else
    rssi = (SignalStrength * 2 - 113);

  return rssi;
}
float fn_check_signal_simcom(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  printf("-----------------fn_check_signal_simcom------------------\n");
 800227c:	4851      	ldr	r0, [pc, #324]	@ (80023c4 <fn_check_signal_simcom+0x14c>)
 800227e:	f005 f937 	bl	80074f0 <puts>
  sendingToSimcomA76xx("ATE0\r\n");
 8002282:	4851      	ldr	r0, [pc, #324]	@ (80023c8 <fn_check_signal_simcom+0x150>)
 8002284:	f000 fd86 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002288:	20c8      	movs	r0, #200	@ 0xc8
 800228a:	f001 fd5f 	bl	8003d4c <HAL_Delay>
  sendingToSimcomA76xx("AT+CSQ\r\n");
 800228e:	484f      	ldr	r0, [pc, #316]	@ (80023cc <fn_check_signal_simcom+0x154>)
 8002290:	f000 fd80 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002294:	20c8      	movs	r0, #200	@ 0xc8
 8002296:	f001 fd59 	bl	8003d4c <HAL_Delay>
  SignalStrength = (rx_data_sim[8] - 48) * 10 + (rx_data_sim[9] - 48);
 800229a:	4b4d      	ldr	r3, [pc, #308]	@ (80023d0 <fn_check_signal_simcom+0x158>)
 800229c:	7a1b      	ldrb	r3, [r3, #8]
 800229e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b48      	ldr	r3, [pc, #288]	@ (80023d0 <fn_check_signal_simcom+0x158>)
 80022ae:	7a5b      	ldrb	r3, [r3, #9]
 80022b0:	3b30      	subs	r3, #48	@ 0x30
 80022b2:	4413      	add	r3, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd0d 	bl	8000cd4 <__aeabi_i2f>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a45      	ldr	r2, [pc, #276]	@ (80023d4 <fn_check_signal_simcom+0x15c>)
 80022be:	6013      	str	r3, [r2, #0]
  if (SignalStrength >= 31) {
 80022c0:	4b44      	ldr	r3, [pc, #272]	@ (80023d4 <fn_check_signal_simcom+0x15c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4944      	ldr	r1, [pc, #272]	@ (80023d8 <fn_check_signal_simcom+0x160>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe ff0a 	bl	80010e0 <__aeabi_fcmpge>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <fn_check_signal_simcom+0x64>
    rssi = -51;
 80022d2:	4b42      	ldr	r3, [pc, #264]	@ (80023dc <fn_check_signal_simcom+0x164>)
 80022d4:	f06f 0232 	mvn.w	r2, #50	@ 0x32
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	e011      	b.n	8002300 <fn_check_signal_simcom+0x88>
  } else
    rssi = (SignalStrength * 2 - 113);
 80022dc:	4b3d      	ldr	r3, [pc, #244]	@ (80023d4 <fn_check_signal_simcom+0x15c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fc42 	bl	8000b6c <__addsf3>
 80022e8:	4603      	mov	r3, r0
 80022ea:	493d      	ldr	r1, [pc, #244]	@ (80023e0 <fn_check_signal_simcom+0x168>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fc3b 	bl	8000b68 <__aeabi_fsub>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe ff07 	bl	8001108 <__aeabi_f2iz>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a37      	ldr	r2, [pc, #220]	@ (80023dc <fn_check_signal_simcom+0x164>)
 80022fe:	6013      	str	r3, [r2, #0]
  isConnectSimcomA76xx = 1;
 8002300:	4b38      	ldr	r3, [pc, #224]	@ (80023e4 <fn_check_signal_simcom+0x16c>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]
  HAL_Delay(200);
 8002306:	20c8      	movs	r0, #200	@ 0xc8
 8002308:	f001 fd20 	bl	8003d4c <HAL_Delay>
  sendingToSimcomA76xx("AT+CPIN?\r\n");
 800230c:	4836      	ldr	r0, [pc, #216]	@ (80023e8 <fn_check_signal_simcom+0x170>)
 800230e:	f000 fd41 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002312:	20c8      	movs	r0, #200	@ 0xc8
 8002314:	f001 fd1a 	bl	8003d4c <HAL_Delay>
  if (strstr((char *)rx_data_sim, "+CPIN: READY")) {
 8002318:	4934      	ldr	r1, [pc, #208]	@ (80023ec <fn_check_signal_simcom+0x174>)
 800231a:	482d      	ldr	r0, [pc, #180]	@ (80023d0 <fn_check_signal_simcom+0x158>)
 800231c:	f005 fa1c 	bl	8007758 <strstr>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d013      	beq.n	800234e <fn_check_signal_simcom+0xd6>
    printf("-----------------SIM OK !------------------\n");
 8002326:	4832      	ldr	r0, [pc, #200]	@ (80023f0 <fn_check_signal_simcom+0x178>)
 8002328:	f005 f8e2 	bl	80074f0 <puts>
  } else
    return 0;
  //  sendingToSimcomA76xx("AT+CREG=2\r\n");
  //  HAL_Delay(5000);
  HAL_Delay(200);
 800232c:	20c8      	movs	r0, #200	@ 0xc8
 800232e:	f001 fd0d 	bl	8003d4c <HAL_Delay>
  sendingToSimcomA76xx("AT+CREG?\r\n");
 8002332:	4830      	ldr	r0, [pc, #192]	@ (80023f4 <fn_check_signal_simcom+0x17c>)
 8002334:	f000 fd2e 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002338:	20c8      	movs	r0, #200	@ 0xc8
 800233a:	f001 fd07 	bl	8003d4c <HAL_Delay>
  if (strstr((char *)rx_data_sim, "+CREG: 0,1") || strstr((char *)rx_data_sim, "+CREG: 0,6") || strstr((char *)rx_data_sim, "+CREG: 2,6")) {
 800233e:	492e      	ldr	r1, [pc, #184]	@ (80023f8 <fn_check_signal_simcom+0x180>)
 8002340:	4823      	ldr	r0, [pc, #140]	@ (80023d0 <fn_check_signal_simcom+0x158>)
 8002342:	f005 fa09 	bl	8007758 <strstr>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d111      	bne.n	8002370 <fn_check_signal_simcom+0xf8>
 800234c:	e002      	b.n	8002354 <fn_check_signal_simcom+0xdc>
    return 0;
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	e035      	b.n	80023c0 <fn_check_signal_simcom+0x148>
  if (strstr((char *)rx_data_sim, "+CREG: 0,1") || strstr((char *)rx_data_sim, "+CREG: 0,6") || strstr((char *)rx_data_sim, "+CREG: 2,6")) {
 8002354:	4929      	ldr	r1, [pc, #164]	@ (80023fc <fn_check_signal_simcom+0x184>)
 8002356:	481e      	ldr	r0, [pc, #120]	@ (80023d0 <fn_check_signal_simcom+0x158>)
 8002358:	f005 f9fe 	bl	8007758 <strstr>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <fn_check_signal_simcom+0xf8>
 8002362:	4927      	ldr	r1, [pc, #156]	@ (8002400 <fn_check_signal_simcom+0x188>)
 8002364:	481a      	ldr	r0, [pc, #104]	@ (80023d0 <fn_check_signal_simcom+0x158>)
 8002366:	f005 f9f7 	bl	8007758 <strstr>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01c      	beq.n	80023aa <fn_check_signal_simcom+0x132>
    printf("-----------------Network registration OK!------------------\n");
 8002370:	4824      	ldr	r0, [pc, #144]	@ (8002404 <fn_check_signal_simcom+0x18c>)
 8002372:	f005 f8bd 	bl	80074f0 <puts>
  } else
    return 0;

  sendingToSimcomA76xx("ATI\r\n");
 8002376:	4824      	ldr	r0, [pc, #144]	@ (8002408 <fn_check_signal_simcom+0x190>)
 8002378:	f000 fd0c 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 800237c:	20c8      	movs	r0, #200	@ 0xc8
 800237e:	f001 fce5 	bl	8003d4c <HAL_Delay>
  sendingToSimcomA76xx("AT+CICCID\r\n");
 8002382:	4822      	ldr	r0, [pc, #136]	@ (800240c <fn_check_signal_simcom+0x194>)
 8002384:	f000 fd06 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002388:	20c8      	movs	r0, #200	@ 0xc8
 800238a:	f001 fcdf 	bl	8003d4c <HAL_Delay>
  sendingToSimcomA76xx("AT+CGREG?\r\n");
 800238e:	4820      	ldr	r0, [pc, #128]	@ (8002410 <fn_check_signal_simcom+0x198>)
 8002390:	f000 fd00 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002394:	20c8      	movs	r0, #200	@ 0xc8
 8002396:	f001 fcd9 	bl	8003d4c <HAL_Delay>

  if (strstr((char *)rx_data_sim, "+CGREG: 0,1")) {
 800239a:	491e      	ldr	r1, [pc, #120]	@ (8002414 <fn_check_signal_simcom+0x19c>)
 800239c:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <fn_check_signal_simcom+0x158>)
 800239e:	f005 f9db 	bl	8007758 <strstr>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d103      	bne.n	80023b0 <fn_check_signal_simcom+0x138>
 80023a8:	e008      	b.n	80023bc <fn_check_signal_simcom+0x144>
    return 0;
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e007      	b.n	80023c0 <fn_check_signal_simcom+0x148>
    printf("-----------------Network registration OK!------------------\n");
 80023b0:	4814      	ldr	r0, [pc, #80]	@ (8002404 <fn_check_signal_simcom+0x18c>)
 80023b2:	f005 f89d 	bl	80074f0 <puts>
  } else
    return 0;
  return 1;
 80023b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023ba:	e001      	b.n	80023c0 <fn_check_signal_simcom+0x148>
    return 0;
 80023bc:	f04f 0300 	mov.w	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	08008dc0 	.word	0x08008dc0
 80023c8:	08008dfc 	.word	0x08008dfc
 80023cc:	08008db4 	.word	0x08008db4
 80023d0:	20000274 	.word	0x20000274
 80023d4:	200001cc 	.word	0x200001cc
 80023d8:	41f80000 	.word	0x41f80000
 80023dc:	20000030 	.word	0x20000030
 80023e0:	42e20000 	.word	0x42e20000
 80023e4:	20000310 	.word	0x20000310
 80023e8:	08008e04 	.word	0x08008e04
 80023ec:	08008e10 	.word	0x08008e10
 80023f0:	08008e20 	.word	0x08008e20
 80023f4:	08008e4c 	.word	0x08008e4c
 80023f8:	08008e58 	.word	0x08008e58
 80023fc:	08008e64 	.word	0x08008e64
 8002400:	08008e70 	.word	0x08008e70
 8002404:	08008e7c 	.word	0x08008e7c
 8002408:	08008eb8 	.word	0x08008eb8
 800240c:	08008ec0 	.word	0x08008ec0
 8002410:	08008ecc 	.word	0x08008ecc
 8002414:	08008ed8 	.word	0x08008ed8

08002418 <enable_mqtt_on_gsm_modem>:
int enable_mqtt_on_gsm_modem(void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  sendingToSimcomA76xx("AT+CMQTTSTART\r\n");
 800241c:	480f      	ldr	r0, [pc, #60]	@ (800245c <enable_mqtt_on_gsm_modem+0x44>)
 800241e:	f000 fcb9 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(400);
 8002422:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002426:	f001 fc91 	bl	8003d4c <HAL_Delay>
  if ((strstr((char *)rx_data_sim, "+CMQTTSTART: 0") != NULL) || (strstr((char *)rx_data_sim, "ERROR") != NULL)) {
 800242a:	490d      	ldr	r1, [pc, #52]	@ (8002460 <enable_mqtt_on_gsm_modem+0x48>)
 800242c:	480d      	ldr	r0, [pc, #52]	@ (8002464 <enable_mqtt_on_gsm_modem+0x4c>)
 800242e:	f005 f993 	bl	8007758 <strstr>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <enable_mqtt_on_gsm_modem+0x2e>
 8002438:	490b      	ldr	r1, [pc, #44]	@ (8002468 <enable_mqtt_on_gsm_modem+0x50>)
 800243a:	480a      	ldr	r0, [pc, #40]	@ (8002464 <enable_mqtt_on_gsm_modem+0x4c>)
 800243c:	f005 f98c 	bl	8007758 <strstr>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <enable_mqtt_on_gsm_modem+0x38>
    printf("-----------------Service have started "
 8002446:	4809      	ldr	r0, [pc, #36]	@ (800246c <enable_mqtt_on_gsm_modem+0x54>)
 8002448:	f005 f852 	bl	80074f0 <puts>
           "successfully------------------\n");
    return 1;
 800244c:	2301      	movs	r3, #1
 800244e:	e003      	b.n	8002458 <enable_mqtt_on_gsm_modem+0x40>
  } else {
    printf("----------------- Start MQTT service fail------------------\n");
 8002450:	4807      	ldr	r0, [pc, #28]	@ (8002470 <enable_mqtt_on_gsm_modem+0x58>)
 8002452:	f005 f84d 	bl	80074f0 <puts>
    return 0;
 8002456:	2300      	movs	r3, #0
  }
  return 0;
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08008ee4 	.word	0x08008ee4
 8002460:	08008ef4 	.word	0x08008ef4
 8002464:	20000274 	.word	0x20000274
 8002468:	08008f04 	.word	0x08008f04
 800246c:	08008f0c 	.word	0x08008f0c
 8002470:	08008f54 	.word	0x08008f54

08002474 <acquire_gsm_mqtt_client>:
int acquire_gsm_mqtt_client(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  printf("-----------------acquire_gsm_mqtt_client------------------\n");
 8002478:	4827      	ldr	r0, [pc, #156]	@ (8002518 <acquire_gsm_mqtt_client+0xa4>)
 800247a:	f005 f839 	bl	80074f0 <puts>
  sprintf(AT_COMMAND, "+CMQTTACCQ: 0,\"%s\",0\r\n", MQTT_CLIENT_ID);
 800247e:	4a27      	ldr	r2, [pc, #156]	@ (800251c <acquire_gsm_mqtt_client+0xa8>)
 8002480:	4927      	ldr	r1, [pc, #156]	@ (8002520 <acquire_gsm_mqtt_client+0xac>)
 8002482:	4828      	ldr	r0, [pc, #160]	@ (8002524 <acquire_gsm_mqtt_client+0xb0>)
 8002484:	f005 f83c 	bl	8007500 <siprintf>
  sendingToSimcomA76xx("AT+CMQTTACCQ?\r\n");
 8002488:	4827      	ldr	r0, [pc, #156]	@ (8002528 <acquire_gsm_mqtt_client+0xb4>)
 800248a:	f000 fc83 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(400);
 800248e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002492:	f001 fc5b 	bl	8003d4c <HAL_Delay>
  if (strstr((char *)rx_data_sim, AT_COMMAND) != NULL) {
 8002496:	4923      	ldr	r1, [pc, #140]	@ (8002524 <acquire_gsm_mqtt_client+0xb0>)
 8002498:	4824      	ldr	r0, [pc, #144]	@ (800252c <acquire_gsm_mqtt_client+0xb8>)
 800249a:	f005 f95d 	bl	8007758 <strstr>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <acquire_gsm_mqtt_client+0x3a>
    printf("-----------------Had acquired------------------\n");
 80024a4:	4822      	ldr	r0, [pc, #136]	@ (8002530 <acquire_gsm_mqtt_client+0xbc>)
 80024a6:	f005 f823 	bl	80074f0 <puts>
    return 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e032      	b.n	8002514 <acquire_gsm_mqtt_client+0xa0>
  } else {
    printf("-----------------Haven't got acquier yet------------------\n");
 80024ae:	4821      	ldr	r0, [pc, #132]	@ (8002534 <acquire_gsm_mqtt_client+0xc0>)
 80024b0:	f005 f81e 	bl	80074f0 <puts>
    AT_Acquier_MQTT = false;
 80024b4:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <acquire_gsm_mqtt_client+0xc4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
  }
  if (AT_Acquier_MQTT == false) {
 80024ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <acquire_gsm_mqtt_client+0xc4>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d024      	beq.n	8002512 <acquire_gsm_mqtt_client+0x9e>
    sprintf(AT_COMMAND, "AT+CMQTTACCQ=0,\"%s\",0\r\n", MQTT_CLIENT_ID);
 80024c8:	4a14      	ldr	r2, [pc, #80]	@ (800251c <acquire_gsm_mqtt_client+0xa8>)
 80024ca:	491c      	ldr	r1, [pc, #112]	@ (800253c <acquire_gsm_mqtt_client+0xc8>)
 80024cc:	4815      	ldr	r0, [pc, #84]	@ (8002524 <acquire_gsm_mqtt_client+0xb0>)
 80024ce:	f005 f817 	bl	8007500 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 80024d2:	4814      	ldr	r0, [pc, #80]	@ (8002524 <acquire_gsm_mqtt_client+0xb0>)
 80024d4:	f000 fc5e 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(200);
 80024d8:	20c8      	movs	r0, #200	@ 0xc8
 80024da:	f001 fc37 	bl	8003d4c <HAL_Delay>
    sprintf(AT_COMMAND, "+CMQTTACCQ: 0,\"%s\",0", MQTT_CLIENT_ID);
 80024de:	4a0f      	ldr	r2, [pc, #60]	@ (800251c <acquire_gsm_mqtt_client+0xa8>)
 80024e0:	4917      	ldr	r1, [pc, #92]	@ (8002540 <acquire_gsm_mqtt_client+0xcc>)
 80024e2:	4810      	ldr	r0, [pc, #64]	@ (8002524 <acquire_gsm_mqtt_client+0xb0>)
 80024e4:	f005 f80c 	bl	8007500 <siprintf>
    HAL_Delay(200);
 80024e8:	20c8      	movs	r0, #200	@ 0xc8
 80024ea:	f001 fc2f 	bl	8003d4c <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 80024ee:	4915      	ldr	r1, [pc, #84]	@ (8002544 <acquire_gsm_mqtt_client+0xd0>)
 80024f0:	480e      	ldr	r0, [pc, #56]	@ (800252c <acquire_gsm_mqtt_client+0xb8>)
 80024f2:	f005 f931 	bl	8007758 <strstr>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <acquire_gsm_mqtt_client+0x98>
      printf("-----------------Acquier Successfully------------------\n");
 80024fc:	4812      	ldr	r0, [pc, #72]	@ (8002548 <acquire_gsm_mqtt_client+0xd4>)
 80024fe:	f004 fff7 	bl	80074f0 <puts>
      AT_Acquier_MQTT = true;
 8002502:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <acquire_gsm_mqtt_client+0xc4>)
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
      return 1;
 8002508:	2301      	movs	r3, #1
 800250a:	e003      	b.n	8002514 <acquire_gsm_mqtt_client+0xa0>
    } else {
      printf("-----------------Acquier Fail------------------\n");
 800250c:	480f      	ldr	r0, [pc, #60]	@ (800254c <acquire_gsm_mqtt_client+0xd8>)
 800250e:	f004 ffef 	bl	80074f0 <puts>
    }
  }
  return 0;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}
 8002518:	08008f90 	.word	0x08008f90
 800251c:	08008fcc 	.word	0x08008fcc
 8002520:	08008fd8 	.word	0x08008fd8
 8002524:	20000168 	.word	0x20000168
 8002528:	08008ff0 	.word	0x08008ff0
 800252c:	20000274 	.word	0x20000274
 8002530:	08009000 	.word	0x08009000
 8002534:	08009030 	.word	0x08009030
 8002538:	200000bd 	.word	0x200000bd
 800253c:	0800906c 	.word	0x0800906c
 8002540:	08009084 	.word	0x08009084
 8002544:	0800909c 	.word	0x0800909c
 8002548:	080090a0 	.word	0x080090a0
 800254c:	080090d8 	.word	0x080090d8

08002550 <connect_mqtt_server_by_gsm>:
int connect_mqtt_server_by_gsm(void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af02      	add	r7, sp, #8
  sprintf(AT_COMMAND, "+CMQTTCONNECT: 0,\"%s:%d\",20,1,\"%s\",\"%s\"\r\n", MQTT_HOST, MQTT_PORT, MQTT_USER, MQTT_PASS);
 8002556:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <connect_mqtt_server_by_gsm+0xb0>)
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	4b2a      	ldr	r3, [pc, #168]	@ (8002604 <connect_mqtt_server_by_gsm+0xb4>)
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f240 735b 	movw	r3, #1883	@ 0x75b
 8002562:	4a29      	ldr	r2, [pc, #164]	@ (8002608 <connect_mqtt_server_by_gsm+0xb8>)
 8002564:	4929      	ldr	r1, [pc, #164]	@ (800260c <connect_mqtt_server_by_gsm+0xbc>)
 8002566:	482a      	ldr	r0, [pc, #168]	@ (8002610 <connect_mqtt_server_by_gsm+0xc0>)
 8002568:	f004 ffca 	bl	8007500 <siprintf>
  HAL_Delay(200);
 800256c:	20c8      	movs	r0, #200	@ 0xc8
 800256e:	f001 fbed 	bl	8003d4c <HAL_Delay>
  sendingToSimcomA76xx("AT+CMQTTCONNECT?\r\n");
 8002572:	4828      	ldr	r0, [pc, #160]	@ (8002614 <connect_mqtt_server_by_gsm+0xc4>)
 8002574:	f000 fc0e 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002578:	20c8      	movs	r0, #200	@ 0xc8
 800257a:	f001 fbe7 	bl	8003d4c <HAL_Delay>
  if (strstr((char *)rx_data_sim, AT_COMMAND) != NULL) {
 800257e:	4924      	ldr	r1, [pc, #144]	@ (8002610 <connect_mqtt_server_by_gsm+0xc0>)
 8002580:	4825      	ldr	r0, [pc, #148]	@ (8002618 <connect_mqtt_server_by_gsm+0xc8>)
 8002582:	f005 f8e9 	bl	8007758 <strstr>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <connect_mqtt_server_by_gsm+0x4c>
    printf("-----------------Connected------------------\n");
 800258c:	4823      	ldr	r0, [pc, #140]	@ (800261c <connect_mqtt_server_by_gsm+0xcc>)
 800258e:	f004 ffaf 	bl	80074f0 <puts>
    AT_Connect_MQTT = true;
 8002592:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <connect_mqtt_server_by_gsm+0xd0>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
    return 1;
 8002598:	2301      	movs	r3, #1
 800259a:	e02e      	b.n	80025fa <connect_mqtt_server_by_gsm+0xaa>
  } else {
    printf("-----------------Not connect yet !------------------\n");
 800259c:	4821      	ldr	r0, [pc, #132]	@ (8002624 <connect_mqtt_server_by_gsm+0xd4>)
 800259e:	f004 ffa7 	bl	80074f0 <puts>
    AT_Connect_MQTT = false;
 80025a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <connect_mqtt_server_by_gsm+0xd0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
  }
  if (AT_Connect_MQTT == false) {
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <connect_mqtt_server_by_gsm+0xd0>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d020      	beq.n	80025f8 <connect_mqtt_server_by_gsm+0xa8>
    sprintf(AT_COMMAND, "AT+CMQTTCONNECT=0,\"%s:%d\",20,1,\"%s\",\"%s\"\r\n", MQTT_HOST, MQTT_PORT, MQTT_USER, MQTT_PASS);
 80025b6:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <connect_mqtt_server_by_gsm+0xb0>)
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <connect_mqtt_server_by_gsm+0xb4>)
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	f240 735b 	movw	r3, #1883	@ 0x75b
 80025c2:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <connect_mqtt_server_by_gsm+0xb8>)
 80025c4:	4918      	ldr	r1, [pc, #96]	@ (8002628 <connect_mqtt_server_by_gsm+0xd8>)
 80025c6:	4812      	ldr	r0, [pc, #72]	@ (8002610 <connect_mqtt_server_by_gsm+0xc0>)
 80025c8:	f004 ff9a 	bl	8007500 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 80025cc:	4810      	ldr	r0, [pc, #64]	@ (8002610 <connect_mqtt_server_by_gsm+0xc0>)
 80025ce:	f000 fbe1 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(500);
 80025d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025d6:	f001 fbb9 	bl	8003d4c <HAL_Delay>
    if (strstr((char *)rx_data_sim, "+CMQTTCONNECT: 0,0") != NULL) {
 80025da:	4914      	ldr	r1, [pc, #80]	@ (800262c <connect_mqtt_server_by_gsm+0xdc>)
 80025dc:	480e      	ldr	r0, [pc, #56]	@ (8002618 <connect_mqtt_server_by_gsm+0xc8>)
 80025de:	f005 f8bb 	bl	8007758 <strstr>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <connect_mqtt_server_by_gsm+0xa2>
      printf("-----------------Connected MQTT Success------------------\n");
 80025e8:	4811      	ldr	r0, [pc, #68]	@ (8002630 <connect_mqtt_server_by_gsm+0xe0>)
 80025ea:	f004 ff81 	bl	80074f0 <puts>
      return 1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e003      	b.n	80025fa <connect_mqtt_server_by_gsm+0xaa>
    } else {
      printf("-----------------Connect fail------------------\n");
 80025f2:	4810      	ldr	r0, [pc, #64]	@ (8002634 <connect_mqtt_server_by_gsm+0xe4>)
 80025f4:	f004 ff7c 	bl	80074f0 <puts>
    }
  }
  return 0;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	08009150 	.word	0x08009150
 8002604:	08009158 	.word	0x08009158
 8002608:	08009108 	.word	0x08009108
 800260c:	08009124 	.word	0x08009124
 8002610:	20000168 	.word	0x20000168
 8002614:	08009160 	.word	0x08009160
 8002618:	20000274 	.word	0x20000274
 800261c:	08009174 	.word	0x08009174
 8002620:	200000bc 	.word	0x200000bc
 8002624:	080091a4 	.word	0x080091a4
 8002628:	080091dc 	.word	0x080091dc
 800262c:	08009208 	.word	0x08009208
 8002630:	0800921c 	.word	0x0800921c
 8002634:	08009258 	.word	0x08009258

08002638 <subscribe_mqtt_via_gsm>:
int subscribe_mqtt_via_gsm(void) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af02      	add	r7, sp, #8
  for (int i = 1; i < NUMBER_LOADS + 1; i++) {
 800263e:	2301      	movs	r3, #1
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	e05e      	b.n	8002702 <subscribe_mqtt_via_gsm+0xca>
    sprintf(AT_COMMAND, "%s/snac/%s/%d", FARM, SERIAL_NUMBER, i);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <subscribe_mqtt_via_gsm+0xdc>)
 800264a:	4a33      	ldr	r2, [pc, #204]	@ (8002718 <subscribe_mqtt_via_gsm+0xe0>)
 800264c:	4933      	ldr	r1, [pc, #204]	@ (800271c <subscribe_mqtt_via_gsm+0xe4>)
 800264e:	4834      	ldr	r0, [pc, #208]	@ (8002720 <subscribe_mqtt_via_gsm+0xe8>)
 8002650:	f004 ff56 	bl	8007500 <siprintf>
    sprintf(AT_COMMAND, "AT+CMQTTSUBTOPIC=0,%d,1\r\n", (int)strlen(AT_COMMAND));
 8002654:	4832      	ldr	r0, [pc, #200]	@ (8002720 <subscribe_mqtt_via_gsm+0xe8>)
 8002656:	f7fd fde7 	bl	8000228 <strlen>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	4931      	ldr	r1, [pc, #196]	@ (8002724 <subscribe_mqtt_via_gsm+0xec>)
 8002660:	482f      	ldr	r0, [pc, #188]	@ (8002720 <subscribe_mqtt_via_gsm+0xe8>)
 8002662:	f004 ff4d 	bl	8007500 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 8002666:	482e      	ldr	r0, [pc, #184]	@ (8002720 <subscribe_mqtt_via_gsm+0xe8>)
 8002668:	f000 fb94 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(500);
 800266c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002670:	f001 fb6c 	bl	8003d4c <HAL_Delay>
    sprintf(AT_COMMAND, "%s/snac/%s/%d", FARM, SERIAL_NUMBER, i);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <subscribe_mqtt_via_gsm+0xdc>)
 800267a:	4a27      	ldr	r2, [pc, #156]	@ (8002718 <subscribe_mqtt_via_gsm+0xe0>)
 800267c:	4927      	ldr	r1, [pc, #156]	@ (800271c <subscribe_mqtt_via_gsm+0xe4>)
 800267e:	4828      	ldr	r0, [pc, #160]	@ (8002720 <subscribe_mqtt_via_gsm+0xe8>)
 8002680:	f004 ff3e 	bl	8007500 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 8002684:	4826      	ldr	r0, [pc, #152]	@ (8002720 <subscribe_mqtt_via_gsm+0xe8>)
 8002686:	f000 fb85 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(500);
 800268a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800268e:	f001 fb5d 	bl	8003d4c <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 8002692:	4925      	ldr	r1, [pc, #148]	@ (8002728 <subscribe_mqtt_via_gsm+0xf0>)
 8002694:	4825      	ldr	r0, [pc, #148]	@ (800272c <subscribe_mqtt_via_gsm+0xf4>)
 8002696:	f005 f85f 	bl	8007758 <strstr>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <subscribe_mqtt_via_gsm+0x76>
      printf("-----------------Subscribe Topic Success------------------\n");
 80026a0:	4823      	ldr	r0, [pc, #140]	@ (8002730 <subscribe_mqtt_via_gsm+0xf8>)
 80026a2:	f004 ff25 	bl	80074f0 <puts>
      AT_Subcribe_Topic_MQTT = true;
 80026a6:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <subscribe_mqtt_via_gsm+0xfc>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e005      	b.n	80026ba <subscribe_mqtt_via_gsm+0x82>
    } else {
      printf("-----------------Subscribe Topic Fail------------------\n");
 80026ae:	4822      	ldr	r0, [pc, #136]	@ (8002738 <subscribe_mqtt_via_gsm+0x100>)
 80026b0:	f004 ff1e 	bl	80074f0 <puts>
      AT_Subcribe_Topic_MQTT = false;
 80026b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <subscribe_mqtt_via_gsm+0xfc>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
    }
    if (AT_Subcribe_Topic_MQTT == true) {
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <subscribe_mqtt_via_gsm+0xfc>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01c      	beq.n	80026fc <subscribe_mqtt_via_gsm+0xc4>
      sendingToSimcomA76xx("AT+CMQTTSUB=0\r\n");
 80026c2:	481e      	ldr	r0, [pc, #120]	@ (800273c <subscribe_mqtt_via_gsm+0x104>)
 80026c4:	f000 fb66 	bl	8002d94 <sendingToSimcomA76xx>
      HAL_Delay(500);
 80026c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026cc:	f001 fb3e 	bl	8003d4c <HAL_Delay>
      if (strstr((char *)rx_data_sim, "+CMQTTSUB: 0,0") != NULL) {
 80026d0:	491b      	ldr	r1, [pc, #108]	@ (8002740 <subscribe_mqtt_via_gsm+0x108>)
 80026d2:	4816      	ldr	r0, [pc, #88]	@ (800272c <subscribe_mqtt_via_gsm+0xf4>)
 80026d4:	f005 f840 	bl	8007758 <strstr>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <subscribe_mqtt_via_gsm+0xb4>
        printf("-----------------Subscribe Successed !------------------\n");
 80026de:	4819      	ldr	r0, [pc, #100]	@ (8002744 <subscribe_mqtt_via_gsm+0x10c>)
 80026e0:	f004 ff06 	bl	80074f0 <puts>
        AT_Subcribe_MQTT = true;
 80026e4:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <subscribe_mqtt_via_gsm+0x110>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e007      	b.n	80026fc <subscribe_mqtt_via_gsm+0xc4>
      } else {
        printf("-----------------Subscribe Fail !------------------\n");
 80026ec:	4817      	ldr	r0, [pc, #92]	@ (800274c <subscribe_mqtt_via_gsm+0x114>)
 80026ee:	f004 feff 	bl	80074f0 <puts>
        AT_Subcribe_MQTT = false;
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <subscribe_mqtt_via_gsm+0x110>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
        return 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e006      	b.n	800270a <subscribe_mqtt_via_gsm+0xd2>
  for (int i = 1; i < NUMBER_LOADS + 1; i++) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3301      	adds	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b04      	cmp	r3, #4
 8002706:	dd9d      	ble.n	8002644 <subscribe_mqtt_via_gsm+0xc>
      }
    }
  }
  return 1;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	08008fcc 	.word	0x08008fcc
 8002718:	08009288 	.word	0x08009288
 800271c:	08009290 	.word	0x08009290
 8002720:	20000168 	.word	0x20000168
 8002724:	080092a0 	.word	0x080092a0
 8002728:	0800909c 	.word	0x0800909c
 800272c:	20000274 	.word	0x20000274
 8002730:	080092bc 	.word	0x080092bc
 8002734:	200000be 	.word	0x200000be
 8002738:	080092f8 	.word	0x080092f8
 800273c:	08009330 	.word	0x08009330
 8002740:	08009340 	.word	0x08009340
 8002744:	08009350 	.word	0x08009350
 8002748:	200000bf 	.word	0x200000bf
 800274c:	0800938c 	.word	0x0800938c

08002750 <publish_mqtt_via_gsm>:
int publish_mqtt_via_gsm(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  //  is used to input the topic of a publish message
  create_JSON();
 8002756:	f000 fc27 	bl	8002fa8 <create_JSON>
  sprintf(AT_COMMAND, "AT+CMQTTTOPIC=0,%d\r\n", strlen(MQTT_TOPIC_ACTUATOR_STATUS));
 800275a:	2215      	movs	r2, #21
 800275c:	493d      	ldr	r1, [pc, #244]	@ (8002854 <publish_mqtt_via_gsm+0x104>)
 800275e:	483e      	ldr	r0, [pc, #248]	@ (8002858 <publish_mqtt_via_gsm+0x108>)
 8002760:	f004 fece 	bl	8007500 <siprintf>
  sendingToSimcomA76xx(AT_COMMAND);
 8002764:	483c      	ldr	r0, [pc, #240]	@ (8002858 <publish_mqtt_via_gsm+0x108>)
 8002766:	f000 fb15 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 800276a:	20c8      	movs	r0, #200	@ 0xc8
 800276c:	f001 faee 	bl	8003d4c <HAL_Delay>
  sprintf(AT_COMMAND, "%s\r\n", MQTT_TOPIC_ACTUATOR_STATUS);
 8002770:	4a3a      	ldr	r2, [pc, #232]	@ (800285c <publish_mqtt_via_gsm+0x10c>)
 8002772:	493b      	ldr	r1, [pc, #236]	@ (8002860 <publish_mqtt_via_gsm+0x110>)
 8002774:	4838      	ldr	r0, [pc, #224]	@ (8002858 <publish_mqtt_via_gsm+0x108>)
 8002776:	f004 fec3 	bl	8007500 <siprintf>
  sendingToSimcomA76xx(AT_COMMAND);
 800277a:	4837      	ldr	r0, [pc, #220]	@ (8002858 <publish_mqtt_via_gsm+0x108>)
 800277c:	f000 fb0a 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(200);
 8002780:	20c8      	movs	r0, #200	@ 0xc8
 8002782:	f001 fae3 	bl	8003d4c <HAL_Delay>
  if (strstr((char *)rx_data_sim, "OK") != NULL) {
 8002786:	4937      	ldr	r1, [pc, #220]	@ (8002864 <publish_mqtt_via_gsm+0x114>)
 8002788:	4837      	ldr	r0, [pc, #220]	@ (8002868 <publish_mqtt_via_gsm+0x118>)
 800278a:	f004 ffe5 	bl	8007758 <strstr>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <publish_mqtt_via_gsm+0x52>
    printf("----------------- Sent input the topic of a publish message success ! ------------------\n");
 8002794:	4835      	ldr	r0, [pc, #212]	@ (800286c <publish_mqtt_via_gsm+0x11c>)
 8002796:	f004 feab 	bl	80074f0 <puts>
    AT_Topic_Puplish_MQTT = true;
 800279a:	4b35      	ldr	r3, [pc, #212]	@ (8002870 <publish_mqtt_via_gsm+0x120>)
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e005      	b.n	80027ae <publish_mqtt_via_gsm+0x5e>
  } else {
    printf("----------------- Sent input the topic of a publish message fail !------------------\n");
 80027a2:	4834      	ldr	r0, [pc, #208]	@ (8002874 <publish_mqtt_via_gsm+0x124>)
 80027a4:	f004 fea4 	bl	80074f0 <puts>
    AT_Topic_Puplish_MQTT = false;
 80027a8:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <publish_mqtt_via_gsm+0x120>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
  }
  if (AT_Topic_Puplish_MQTT) {
 80027ae:	4b30      	ldr	r3, [pc, #192]	@ (8002870 <publish_mqtt_via_gsm+0x120>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d048      	beq.n	8002848 <publish_mqtt_via_gsm+0xf8>
    // is used to input the message body of a publish message.
    int lengthOfInformPayload = strlen(array_json);
 80027b6:	4830      	ldr	r0, [pc, #192]	@ (8002878 <publish_mqtt_via_gsm+0x128>)
 80027b8:	f7fd fd36 	bl	8000228 <strlen>
 80027bc:	4603      	mov	r3, r0
 80027be:	607b      	str	r3, [r7, #4]
    sprintf(AT_COMMAND, "AT+CMQTTPAYLOAD=0,%d\r\n", lengthOfInformPayload);
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	492e      	ldr	r1, [pc, #184]	@ (800287c <publish_mqtt_via_gsm+0x12c>)
 80027c4:	4824      	ldr	r0, [pc, #144]	@ (8002858 <publish_mqtt_via_gsm+0x108>)
 80027c6:	f004 fe9b 	bl	8007500 <siprintf>
    sendingToSimcomA76xx(AT_COMMAND);
 80027ca:	4823      	ldr	r0, [pc, #140]	@ (8002858 <publish_mqtt_via_gsm+0x108>)
 80027cc:	f000 fae2 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(200);
 80027d0:	20c8      	movs	r0, #200	@ 0xc8
 80027d2:	f001 fabb 	bl	8003d4c <HAL_Delay>
    sendingToSimcomA76xx(array_json);
 80027d6:	4828      	ldr	r0, [pc, #160]	@ (8002878 <publish_mqtt_via_gsm+0x128>)
 80027d8:	f000 fadc 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(200);
 80027dc:	20c8      	movs	r0, #200	@ 0xc8
 80027de:	f001 fab5 	bl	8003d4c <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 80027e2:	4920      	ldr	r1, [pc, #128]	@ (8002864 <publish_mqtt_via_gsm+0x114>)
 80027e4:	4820      	ldr	r0, [pc, #128]	@ (8002868 <publish_mqtt_via_gsm+0x118>)
 80027e6:	f004 ffb7 	bl	8007758 <strstr>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <publish_mqtt_via_gsm+0xae>
      printf("----------------- Sent input the message body of a publish message ! ------------------\n");
 80027f0:	4823      	ldr	r0, [pc, #140]	@ (8002880 <publish_mqtt_via_gsm+0x130>)
 80027f2:	f004 fe7d 	bl	80074f0 <puts>
      AT_Data_Puplish_MQTT = true;
 80027f6:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <publish_mqtt_via_gsm+0x134>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e005      	b.n	800280a <publish_mqtt_via_gsm+0xba>
    } else {
      printf("----------------- Sent input the message body of a publish fail! ------------------\n");
 80027fe:	4822      	ldr	r0, [pc, #136]	@ (8002888 <publish_mqtt_via_gsm+0x138>)
 8002800:	f004 fe76 	bl	80074f0 <puts>
      AT_Data_Puplish_MQTT = false;
 8002804:	4b1f      	ldr	r3, [pc, #124]	@ (8002884 <publish_mqtt_via_gsm+0x134>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
    }
    if (AT_Data_Puplish_MQTT) {
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <publish_mqtt_via_gsm+0x134>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01a      	beq.n	8002848 <publish_mqtt_via_gsm+0xf8>
      sendingToSimcomA76xx("AT+CMQTTPUB=0,1,60\r\n");
 8002812:	481e      	ldr	r0, [pc, #120]	@ (800288c <publish_mqtt_via_gsm+0x13c>)
 8002814:	f000 fabe 	bl	8002d94 <sendingToSimcomA76xx>
      HAL_Delay(200);
 8002818:	20c8      	movs	r0, #200	@ 0xc8
 800281a:	f001 fa97 	bl	8003d4c <HAL_Delay>
      if (strstr((char *)rx_data_sim, "+CMQTTPUB: 0,0") != NULL) {
 800281e:	491c      	ldr	r1, [pc, #112]	@ (8002890 <publish_mqtt_via_gsm+0x140>)
 8002820:	4811      	ldr	r0, [pc, #68]	@ (8002868 <publish_mqtt_via_gsm+0x118>)
 8002822:	f004 ff99 	bl	8007758 <strstr>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <publish_mqtt_via_gsm+0xec>
        printf("-----------------Publish Success !------------------\n");
 800282c:	4819      	ldr	r0, [pc, #100]	@ (8002894 <publish_mqtt_via_gsm+0x144>)
 800282e:	f004 fe5f 	bl	80074f0 <puts>
        AT_Puplish_MQTT = true;
 8002832:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <publish_mqtt_via_gsm+0x148>)
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
        return 1;
 8002838:	2301      	movs	r3, #1
 800283a:	e006      	b.n	800284a <publish_mqtt_via_gsm+0xfa>
      } else {
        printf("-----------------Publish fail !------------------\n");
 800283c:	4817      	ldr	r0, [pc, #92]	@ (800289c <publish_mqtt_via_gsm+0x14c>)
 800283e:	f004 fe57 	bl	80074f0 <puts>
        AT_Puplish_MQTT = false;
 8002842:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <publish_mqtt_via_gsm+0x148>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	080093c0 	.word	0x080093c0
 8002858:	20000168 	.word	0x20000168
 800285c:	080093d8 	.word	0x080093d8
 8002860:	080093f0 	.word	0x080093f0
 8002864:	0800909c 	.word	0x0800909c
 8002868:	20000274 	.word	0x20000274
 800286c:	080093f8 	.word	0x080093f8
 8002870:	200000c0 	.word	0x200000c0
 8002874:	08009454 	.word	0x08009454
 8002878:	200000cc 	.word	0x200000cc
 800287c:	080094ac 	.word	0x080094ac
 8002880:	080094c4 	.word	0x080094c4
 8002884:	200000c1 	.word	0x200000c1
 8002888:	0800951c 	.word	0x0800951c
 800288c:	08009570 	.word	0x08009570
 8002890:	08009588 	.word	0x08009588
 8002894:	08009598 	.word	0x08009598
 8002898:	200000c2 	.word	0x200000c2
 800289c:	080095d0 	.word	0x080095d0

080028a0 <check_error_mqtt_via_gsm>:
int check_error_mqtt_via_gsm(void) {
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
  fn_Enable_MQTT = false;
 80028a6:	4b4e      	ldr	r3, [pc, #312]	@ (80029e0 <check_error_mqtt_via_gsm+0x140>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  fn_Connect_MQTT = false;
 80028ac:	4b4d      	ldr	r3, [pc, #308]	@ (80029e4 <check_error_mqtt_via_gsm+0x144>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
  fn_CheckSim = false;
 80028b2:	4b4d      	ldr	r3, [pc, #308]	@ (80029e8 <check_error_mqtt_via_gsm+0x148>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  fn_Acquier_MQTT = false;
 80028b8:	4b4c      	ldr	r3, [pc, #304]	@ (80029ec <check_error_mqtt_via_gsm+0x14c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
  if (!fn_CheckSim) {
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <check_error_mqtt_via_gsm+0x148>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d016      	beq.n	80028fa <check_error_mqtt_via_gsm+0x5a>
    fn_CheckSim = fn_check_signal_simcom();
 80028cc:	f7ff fcd4 	bl	8002278 <fn_check_signal_simcom>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2201      	movs	r2, #1
 80028d4:	4614      	mov	r4, r2
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fbe2 	bl	80010a4 <__aeabi_fcmpeq>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <check_error_mqtt_via_gsm+0x4a>
 80028e6:	2300      	movs	r3, #0
 80028e8:	461c      	mov	r4, r3
 80028ea:	b2e2      	uxtb	r2, r4
 80028ec:	4b3e      	ldr	r3, [pc, #248]	@ (80029e8 <check_error_mqtt_via_gsm+0x148>)
 80028ee:	701a      	strb	r2, [r3, #0]
  } else {
    return 0;
  }

  if (fn_CheckSim) {
 80028f0:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <check_error_mqtt_via_gsm+0x148>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d011      	beq.n	800291c <check_error_mqtt_via_gsm+0x7c>
 80028f8:	e001      	b.n	80028fe <check_error_mqtt_via_gsm+0x5e>
    return 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e06b      	b.n	80029d6 <check_error_mqtt_via_gsm+0x136>
    fn_Enable_MQTT = enable_mqtt_on_gsm_modem();
 80028fe:	f7ff fd8b 	bl	8002418 <enable_mqtt_on_gsm_modem>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b34      	ldr	r3, [pc, #208]	@ (80029e0 <check_error_mqtt_via_gsm+0x140>)
 8002910:	701a      	strb	r2, [r3, #0]
  } else {
    return 0;
  }

  if (fn_Enable_MQTT) {
 8002912:	4b33      	ldr	r3, [pc, #204]	@ (80029e0 <check_error_mqtt_via_gsm+0x140>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d011      	beq.n	800293e <check_error_mqtt_via_gsm+0x9e>
 800291a:	e001      	b.n	8002920 <check_error_mqtt_via_gsm+0x80>
    return 0;
 800291c:	2300      	movs	r3, #0
 800291e:	e05a      	b.n	80029d6 <check_error_mqtt_via_gsm+0x136>
    fn_Acquier_MQTT = acquire_gsm_mqtt_client();
 8002920:	f7ff fda8 	bl	8002474 <acquire_gsm_mqtt_client>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <check_error_mqtt_via_gsm+0x14c>)
 8002932:	701a      	strb	r2, [r3, #0]
  } else {
    return 0;
  }
  if (fn_Acquier_MQTT) {
 8002934:	4b2d      	ldr	r3, [pc, #180]	@ (80029ec <check_error_mqtt_via_gsm+0x14c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01a      	beq.n	8002972 <check_error_mqtt_via_gsm+0xd2>
 800293c:	e001      	b.n	8002942 <check_error_mqtt_via_gsm+0xa2>
    return 0;
 800293e:	2300      	movs	r3, #0
 8002940:	e049      	b.n	80029d6 <check_error_mqtt_via_gsm+0x136>
    for (int i = 0; i <= 5; i++) {
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	e010      	b.n	800296a <check_error_mqtt_via_gsm+0xca>
      fn_Connect_MQTT = connect_mqtt_server_by_gsm();
 8002948:	f7ff fe02 	bl	8002550 <connect_mqtt_server_by_gsm>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2da      	uxtb	r2, r3
 8002958:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <check_error_mqtt_via_gsm+0x144>)
 800295a:	701a      	strb	r2, [r3, #0]
      if (fn_Connect_MQTT) {
 800295c:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <check_error_mqtt_via_gsm+0x144>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d108      	bne.n	8002976 <check_error_mqtt_via_gsm+0xd6>
    for (int i = 0; i <= 5; i++) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3301      	adds	r3, #1
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b05      	cmp	r3, #5
 800296e:	ddeb      	ble.n	8002948 <check_error_mqtt_via_gsm+0xa8>
 8002970:	e002      	b.n	8002978 <check_error_mqtt_via_gsm+0xd8>
        break;
      }
    }
  } else {
    return 0;
 8002972:	2300      	movs	r3, #0
 8002974:	e02f      	b.n	80029d6 <check_error_mqtt_via_gsm+0x136>
        break;
 8002976:	bf00      	nop
  }
  if (fn_Connect_MQTT) {
 8002978:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <check_error_mqtt_via_gsm+0x144>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <check_error_mqtt_via_gsm+0x122>
    for (int i = 0; i <= 3; i++) {
 8002980:	2300      	movs	r3, #0
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	e010      	b.n	80029a8 <check_error_mqtt_via_gsm+0x108>
      fn_Subcribe_MQTT = subscribe_mqtt_via_gsm();
 8002986:	f7ff fe57 	bl	8002638 <subscribe_mqtt_via_gsm>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <check_error_mqtt_via_gsm+0x150>)
 8002998:	701a      	strb	r2, [r3, #0]
      if (fn_Subcribe_MQTT) {
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <check_error_mqtt_via_gsm+0x150>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <check_error_mqtt_via_gsm+0x110>
    for (int i = 0; i <= 3; i++) {
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	ddeb      	ble.n	8002986 <check_error_mqtt_via_gsm+0xe6>
 80029ae:	e000      	b.n	80029b2 <check_error_mqtt_via_gsm+0x112>
        break;
 80029b0:	bf00      	nop
      }
    }
    if (fn_Subcribe_MQTT)
 80029b2:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <check_error_mqtt_via_gsm+0x150>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <check_error_mqtt_via_gsm+0x11e>
      return 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00b      	b.n	80029d6 <check_error_mqtt_via_gsm+0x136>
    else
      stop_mqtt_via_gsm();
 80029be:	f000 f819 	bl	80029f4 <stop_mqtt_via_gsm>
  }
  if (!fn_Connect_MQTT) {
 80029c2:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <check_error_mqtt_via_gsm+0x144>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	f083 0301 	eor.w	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <check_error_mqtt_via_gsm+0x134>
    stop_mqtt_via_gsm();
 80029d0:	f000 f810 	bl	80029f4 <stop_mqtt_via_gsm>
  }
  return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000324 	.word	0x20000324
 80029e4:	20000325 	.word	0x20000325
 80029e8:	20000326 	.word	0x20000326
 80029ec:	20000329 	.word	0x20000329
 80029f0:	20000327 	.word	0x20000327

080029f4 <stop_mqtt_via_gsm>:
int stop_mqtt_via_gsm(void) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  sendingToSimcomA76xx("AT+CMQTTDISC?\r\n");
 80029f8:	4839      	ldr	r0, [pc, #228]	@ (8002ae0 <stop_mqtt_via_gsm+0xec>)
 80029fa:	f000 f9cb 	bl	8002d94 <sendingToSimcomA76xx>
  HAL_Delay(500);
 80029fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a02:	f001 f9a3 	bl	8003d4c <HAL_Delay>
  if (strstr((char *)rx_data_sim, "+CMQTTDISC: 0,0") != NULL) {
 8002a06:	4937      	ldr	r1, [pc, #220]	@ (8002ae4 <stop_mqtt_via_gsm+0xf0>)
 8002a08:	4837      	ldr	r0, [pc, #220]	@ (8002ae8 <stop_mqtt_via_gsm+0xf4>)
 8002a0a:	f004 fea5 	bl	8007758 <strstr>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <stop_mqtt_via_gsm+0x2e>
    printf("----------------- Connection! ------------------\n");
 8002a14:	4835      	ldr	r0, [pc, #212]	@ (8002aec <stop_mqtt_via_gsm+0xf8>)
 8002a16:	f004 fd6b 	bl	80074f0 <puts>
    AT_Check_Dis_MQTT = true;
 8002a1a:	4b35      	ldr	r3, [pc, #212]	@ (8002af0 <stop_mqtt_via_gsm+0xfc>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e008      	b.n	8002a34 <stop_mqtt_via_gsm+0x40>
  } else {
    printf("----------------- Disconnect! ------------------\n");
 8002a22:	4834      	ldr	r0, [pc, #208]	@ (8002af4 <stop_mqtt_via_gsm+0x100>)
 8002a24:	f004 fd64 	bl	80074f0 <puts>
    AT_Check_Dis_MQTT = false;
 8002a28:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <stop_mqtt_via_gsm+0xfc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
    AT_Disconnect_MQTT = true;
 8002a2e:	4b32      	ldr	r3, [pc, #200]	@ (8002af8 <stop_mqtt_via_gsm+0x104>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
  }
  if (AT_Check_Dis_MQTT) {
 8002a34:	4b2e      	ldr	r3, [pc, #184]	@ (8002af0 <stop_mqtt_via_gsm+0xfc>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d016      	beq.n	8002a6a <stop_mqtt_via_gsm+0x76>
    sendingToSimcomA76xx("AT+CMQTTDISC=0,120\r\n");
 8002a3c:	482f      	ldr	r0, [pc, #188]	@ (8002afc <stop_mqtt_via_gsm+0x108>)
 8002a3e:	f000 f9a9 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(500);
 8002a42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a46:	f001 f981 	bl	8003d4c <HAL_Delay>
    if (strstr((char *)rx_data_sim, "+CMQTTDISC: 0,0") != NULL) {
 8002a4a:	4926      	ldr	r1, [pc, #152]	@ (8002ae4 <stop_mqtt_via_gsm+0xf0>)
 8002a4c:	4826      	ldr	r0, [pc, #152]	@ (8002ae8 <stop_mqtt_via_gsm+0xf4>)
 8002a4e:	f004 fe83 	bl	8007758 <strstr>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <stop_mqtt_via_gsm+0x72>
      printf("----------------- Disconnect successfully! ------------------\n");
 8002a58:	4829      	ldr	r0, [pc, #164]	@ (8002b00 <stop_mqtt_via_gsm+0x10c>)
 8002a5a:	f004 fd49 	bl	80074f0 <puts>
      AT_Disconnect_MQTT = true;
 8002a5e:	4b26      	ldr	r3, [pc, #152]	@ (8002af8 <stop_mqtt_via_gsm+0x104>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e001      	b.n	8002a6a <stop_mqtt_via_gsm+0x76>
    } else
      restart_stm32();
 8002a66:	f000 f8b1 	bl	8002bcc <restart_stm32>
  }
  if (AT_Disconnect_MQTT) {
 8002a6a:	4b23      	ldr	r3, [pc, #140]	@ (8002af8 <stop_mqtt_via_gsm+0x104>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <stop_mqtt_via_gsm+0xac>
    sendingToSimcomA76xx("AT+CMQTTREL=0\r\n");
 8002a72:	4824      	ldr	r0, [pc, #144]	@ (8002b04 <stop_mqtt_via_gsm+0x110>)
 8002a74:	f000 f98e 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(500);
 8002a78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a7c:	f001 f966 	bl	8003d4c <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 8002a80:	4921      	ldr	r1, [pc, #132]	@ (8002b08 <stop_mqtt_via_gsm+0x114>)
 8002a82:	4819      	ldr	r0, [pc, #100]	@ (8002ae8 <stop_mqtt_via_gsm+0xf4>)
 8002a84:	f004 fe68 	bl	8007758 <strstr>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <stop_mqtt_via_gsm+0xa8>
      printf("----------------- Release a MQTT client successfully! "
 8002a8e:	481f      	ldr	r0, [pc, #124]	@ (8002b0c <stop_mqtt_via_gsm+0x118>)
 8002a90:	f004 fd2e 	bl	80074f0 <puts>
             "------------------\n");
      AT_Rel_MQTT = true;
 8002a94:	4b1e      	ldr	r3, [pc, #120]	@ (8002b10 <stop_mqtt_via_gsm+0x11c>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e001      	b.n	8002aa0 <stop_mqtt_via_gsm+0xac>
    } else
      restart_stm32();
 8002a9c:	f000 f896 	bl	8002bcc <restart_stm32>
  }
  if (AT_Rel_MQTT) {
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <stop_mqtt_via_gsm+0x11c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d017      	beq.n	8002ad8 <stop_mqtt_via_gsm+0xe4>
    sendingToSimcomA76xx("AT+CMQTTSTOP\r\n");
 8002aa8:	481a      	ldr	r0, [pc, #104]	@ (8002b14 <stop_mqtt_via_gsm+0x120>)
 8002aaa:	f000 f973 	bl	8002d94 <sendingToSimcomA76xx>
    HAL_Delay(500);
 8002aae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ab2:	f001 f94b 	bl	8003d4c <HAL_Delay>
    if (strstr((char *)rx_data_sim, "OK") != NULL) {
 8002ab6:	4914      	ldr	r1, [pc, #80]	@ (8002b08 <stop_mqtt_via_gsm+0x114>)
 8002ab8:	480b      	ldr	r0, [pc, #44]	@ (8002ae8 <stop_mqtt_via_gsm+0xf4>)
 8002aba:	f004 fe4d 	bl	8007758 <strstr>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <stop_mqtt_via_gsm+0xe0>
      printf("----------------- Stop MQTT service successfully! "
 8002ac4:	4814      	ldr	r0, [pc, #80]	@ (8002b18 <stop_mqtt_via_gsm+0x124>)
 8002ac6:	f004 fd13 	bl	80074f0 <puts>
             "------------------\n");
      AT_Stop_MQTT = true;
 8002aca:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <stop_mqtt_via_gsm+0x128>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
      return 1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e002      	b.n	8002ada <stop_mqtt_via_gsm+0xe6>
    } else
      restart_stm32();
 8002ad4:	f000 f87a 	bl	8002bcc <restart_stm32>
  }
  return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	08009604 	.word	0x08009604
 8002ae4:	08009614 	.word	0x08009614
 8002ae8:	20000274 	.word	0x20000274
 8002aec:	08009624 	.word	0x08009624
 8002af0:	200000c3 	.word	0x200000c3
 8002af4:	08009658 	.word	0x08009658
 8002af8:	200000c4 	.word	0x200000c4
 8002afc:	0800968c 	.word	0x0800968c
 8002b00:	080096a4 	.word	0x080096a4
 8002b04:	080096e4 	.word	0x080096e4
 8002b08:	0800909c 	.word	0x0800909c
 8002b0c:	080096f4 	.word	0x080096f4
 8002b10:	200000c5 	.word	0x200000c5
 8002b14:	08009740 	.word	0x08009740
 8002b18:	08009750 	.word	0x08009750
 8002b1c:	200000c6 	.word	0x200000c6

08002b20 <update_status>:
int update_status(void) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
  for (int i = 1; i <= 10; i++) {
 8002b26:	2301      	movs	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e012      	b.n	8002b52 <update_status+0x32>
    fn_Publish_MQTT = publish_mqtt_via_gsm();
 8002b2c:	f7ff fe10 	bl	8002750 <publish_mqtt_via_gsm>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf14      	ite	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	2300      	moveq	r3, #0
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <update_status+0xa0>)
 8002b3e:	701a      	strb	r2, [r3, #0]
    if (fn_Publish_MQTT) {
 8002b40:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc0 <update_status+0xa0>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <update_status+0x2c>
      return 1;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e035      	b.n	8002bb8 <update_status+0x98>
  for (int i = 1; i <= 10; i++) {
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b0a      	cmp	r3, #10
 8002b56:	dde9      	ble.n	8002b2c <update_status+0xc>
    }
  }
  if (!fn_Publish_MQTT) {
 8002b58:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <update_status+0xa0>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	f083 0301 	eor.w	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d027      	beq.n	8002bb6 <update_status+0x96>
    int temp = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
    for (int i = 1; i <= 15; i++) {
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	e01f      	b.n	8002bb0 <update_status+0x90>
      temp = check_error_mqtt_via_gsm();
 8002b70:	f7ff fe96 	bl	80028a0 <check_error_mqtt_via_gsm>
 8002b74:	6078      	str	r0, [r7, #4]
      if (!temp) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d112      	bne.n	8002ba2 <update_status+0x82>
        count_errors++;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <update_status+0xa4>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <update_status+0xa4>)
 8002b86:	801a      	strh	r2, [r3, #0]
        printf("-----------------UPDATE FAIL %d!------------------\n", count_errors);
 8002b88:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <update_status+0xa4>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	480e      	ldr	r0, [pc, #56]	@ (8002bc8 <update_status+0xa8>)
 8002b90:	f004 fc46 	bl	8007420 <iprintf>
        if (count_errors >= 15) {
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <update_status+0xa4>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	2b0e      	cmp	r3, #14
 8002b9a:	d906      	bls.n	8002baa <update_status+0x8a>
          restart_stm32();
 8002b9c:	f000 f816 	bl	8002bcc <restart_stm32>
 8002ba0:	e003      	b.n	8002baa <update_status+0x8a>
        }
      } else {
        count_errors = 0;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <update_status+0xa4>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	801a      	strh	r2, [r3, #0]
        break;
 8002ba8:	e005      	b.n	8002bb6 <update_status+0x96>
    for (int i = 1; i <= 15; i++) {
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3301      	adds	r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b0f      	cmp	r3, #15
 8002bb4:	dddc      	ble.n	8002b70 <update_status+0x50>
      }
    }
  }
  return 1;
 8002bb6:	2301      	movs	r3, #1
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000328 	.word	0x20000328
 8002bc4:	200000c8 	.word	0x200000c8
 8002bc8:	08009798 	.word	0x08009798

08002bcc <restart_stm32>:
void restart_stm32(void) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  printf("\r\n-----------------Restart STM32------------------\r\n");
 8002bd0:	4805      	ldr	r0, [pc, #20]	@ (8002be8 <restart_stm32+0x1c>)
 8002bd2:	f004 fc8d 	bl	80074f0 <puts>
  printf("\r\n-----------------GOOD BYE !------------------\r\n");
 8002bd6:	4805      	ldr	r0, [pc, #20]	@ (8002bec <restart_stm32+0x20>)
 8002bd8:	f004 fc8a 	bl	80074f0 <puts>
  stop_mqtt_via_gsm();
 8002bdc:	f7ff ff0a 	bl	80029f4 <stop_mqtt_via_gsm>
  write_status_load();
 8002be0:	f000 fe00 	bl	80037e4 <write_status_load>
  NVIC_SystemReset();
 8002be4:	f7ff facc 	bl	8002180 <__NVIC_SystemReset>
 8002be8:	080097cc 	.word	0x080097cc
 8002bec:	08009800 	.word	0x08009800

08002bf0 <init_cricket>:
}
int init_cricket(void) {
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
  printf("\r\n-----------------INIT CRICKET !------------------\r\n");
 8002bf6:	483f      	ldr	r0, [pc, #252]	@ (8002cf4 <init_cricket+0x104>)
 8002bf8:	f004 fc7a 	bl	80074f0 <puts>
  for (int i = 0; i <= 3; i++) {
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	e06d      	b.n	8002cde <init_cricket+0xee>
    if (isPBDONE == true) {
 8002c02:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <init_cricket+0x108>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d166      	bne.n	8002cd8 <init_cricket+0xe8>
      if (!fn_CheckSim) {
 8002c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002cfc <init_cricket+0x10c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d016      	beq.n	8002c46 <init_cricket+0x56>
        fn_CheckSim = fn_check_signal_simcom();
 8002c18:	f7ff fb2e 	bl	8002278 <fn_check_signal_simcom>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4614      	mov	r4, r2
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fa3c 	bl	80010a4 <__aeabi_fcmpeq>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <init_cricket+0x46>
 8002c32:	2300      	movs	r3, #0
 8002c34:	461c      	mov	r4, r3
 8002c36:	b2e2      	uxtb	r2, r4
 8002c38:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <init_cricket+0x10c>)
 8002c3a:	701a      	strb	r2, [r3, #0]
      } else
    	  NVIC_SystemReset();
      if (fn_CheckSim) {
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002cfc <init_cricket+0x10c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d011      	beq.n	8002c68 <init_cricket+0x78>
 8002c44:	e001      	b.n	8002c4a <init_cricket+0x5a>
    	  NVIC_SystemReset();
 8002c46:	f7ff fa9b 	bl	8002180 <__NVIC_SystemReset>
        fn_Enable_MQTT = enable_mqtt_on_gsm_modem();
 8002c4a:	f7ff fbe5 	bl	8002418 <enable_mqtt_on_gsm_modem>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4b29      	ldr	r3, [pc, #164]	@ (8002d00 <init_cricket+0x110>)
 8002c5c:	701a      	strb	r2, [r3, #0]
      } else
    	  NVIC_SystemReset();
      if (fn_Enable_MQTT) {
 8002c5e:	4b28      	ldr	r3, [pc, #160]	@ (8002d00 <init_cricket+0x110>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <init_cricket+0x90>
 8002c66:	e001      	b.n	8002c6c <init_cricket+0x7c>
    	  NVIC_SystemReset();
 8002c68:	f7ff fa8a 	bl	8002180 <__NVIC_SystemReset>
        fn_Acquier_MQTT = acquire_gsm_mqtt_client();
 8002c6c:	f7ff fc02 	bl	8002474 <acquire_gsm_mqtt_client>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf14      	ite	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <init_cricket+0x114>)
 8002c7e:	701a      	strb	r2, [r3, #0]
      }
      if (fn_Acquier_MQTT) {
 8002c80:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <init_cricket+0x114>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <init_cricket+0xac>
        fn_Connect_MQTT = connect_mqtt_server_by_gsm();
 8002c88:	f7ff fc62 	bl	8002550 <connect_mqtt_server_by_gsm>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <init_cricket+0x118>)
 8002c9a:	701a      	strb	r2, [r3, #0]
      }
      if (fn_Connect_MQTT) {
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <init_cricket+0x118>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d016      	beq.n	8002cd2 <init_cricket+0xe2>
//        fn_Subcribe_MQTT = subscribe_mqtt_via_gsm();
    	  fn_Subcribe_MQTT =1;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <init_cricket+0x11c>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
        if (fn_Subcribe_MQTT) {
 8002caa:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <init_cricket+0x11c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <init_cricket+0xde>
          HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, GPIO_PIN_SET);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cb8:	4815      	ldr	r0, [pc, #84]	@ (8002d10 <init_cricket+0x120>)
 8002cba:	f002 fac0 	bl	800523e <HAL_GPIO_WritePin>
          isConnectMQTT = true;
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <init_cricket+0x124>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
          inital_check = true;
 8002cc4:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <init_cricket+0x128>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
          return 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00d      	b.n	8002cea <init_cricket+0xfa>
        } else {
          check_error_mqtt_via_gsm();
 8002cce:	f7ff fde7 	bl	80028a0 <check_error_mqtt_via_gsm>
          // isConnectedMQTT = false;
        }
      }
      printf("-----------------Complete initial check ------------------");
 8002cd2:	4812      	ldr	r0, [pc, #72]	@ (8002d1c <init_cricket+0x12c>)
 8002cd4:	f004 fba4 	bl	8007420 <iprintf>
  for (int i = 0; i <= 3; i++) {
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	dd8e      	ble.n	8002c02 <init_cricket+0x12>
    }
  }
  restart_stm32();
 8002ce4:	f7ff ff72 	bl	8002bcc <restart_stm32>
  return 0;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	08009834 	.word	0x08009834
 8002cf8:	200001d4 	.word	0x200001d4
 8002cfc:	20000326 	.word	0x20000326
 8002d00:	20000324 	.word	0x20000324
 8002d04:	20000329 	.word	0x20000329
 8002d08:	20000325 	.word	0x20000325
 8002d0c:	20000327 	.word	0x20000327
 8002d10:	40010c00 	.word	0x40010c00
 8002d14:	20000314 	.word	0x20000314
 8002d18:	200000c7 	.word	0x200000c7
 8002d1c:	0800986c 	.word	0x0800986c

08002d20 <event_wait_function>:
int event_wait_function(void) {
 8002d20:	b598      	push	{r3, r4, r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  previousTick = HAL_GetTick();
 8002d24:	f001 f808 	bl	8003d38 <HAL_GetTick>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <event_wait_function+0x5c>)
 8002d2e:	601a      	str	r2, [r3, #0]
  while (inital_check == 0 && previousTick + timeout_pb_done > HAL_GetTick()) {
 8002d30:	e008      	b.n	8002d44 <event_wait_function+0x24>
    if (strstr((char *)rx_data_sim, "PB DONE")) {
 8002d32:	4913      	ldr	r1, [pc, #76]	@ (8002d80 <event_wait_function+0x60>)
 8002d34:	4813      	ldr	r0, [pc, #76]	@ (8002d84 <event_wait_function+0x64>)
 8002d36:	f004 fd0f 	bl	8007758 <strstr>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <event_wait_function+0x24>
      // isPBDONE = 1;
      return 1;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e018      	b.n	8002d76 <event_wait_function+0x56>
  while (inital_check == 0 && previousTick + timeout_pb_done > HAL_GetTick()) {
 8002d44:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <event_wait_function+0x68>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <event_wait_function+0x48>
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <event_wait_function+0x5c>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <event_wait_function+0x6c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	f000 ffeb 	bl	8003d38 <HAL_GetTick>
 8002d62:	4603      	mov	r3, r0
 8002d64:	429c      	cmp	r4, r3
 8002d66:	d8e4      	bhi.n	8002d32 <event_wait_function+0x12>
    //		if(strstr((char *)simcomRxBuffer,"PDN ACT 1")){
    //			isPBDONE = 1;
    //			HAL_Delay(5000);
    //		}
  }
  if (isConnectSimcomA76xx == 0) {
 8002d68:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <event_wait_function+0x70>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <event_wait_function+0x54>
	  NVIC_SystemReset();
 8002d70:	f7ff fa06 	bl	8002180 <__NVIC_SystemReset>
  }

  return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	bd98      	pop	{r3, r4, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000030c 	.word	0x2000030c
 8002d80:	080098a8 	.word	0x080098a8
 8002d84:	20000274 	.word	0x20000274
 8002d88:	200000c7 	.word	0x200000c7
 8002d8c:	2000000c 	.word	0x2000000c
 8002d90:	20000310 	.word	0x20000310

08002d94 <sendingToSimcomA76xx>:
#include <math.h>
extern UART_HandleTypeDef huart1;
char array_json[150];
// float Percentage_battery;

void sendingToSimcomA76xx(char *cmd) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  printf("STM32 Write: %s", cmd);
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4809      	ldr	r0, [pc, #36]	@ (8002dc4 <sendingToSimcomA76xx+0x30>)
 8002da0:	f004 fb3e 	bl	8007420 <iprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fd fa3f 	bl	8000228 <strlen>
 8002daa:	4603      	mov	r3, r0
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4804      	ldr	r0, [pc, #16]	@ (8002dc8 <sendingToSimcomA76xx+0x34>)
 8002db6:	f003 fb2d 	bl	8006414 <HAL_UART_Transmit>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	080098b0 	.word	0x080098b0
 8002dc8:	200003d4 	.word	0x200003d4

08002dcc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a62      	ldr	r2, [pc, #392]	@ (8002f68 <HAL_UARTEx_RxEventCallback+0x19c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f040 80b9 	bne.w	8002f56 <HAL_UARTEx_RxEventCallback+0x18a>
    printf("\r\nSIMCOM Response:");
 8002de4:	4861      	ldr	r0, [pc, #388]	@ (8002f6c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8002de6:	f004 fb1b 	bl	8007420 <iprintf>
    printf(rxBuffer);
 8002dea:	4861      	ldr	r0, [pc, #388]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002dec:	f004 fb18 	bl	8007420 <iprintf>
    static int times;
    times = strlen(rxBuffer);
 8002df0:	485f      	ldr	r0, [pc, #380]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002df2:	f7fd fa19 	bl	8000228 <strlen>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8002f74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002dfc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < times; i++) {
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e08d      	b.n	8002f20 <HAL_UARTEx_RxEventCallback+0x154>
      rx_data_sim[i] = rxBuffer[i];
 8002e04:	4a5a      	ldr	r2, [pc, #360]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4413      	add	r3, r2
 8002e0a:	7819      	ldrb	r1, [r3, #0]
 8002e0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002f78 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4413      	add	r3, r2
 8002e12:	460a      	mov	r2, r1
 8002e14:	701a      	strb	r2, [r3, #0]
      if ((char)rxBuffer[i] == (char)SERIAL_NUMBER[5] && (char)rxBuffer[i + 1] == (char)SERIAL_NUMBER[6] && (char)rxBuffer[i + 2] == (char)SERIAL_NUMBER[7]) {
 8002e16:	4a56      	ldr	r2, [pc, #344]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2230      	movs	r2, #48	@ 0x30
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d17a      	bne.n	8002f1a <HAL_UARTEx_RxEventCallback+0x14e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3301      	adds	r3, #1
 8002e28:	4a51      	ldr	r2, [pc, #324]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	2233      	movs	r2, #51	@ 0x33
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d173      	bne.n	8002f1a <HAL_UARTEx_RxEventCallback+0x14e>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3302      	adds	r3, #2
 8002e36:	4a4e      	ldr	r2, [pc, #312]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002e38:	5cd3      	ldrb	r3, [r2, r3]
 8002e3a:	2232      	movs	r2, #50	@ 0x32
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d16c      	bne.n	8002f1a <HAL_UARTEx_RxEventCallback+0x14e>
        payLoadPin = (rxBuffer[i + 4] - 48);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4a4a      	ldr	r2, [pc, #296]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	3b30      	subs	r3, #48	@ 0x30
 8002e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f7c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002e4c:	6013      	str	r3, [r2, #0]
#if SIMCOM_MODEL == a7672s
        if (rxBuffer[(i + 29)] == 49 && isPBDONE == true)
#elif SIMCOM_MODEL == a7670c
        if (rxBuffer[(i + 31)] == 49 && isPBDONE == true)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	331f      	adds	r3, #31
 8002e52:	4a47      	ldr	r2, [pc, #284]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	2b31      	cmp	r3, #49	@ 0x31
 8002e58:	d12c      	bne.n	8002eb4 <HAL_UARTEx_RxEventCallback+0xe8>
 8002e5a:	4b49      	ldr	r3, [pc, #292]	@ (8002f80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d128      	bne.n	8002eb4 <HAL_UARTEx_RxEventCallback+0xe8>
#elif SIMCOM_MODEL == a7670sa
        if (rxBuffer[(i + 29)] == 49 && isPBDONE == true)
#endif
        {
          printf("-----------ON RELAY %d -----------\r\n", payLoadPin);
 8002e62:	4b46      	ldr	r3, [pc, #280]	@ (8002f7c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4846      	ldr	r0, [pc, #280]	@ (8002f84 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002e6a:	f004 fad9 	bl	8007420 <iprintf>
          HAL_GPIO_WritePin(GPIO_LOAD_PORT[payLoadPin - 1], GPIO_LOAD_PIN[payLoadPin - 1], 1);
 8002e6e:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	4a44      	ldr	r2, [pc, #272]	@ (8002f88 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8002e76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e7a:	4b40      	ldr	r3, [pc, #256]	@ (8002f7c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	4a42      	ldr	r2, [pc, #264]	@ (8002f8c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f002 f9d7 	bl	800523e <HAL_GPIO_WritePin>
          onReay++;
 8002e90:	4b3f      	ldr	r3, [pc, #252]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	4a3e      	ldr	r2, [pc, #248]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002e98:	6013      	str	r3, [r2, #0]
          if (onReay >= NUMBER_LOADS) {
 8002e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	dd02      	ble.n	8002ea8 <HAL_UARTEx_RxEventCallback+0xdc>
            onReay = NUMBER_LOADS;
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	601a      	str	r2, [r3, #0]
          }
          HAL_GPIO_WritePin(ON_OFF_PWM_GPIO_Port, ON_OFF_PWM_Pin, 0);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002eae:	4839      	ldr	r0, [pc, #228]	@ (8002f94 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002eb0:	f002 f9c5 	bl	800523e <HAL_GPIO_WritePin>
        }

#if SIMCOM_MODEL == a7672s
        if (rxBuffer[(i + 29)] == 48 && isPBDONE == true)
#elif SIMCOM_MODEL == a7670c
        if (rxBuffer[(i + 31)] == 48 && isPBDONE == true)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	331f      	adds	r3, #31
 8002eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	2b30      	cmp	r3, #48	@ 0x30
 8002ebe:	d12c      	bne.n	8002f1a <HAL_UARTEx_RxEventCallback+0x14e>
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d128      	bne.n	8002f1a <HAL_UARTEx_RxEventCallback+0x14e>
//            if (rxBuffer[(i + 8)] == 48 && isPBDONE == true)
#elif SIMCOM_MODEL == a7670sa
        if (rxBuffer[(i + 29)] == 48 && isPBDONE == true)
#endif
        {
          printf("-----------OFF RELAY %d -----------\r\n", payLoadPin);
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8002f7c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4832      	ldr	r0, [pc, #200]	@ (8002f98 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8002ed0:	f004 faa6 	bl	8007420 <iprintf>
          HAL_GPIO_WritePin(GPIO_LOAD_PORT[payLoadPin - 1], GPIO_LOAD_PIN[payLoadPin - 1], 0);
 8002ed4:	4b29      	ldr	r3, [pc, #164]	@ (8002f7c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8002edc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ee0:	4b26      	ldr	r3, [pc, #152]	@ (8002f7c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	4a29      	ldr	r2, [pc, #164]	@ (8002f8c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8002ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f002 f9a4 	bl	800523e <HAL_GPIO_WritePin>
          onReay--;
 8002ef6:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	4a24      	ldr	r2, [pc, #144]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002efe:	6013      	str	r3, [r2, #0]
          if (onReay <= 0) {
 8002f00:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dc08      	bgt.n	8002f1a <HAL_UARTEx_RxEventCallback+0x14e>
            onReay = 0;
 8002f08:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(ON_OFF_PWM_GPIO_Port, ON_OFF_PWM_Pin, 1);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f14:	481f      	ldr	r0, [pc, #124]	@ (8002f94 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002f16:	f002 f992 	bl	800523e <HAL_GPIO_WritePin>
    for (int i = 0; i < times; i++) {
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	f6ff af6c 	blt.w	8002e04 <HAL_UARTEx_RxEventCallback+0x38>
          }
        }
      }
    }
    if ((strstr((char *)rxBuffer, "+CMQTTCONNLOST") != NULL) && isPBDONE == true) {
 8002f2c:	491b      	ldr	r1, [pc, #108]	@ (8002f9c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8002f2e:	4810      	ldr	r0, [pc, #64]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002f30:	f004 fc12 	bl	8007758 <strstr>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_UARTEx_RxEventCallback+0x180>
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d104      	bne.n	8002f4c <HAL_UARTEx_RxEventCallback+0x180>
      printf("-----------------Client Disconnect passively!------------------\n");
 8002f42:	4817      	ldr	r0, [pc, #92]	@ (8002fa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8002f44:	f004 fad4 	bl	80074f0 <puts>
      check_error_mqtt_via_gsm();
 8002f48:	f7ff fcaa 	bl	80028a0 <check_error_mqtt_via_gsm>
    }
    memset(rxBuffer, '\0', 150);
 8002f4c:	2296      	movs	r2, #150	@ 0x96
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4807      	ldr	r0, [pc, #28]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002f52:	f004 fbf9 	bl	8007748 <memset>
  }
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)rxBuffer, 150);
 8002f56:	2296      	movs	r2, #150	@ 0x96
 8002f58:	4905      	ldr	r1, [pc, #20]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8002f5a:	4812      	ldr	r0, [pc, #72]	@ (8002fa4 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8002f5c:	f003 fae5 	bl	800652a <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	080098c0 	.word	0x080098c0
 8002f70:	200001dc 	.word	0x200001dc
 8002f74:	20000164 	.word	0x20000164
 8002f78:	20000274 	.word	0x20000274
 8002f7c:	200001d8 	.word	0x200001d8
 8002f80:	200001d4 	.word	0x200001d4
 8002f84:	080098d4 	.word	0x080098d4
 8002f88:	20000010 	.word	0x20000010
 8002f8c:	20000020 	.word	0x20000020
 8002f90:	200001d0 	.word	0x200001d0
 8002f94:	40010c00 	.word	0x40010c00
 8002f98:	080098fc 	.word	0x080098fc
 8002f9c:	08009924 	.word	0x08009924
 8002fa0:	08009934 	.word	0x08009934
 8002fa4:	200003d4 	.word	0x200003d4

08002fa8 <create_JSON>:
void create_JSON(void) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
  cJSON *json = cJSON_CreateObject();
 8002fae:	f7ff f8d3 	bl	8002158 <cJSON_CreateObject>
 8002fb2:	6078      	str	r0, [r7, #4]
//    statusOfLoad = HAL_GPIO_ReadPin(GPIO_LOAD_PORT[i - 1], GPIO_LOAD_PIN[i - 1]);
//    static char payload1[2];
//    sprintf(payload1, "%d", i);
//    cJSON_AddNumberToObject(json, payload1, statusOfLoad);
//  }
  cJSON_AddNumberToObject(json, "water_level", int_sensor_pressre);
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <create_JSON+0x88>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd fa8f 	bl	80004dc <__aeabi_i2d>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	491c      	ldr	r1, [pc, #112]	@ (8003034 <create_JSON+0x8c>)
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff f859 	bl	800207c <cJSON_AddNumberToObject>
  cJSON_AddNumberToObject(json, "_gsm_signal_strength", rssi);
 8002fca:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <create_JSON+0x90>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd fa84 	bl	80004dc <__aeabi_i2d>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4918      	ldr	r1, [pc, #96]	@ (800303c <create_JSON+0x94>)
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff f84e 	bl	800207c <cJSON_AddNumberToObject>
  cJSON_AddNumberToObject(json, "_battery_level", Data_Percentage_pin);
 8002fe0:	4b17      	ldr	r3, [pc, #92]	@ (8003040 <create_JSON+0x98>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fa8b 	bl	8000500 <__aeabi_f2d>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4915      	ldr	r1, [pc, #84]	@ (8003044 <create_JSON+0x9c>)
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff f843 	bl	800207c <cJSON_AddNumberToObject>
  char *json_string = cJSON_Print(json);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fd02 	bl	8001a00 <cJSON_Print>
 8002ffc:	6038      	str	r0, [r7, #0]
  if (json_string == NULL) {
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <create_JSON+0x6a>
    printf("New create error JSON\n");
 8003004:	4810      	ldr	r0, [pc, #64]	@ (8003048 <create_JSON+0xa0>)
 8003006:	f004 fa73 	bl	80074f0 <puts>
    cJSON_Delete(json);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe f8e0 	bl	80011d0 <cJSON_Delete>
    return;
 8003010:	e00a      	b.n	8003028 <create_JSON+0x80>
  }
  sprintf(array_json, "%s", json_string);
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	490d      	ldr	r1, [pc, #52]	@ (800304c <create_JSON+0xa4>)
 8003016:	480e      	ldr	r0, [pc, #56]	@ (8003050 <create_JSON+0xa8>)
 8003018:	f004 fa72 	bl	8007500 <siprintf>
  // decompress memory
  free(json_string);
 800301c:	6838      	ldr	r0, [r7, #0]
 800301e:	f004 f851 	bl	80070c4 <free>
  cJSON_Delete(json);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe f8d4 	bl	80011d0 <cJSON_Delete>
}
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000320 	.word	0x20000320
 8003034:	08009974 	.word	0x08009974
 8003038:	20000030 	.word	0x20000030
 800303c:	08009980 	.word	0x08009980
 8003040:	20000318 	.word	0x20000318
 8003044:	08009998 	.word	0x08009998
 8003048:	080099a8 	.word	0x080099a8
 800304c:	080099c0 	.word	0x080099c0
 8003050:	200000cc 	.word	0x200000cc

08003054 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800305c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003060:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800306c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003070:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8003074:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800307c:	e000      	b.n	8003080 <ITM_SendChar+0x2c>
    {
      __NOP();
 800307e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003080:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f9      	beq.n	800307e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800308a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]

  int i;
  for (i = 0; i < len; i++) {
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e009      	b.n	80030c6 <_write+0x26>
    ITM_SendChar(*ptr++);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	60ba      	str	r2, [r7, #8]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ffca 	bl	8003054 <ITM_SendChar>
  for (i = 0; i < len; i++) {
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3301      	adds	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	dbf1      	blt.n	80030b2 <_write+0x12>
  }
  return len;
 80030ce:	687b      	ldr	r3, [r7, #4]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
//    }
//    IWDG->KR = 0xAAAA;
//  }
//  HAL_TIM_Base_Start_IT(&htim6);
  }
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
	...

080030ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030f0:	f000 fdca 	bl	8003c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030f4:	f000 f85e 	bl	80031b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030f8:	f000 f994 	bl	8003424 <MX_GPIO_Init>
  MX_ADC1_Init();
 80030fc:	f000 f8b6 	bl	800326c <MX_ADC1_Init>
  MX_TIM6_Init();
 8003100:	f000 f930 	bl	8003364 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8003104:	f000 f964 	bl	80033d0 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8003108:	f000 f8ee 	bl	80032e8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  printf("-----Welcome to Agriconnect-----\n");
 800310c:	481f      	ldr	r0, [pc, #124]	@ (800318c <main+0xa0>)
 800310e:	f004 f9ef 	bl	80074f0 <puts>
  printf("-----Hello Cricket-----\n");
 8003112:	481f      	ldr	r0, [pc, #124]	@ (8003190 <main+0xa4>)
 8003114:	f004 f9ec 	bl	80074f0 <puts>
  //init_flash();
  //read_flash_payload();
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)rxBuffer, 150);
 8003118:	2296      	movs	r2, #150	@ 0x96
 800311a:	491e      	ldr	r1, [pc, #120]	@ (8003194 <main+0xa8>)
 800311c:	481e      	ldr	r0, [pc, #120]	@ (8003198 <main+0xac>)
 800311e:	f003 fa04 	bl	800652a <HAL_UARTEx_ReceiveToIdle_IT>
  //HAL_TIM_Base_Start_IT(&htim6);
  turnOnA76XX();
 8003122:	f7ff f843 	bl	80021ac <turnOnA76XX>
  isPBDONE = event_wait_function();
 8003126:	f7ff fdfb 	bl	8002d20 <event_wait_function>
 800312a:	4603      	mov	r3, r0
 800312c:	4a1b      	ldr	r2, [pc, #108]	@ (800319c <main+0xb0>)
 800312e:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if (!isConnectMQTT) {
 8003130:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <main+0xb4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d104      	bne.n	8003142 <main+0x56>
	      isConnectMQTT = init_cricket();
 8003138:	f7ff fd5a 	bl	8002bf0 <init_cricket>
 800313c:	4603      	mov	r3, r0
 800313e:	4a18      	ldr	r2, [pc, #96]	@ (80031a0 <main+0xb4>)
 8003140:	6013      	str	r3, [r2, #0]
	    }
	    int_sensor_pressre = read_ss();
 8003142:	f000 fa25 	bl	8003590 <read_ss>
 8003146:	4603      	mov	r3, r0
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd ffdd 	bl	8001108 <__aeabi_f2iz>
 800314e:	4603      	mov	r3, r0
 8003150:	4a14      	ldr	r2, [pc, #80]	@ (80031a4 <main+0xb8>)
 8003152:	6013      	str	r3, [r2, #0]
	    if (update_status_to_server == 0) {
 8003154:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <main+0xbc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <main+0x8a>
	      fn_update_status = update_status();
 800315c:	f7ff fce0 	bl	8002b20 <update_status>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b0f      	ldr	r3, [pc, #60]	@ (80031ac <main+0xc0>)
 800316e:	701a      	strb	r2, [r3, #0]
	      update_status_to_server = 1;
 8003170:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <main+0xbc>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]
	    }
		if (!is_sleep_mode) {
 8003176:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <main+0xc4>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1d8      	bne.n	8003130 <main+0x44>
			is_sleep_mode = Sleep_Stm32_A7672S();
 800317e:	f7ff f847 	bl	8002210 <Sleep_Stm32_A7672S>
 8003182:	4603      	mov	r3, r0
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <main+0xc4>)
 8003188:	701a      	strb	r2, [r3, #0]
	    if (!isConnectMQTT) {
 800318a:	e7d1      	b.n	8003130 <main+0x44>
 800318c:	080099c4 	.word	0x080099c4
 8003190:	080099e8 	.word	0x080099e8
 8003194:	200001dc 	.word	0x200001dc
 8003198:	200003d4 	.word	0x200003d4
 800319c:	200001d4 	.word	0x200001d4
 80031a0:	20000314 	.word	0x20000314
 80031a4:	20000320 	.word	0x20000320
 80031a8:	2000031c 	.word	0x2000031c
 80031ac:	2000032a 	.word	0x2000032a
 80031b0:	2000032b 	.word	0x2000032b

080031b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b096      	sub	sp, #88	@ 0x58
 80031b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031be:	2228      	movs	r2, #40	@ 0x28
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 fac0 	bl	8007748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	611a      	str	r2, [r3, #16]
 80031e6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80031f2:	2300      	movs	r3, #0
 80031f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031f6:	2301      	movs	r3, #1
 80031f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031fa:	2302      	movs	r3, #2
 80031fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003202:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8003204:	2300      	movs	r3, #0
 8003206:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003208:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800320c:	4618      	mov	r0, r3
 800320e:	f002 f84b 	bl	80052a8 <HAL_RCC_OscConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8003218:	f000 f988 	bl	800352c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800321c:	230f      	movs	r3, #15
 800321e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003220:	2302      	movs	r3, #2
 8003222:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8003224:	2390      	movs	r3, #144	@ 0x90
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003228:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800322c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f002 fab7 	bl	80057ac <HAL_RCC_ClockConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003244:	f000 f972 	bl	800352c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003248:	2302      	movs	r3, #2
 800324a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fc38 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800325e:	f000 f965 	bl	800352c <Error_Handler>
  }
}
 8003262:	bf00      	nop
 8003264:	3758      	adds	r7, #88	@ 0x58
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800327c:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <MX_ADC1_Init+0x74>)
 800327e:	4a19      	ldr	r2, [pc, #100]	@ (80032e4 <MX_ADC1_Init+0x78>)
 8003280:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003282:	4b17      	ldr	r3, [pc, #92]	@ (80032e0 <MX_ADC1_Init+0x74>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <MX_ADC1_Init+0x74>)
 800328a:	2200      	movs	r2, #0
 800328c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800328e:	4b14      	ldr	r3, [pc, #80]	@ (80032e0 <MX_ADC1_Init+0x74>)
 8003290:	2200      	movs	r2, #0
 8003292:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003294:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <MX_ADC1_Init+0x74>)
 8003296:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800329a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800329c:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <MX_ADC1_Init+0x74>)
 800329e:	2200      	movs	r2, #0
 80032a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <MX_ADC1_Init+0x74>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032a8:	480d      	ldr	r0, [pc, #52]	@ (80032e0 <MX_ADC1_Init+0x74>)
 80032aa:	f000 fd8f 	bl	8003dcc <HAL_ADC_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80032b4:	f000 f93a 	bl	800352c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032b8:	2301      	movs	r3, #1
 80032ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032bc:	2301      	movs	r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80032c0:	2307      	movs	r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	@ (80032e0 <MX_ADC1_Init+0x74>)
 80032ca:	f001 f829 	bl	8004320 <HAL_ADC_ConfigChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80032d4:	f000 f92a 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	2000032c 	.word	0x2000032c
 80032e4:	40012400 	.word	0x40012400

080032e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80032f8:	4b18      	ldr	r3, [pc, #96]	@ (800335c <MX_ADC2_Init+0x74>)
 80032fa:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <MX_ADC2_Init+0x78>)
 80032fc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032fe:	4b17      	ldr	r3, [pc, #92]	@ (800335c <MX_ADC2_Init+0x74>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003304:	4b15      	ldr	r3, [pc, #84]	@ (800335c <MX_ADC2_Init+0x74>)
 8003306:	2200      	movs	r2, #0
 8003308:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800330a:	4b14      	ldr	r3, [pc, #80]	@ (800335c <MX_ADC2_Init+0x74>)
 800330c:	2200      	movs	r2, #0
 800330e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003310:	4b12      	ldr	r3, [pc, #72]	@ (800335c <MX_ADC2_Init+0x74>)
 8003312:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8003316:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003318:	4b10      	ldr	r3, [pc, #64]	@ (800335c <MX_ADC2_Init+0x74>)
 800331a:	2200      	movs	r2, #0
 800331c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800331e:	4b0f      	ldr	r3, [pc, #60]	@ (800335c <MX_ADC2_Init+0x74>)
 8003320:	2201      	movs	r2, #1
 8003322:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003324:	480d      	ldr	r0, [pc, #52]	@ (800335c <MX_ADC2_Init+0x74>)
 8003326:	f000 fd51 	bl	8003dcc <HAL_ADC_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8003330:	f000 f8fc 	bl	800352c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003334:	2304      	movs	r3, #4
 8003336:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003338:	2301      	movs	r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4805      	ldr	r0, [pc, #20]	@ (800335c <MX_ADC2_Init+0x74>)
 8003346:	f000 ffeb 	bl	8004320 <HAL_ADC_ConfigChannel>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8003350:	f000 f8ec 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	2000035c 	.word	0x2000035c
 8003360:	40012800 	.word	0x40012800

08003364 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800336a:	463b      	mov	r3, r7
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003372:	4b15      	ldr	r3, [pc, #84]	@ (80033c8 <MX_TIM6_Init+0x64>)
 8003374:	4a15      	ldr	r2, [pc, #84]	@ (80033cc <MX_TIM6_Init+0x68>)
 8003376:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8003378:	4b13      	ldr	r3, [pc, #76]	@ (80033c8 <MX_TIM6_Init+0x64>)
 800337a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800337e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003380:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <MX_TIM6_Init+0x64>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8003386:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <MX_TIM6_Init+0x64>)
 8003388:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800338c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800338e:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <MX_TIM6_Init+0x64>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003394:	480c      	ldr	r0, [pc, #48]	@ (80033c8 <MX_TIM6_Init+0x64>)
 8003396:	f002 fd25 	bl	8005de4 <HAL_TIM_Base_Init>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80033a0:	f000 f8c4 	bl	800352c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033ac:	463b      	mov	r3, r7
 80033ae:	4619      	mov	r1, r3
 80033b0:	4805      	ldr	r0, [pc, #20]	@ (80033c8 <MX_TIM6_Init+0x64>)
 80033b2:	f002 ff61 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80033bc:	f000 f8b6 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	2000038c 	.word	0x2000038c
 80033cc:	40001000 	.word	0x40001000

080033d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033d4:	4b11      	ldr	r3, [pc, #68]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 80033d6:	4a12      	ldr	r2, [pc, #72]	@ (8003420 <MX_USART1_UART_Init+0x50>)
 80033d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 80033dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033e2:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033ee:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 80033f6:	220c      	movs	r2, #12
 80033f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fa:	4b08      	ldr	r3, [pc, #32]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003406:	4805      	ldr	r0, [pc, #20]	@ (800341c <MX_USART1_UART_Init+0x4c>)
 8003408:	f002 ffb4 	bl	8006374 <HAL_UART_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003412:	f000 f88b 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200003d4 	.word	0x200003d4
 8003420:	40013800 	.word	0x40013800

08003424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003438:	4b38      	ldr	r3, [pc, #224]	@ (800351c <MX_GPIO_Init+0xf8>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	4a37      	ldr	r2, [pc, #220]	@ (800351c <MX_GPIO_Init+0xf8>)
 800343e:	f043 0320 	orr.w	r3, r3, #32
 8003442:	6193      	str	r3, [r2, #24]
 8003444:	4b35      	ldr	r3, [pc, #212]	@ (800351c <MX_GPIO_Init+0xf8>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003450:	4b32      	ldr	r3, [pc, #200]	@ (800351c <MX_GPIO_Init+0xf8>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4a31      	ldr	r2, [pc, #196]	@ (800351c <MX_GPIO_Init+0xf8>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6193      	str	r3, [r2, #24]
 800345c:	4b2f      	ldr	r3, [pc, #188]	@ (800351c <MX_GPIO_Init+0xf8>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003468:	4b2c      	ldr	r3, [pc, #176]	@ (800351c <MX_GPIO_Init+0xf8>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4a2b      	ldr	r2, [pc, #172]	@ (800351c <MX_GPIO_Init+0xf8>)
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	6193      	str	r3, [r2, #24]
 8003474:	4b29      	ldr	r3, [pc, #164]	@ (800351c <MX_GPIO_Init+0xf8>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003480:	4b26      	ldr	r3, [pc, #152]	@ (800351c <MX_GPIO_Init+0xf8>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	4a25      	ldr	r2, [pc, #148]	@ (800351c <MX_GPIO_Init+0xf8>)
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	6193      	str	r3, [r2, #24]
 800348c:	4b23      	ldr	r3, [pc, #140]	@ (800351c <MX_GPIO_Init+0xf8>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAYLOAD_4_Pin|PAYLOAD_3_Pin, GPIO_PIN_RESET);
 8003498:	2200      	movs	r2, #0
 800349a:	2130      	movs	r1, #48	@ 0x30
 800349c:	4820      	ldr	r0, [pc, #128]	@ (8003520 <MX_GPIO_Init+0xfc>)
 800349e:	f001 fece 	bl	800523e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAYLOAD_2_Pin|PAYLOAD_1_Pin|LED_STATUS_Pin|ON_OFF_PWM_Pin, GPIO_PIN_RESET);
 80034a2:	2200      	movs	r2, #0
 80034a4:	f243 0103 	movw	r1, #12291	@ 0x3003
 80034a8:	481e      	ldr	r0, [pc, #120]	@ (8003524 <MX_GPIO_Init+0x100>)
 80034aa:	f001 fec8 	bl	800523e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, GPIO_PIN_RESET);
 80034ae:	2200      	movs	r2, #0
 80034b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80034b4:	481c      	ldr	r0, [pc, #112]	@ (8003528 <MX_GPIO_Init+0x104>)
 80034b6:	f001 fec2 	bl	800523e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAYLOAD_4_Pin PAYLOAD_3_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_4_Pin|PAYLOAD_3_Pin;
 80034ba:	2330      	movs	r3, #48	@ 0x30
 80034bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034be:	2301      	movs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ca:	f107 0310 	add.w	r3, r7, #16
 80034ce:	4619      	mov	r1, r3
 80034d0:	4813      	ldr	r0, [pc, #76]	@ (8003520 <MX_GPIO_Init+0xfc>)
 80034d2:	f001 fd09 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_2_Pin PAYLOAD_1_Pin LED_STATUS_Pin ON_OFF_PWM_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_2_Pin|PAYLOAD_1_Pin|LED_STATUS_Pin|ON_OFF_PWM_Pin;
 80034d6:	f243 0303 	movw	r3, #12291	@ 0x3003
 80034da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034dc:	2301      	movs	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2302      	movs	r3, #2
 80034e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	4619      	mov	r1, r3
 80034ee:	480d      	ldr	r0, [pc, #52]	@ (8003524 <MX_GPIO_Init+0x100>)
 80034f0:	f001 fcfa 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A76XX_PWRKEY_Pin */
  GPIO_InitStruct.Pin = A76XX_PWRKEY_Pin;
 80034f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fa:	2301      	movs	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2302      	movs	r3, #2
 8003504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A76XX_PWRKEY_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 0310 	add.w	r3, r7, #16
 800350a:	4619      	mov	r1, r3
 800350c:	4806      	ldr	r0, [pc, #24]	@ (8003528 <MX_GPIO_Init+0x104>)
 800350e:	f001 fceb 	bl	8004ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003512:	bf00      	nop
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	40011000 	.word	0x40011000
 8003524:	40010c00 	.word	0x40010c00
 8003528:	40010800 	.word	0x40010800

0800352c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003530:	b672      	cpsid	i
}
 8003532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <Error_Handler+0x8>

08003538 <map_ss>:

// Khai báo prototype của hàm kalman_filter
float kalman_filter(unsigned long ADC_Value);

float map_ss(float x, float In_Max, float In_Min, float Out_Max, float Out_Min)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
    return (((x - In_Min) * (Out_Max - Out_Min) / (In_Max - In_Min)) + Out_Min);
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7fd fb0d 	bl	8000b68 <__aeabi_fsub>
 800354e:	4603      	mov	r3, r0
 8003550:	461c      	mov	r4, r3
 8003552:	6a39      	ldr	r1, [r7, #32]
 8003554:	6838      	ldr	r0, [r7, #0]
 8003556:	f7fd fb07 	bl	8000b68 <__aeabi_fsub>
 800355a:	4603      	mov	r3, r0
 800355c:	4619      	mov	r1, r3
 800355e:	4620      	mov	r0, r4
 8003560:	f7fd fc0c 	bl	8000d7c <__aeabi_fmul>
 8003564:	4603      	mov	r3, r0
 8003566:	461c      	mov	r4, r3
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	f7fd fafc 	bl	8000b68 <__aeabi_fsub>
 8003570:	4603      	mov	r3, r0
 8003572:	4619      	mov	r1, r3
 8003574:	4620      	mov	r0, r4
 8003576:	f7fd fcb5 	bl	8000ee4 <__aeabi_fdiv>
 800357a:	4603      	mov	r3, r0
 800357c:	6a39      	ldr	r1, [r7, #32]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd faf4 	bl	8000b6c <__addsf3>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bd90      	pop	{r4, r7, pc}
	...

08003590 <read_ss>:

float read_ss(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
    HAL_ADC_Start(&hadc1);
 8003596:	483d      	ldr	r0, [pc, #244]	@ (800368c <read_ss+0xfc>)
 8003598:	f000 fd02 	bl	8003fa0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 800359c:	2164      	movs	r1, #100	@ 0x64
 800359e:	483b      	ldr	r0, [pc, #236]	@ (800368c <read_ss+0xfc>)
 80035a0:	f000 fdac 	bl	80040fc <HAL_ADC_PollForConversion>
//    val_adc = HAL_ADC_GetValue(&hadc1);
//    HAL_ADC_Stop(&hadc1);
    HAL_Delay(200);
 80035a4:	20c8      	movs	r0, #200	@ 0xc8
 80035a6:	f000 fbd1 	bl	8003d4c <HAL_Delay>

    for (int i = 0; i < 1000; i++) {
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e010      	b.n	80035d2 <read_ss+0x42>
        val_adc = HAL_ADC_GetValue(&hadc1);
 80035b0:	4836      	ldr	r0, [pc, #216]	@ (800368c <read_ss+0xfc>)
 80035b2:	f000 fea9 	bl	8004308 <HAL_ADC_GetValue>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b35      	ldr	r3, [pc, #212]	@ (8003690 <read_ss+0x100>)
 80035bc:	601a      	str	r2, [r3, #0]
        array_ADC[i] = val_adc;
 80035be:	4b34      	ldr	r3, [pc, #208]	@ (8003690 <read_ss+0x100>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	b299      	uxth	r1, r3
 80035c4:	4a33      	ldr	r2, [pc, #204]	@ (8003694 <read_ss+0x104>)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 1000; i++) {
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035d8:	dbea      	blt.n	80035b0 <read_ss+0x20>
    }

    for (int i = 0; i < 999; i++) {
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	e02a      	b.n	8003636 <read_ss+0xa6>
        for (int j = i + 1; j < 1000; j++) {
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	3301      	adds	r3, #1
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	e01f      	b.n	8003628 <read_ss+0x98>
            if (array_ADC[i] < array_ADC[j]) {
 80035e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003694 <read_ss+0x104>)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80035f0:	4928      	ldr	r1, [pc, #160]	@ (8003694 <read_ss+0x104>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d212      	bcs.n	8003622 <read_ss+0x92>
                int temp = array_ADC[i];
 80035fc:	4a25      	ldr	r2, [pc, #148]	@ (8003694 <read_ss+0x104>)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003604:	603b      	str	r3, [r7, #0]
                array_ADC[i] = array_ADC[j];
 8003606:	4a23      	ldr	r2, [pc, #140]	@ (8003694 <read_ss+0x104>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800360e:	4a21      	ldr	r2, [pc, #132]	@ (8003694 <read_ss+0x104>)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                array_ADC[j] = temp;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b299      	uxth	r1, r3
 800361a:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <read_ss+0x104>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = i + 1; j < 1000; j++) {
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3301      	adds	r3, #1
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800362e:	dbdb      	blt.n	80035e8 <read_ss+0x58>
    for (int i = 0; i < 999; i++) {
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	3301      	adds	r3, #1
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f240 32e6 	movw	r2, #998	@ 0x3e6
 800363c:	4293      	cmp	r3, r2
 800363e:	ddcf      	ble.n	80035e0 <read_ss+0x50>
            }
        }
    }

    filter_adc = array_ADC[1000 / 2];
 8003640:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <read_ss+0x104>)
 8003642:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	@ 0x3e8
 8003646:	461a      	mov	r2, r3
 8003648:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <read_ss+0x108>)
 800364a:	601a      	str	r2, [r3, #0]
    kalman_adc = kalman_filter(filter_adc);
 800364c:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <read_ss+0x108>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f82d 	bl	80036b0 <kalman_filter>
 8003656:	4603      	mov	r3, r0
 8003658:	4a10      	ldr	r2, [pc, #64]	@ (800369c <read_ss+0x10c>)
 800365a:	6013      	str	r3, [r2, #0]
  distance = map_ss(kalman_adc, 204, 4095, 0.0, 180.0);
 800365c:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <read_ss+0x10c>)
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <read_ss+0x110>)
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	4a0e      	ldr	r2, [pc, #56]	@ (80036a4 <read_ss+0x114>)
 800366a:	490f      	ldr	r1, [pc, #60]	@ (80036a8 <read_ss+0x118>)
 800366c:	f7ff ff64 	bl	8003538 <map_ss>
 8003670:	4603      	mov	r3, r0
 8003672:	4a0e      	ldr	r2, [pc, #56]	@ (80036ac <read_ss+0x11c>)
 8003674:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 8003676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800367a:	f000 fb67 	bl	8003d4c <HAL_Delay>
  return distance;
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <read_ss+0x11c>)
 8003680:	681b      	ldr	r3, [r3, #0]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000032c 	.word	0x2000032c
 8003690:	2000041c 	.word	0x2000041c
 8003694:	20000424 	.word	0x20000424
 8003698:	20000bf4 	.word	0x20000bf4
 800369c:	20000bf8 	.word	0x20000bf8
 80036a0:	43340000 	.word	0x43340000
 80036a4:	457ff000 	.word	0x457ff000
 80036a8:	434c0000 	.word	0x434c0000
 80036ac:	20000420 	.word	0x20000420

080036b0 <kalman_filter>:

float kalman_filter(unsigned long ADC_Value)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
    static float x_k1_k1, x_k_k1;
    static float P_k1_k1;
    static float kalman_adc_old = 0;

    const float Q = 0.008;	// độ nhạy của giá trị trả về
 80036b8:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <kalman_filter+0xa8>)
 80036ba:	61fb      	str	r3, [r7, #28]
    const float R = 0.05;	// độ tin tưởng của giá trị đo được
 80036bc:	4b27      	ldr	r3, [pc, #156]	@ (800375c <kalman_filter+0xac>)
 80036be:	61bb      	str	r3, [r7, #24]
    float Z_k = ADC_Value;
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fd fb03 	bl	8000ccc <__aeabi_ui2f>
 80036c6:	4603      	mov	r3, r0
 80036c8:	617b      	str	r3, [r7, #20]
    float P_k_k1;
    float Kg;

    x_k1_k1 = kalman_adc_old;
 80036ca:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <kalman_filter+0xb0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a25      	ldr	r2, [pc, #148]	@ (8003764 <kalman_filter+0xb4>)
 80036d0:	6013      	str	r3, [r2, #0]
    x_k_k1 = x_k1_k1;
 80036d2:	4b24      	ldr	r3, [pc, #144]	@ (8003764 <kalman_filter+0xb4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a24      	ldr	r2, [pc, #144]	@ (8003768 <kalman_filter+0xb8>)
 80036d8:	6013      	str	r3, [r2, #0]
    P_k_k1 = P_k1_k1 + Q;
 80036da:	4b24      	ldr	r3, [pc, #144]	@ (800376c <kalman_filter+0xbc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4619      	mov	r1, r3
 80036e0:	69f8      	ldr	r0, [r7, #28]
 80036e2:	f7fd fa43 	bl	8000b6c <__addsf3>
 80036e6:	4603      	mov	r3, r0
 80036e8:	613b      	str	r3, [r7, #16]

    Kg = P_k_k1 / (P_k_k1 + R);
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	6938      	ldr	r0, [r7, #16]
 80036ee:	f7fd fa3d 	bl	8000b6c <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4619      	mov	r1, r3
 80036f6:	6938      	ldr	r0, [r7, #16]
 80036f8:	f7fd fbf4 	bl	8000ee4 <__aeabi_fdiv>
 80036fc:	4603      	mov	r3, r0
 80036fe:	60fb      	str	r3, [r7, #12]

    kalman_adc_old = x_k_k1 + Kg * (Z_k - x_k_k1);
 8003700:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <kalman_filter+0xb8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4619      	mov	r1, r3
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f7fd fa2e 	bl	8000b68 <__aeabi_fsub>
 800370c:	4603      	mov	r3, r0
 800370e:	68f9      	ldr	r1, [r7, #12]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fb33 	bl	8000d7c <__aeabi_fmul>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <kalman_filter+0xb8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f7fd fa23 	bl	8000b6c <__addsf3>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <kalman_filter+0xb0>)
 800372c:	601a      	str	r2, [r3, #0]
    P_k1_k1 = (1 - Kg) * P_k_k1;
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003734:	f7fd fa18 	bl	8000b68 <__aeabi_fsub>
 8003738:	4603      	mov	r3, r0
 800373a:	6939      	ldr	r1, [r7, #16]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd fb1d 	bl	8000d7c <__aeabi_fmul>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <kalman_filter+0xbc>)
 8003748:	601a      	str	r2, [r3, #0]

    return kalman_adc_old;
 800374a:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <kalman_filter+0xb0>)
 800374c:	681b      	ldr	r3, [r3, #0]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	3c03126f 	.word	0x3c03126f
 800375c:	3d4ccccd 	.word	0x3d4ccccd
 8003760:	20000bfc 	.word	0x20000bfc
 8003764:	20000c00 	.word	0x20000c00
 8003768:	20000c04 	.word	0x20000c04
 800376c:	20000c08 	.word	0x20000c08

08003770 <Flash_Erase>:
uint32_t value_page1;
uint32_t value_page2;
uint32_t value_page3;
uint32_t value_Relay;
uint32_t status_load[4];
void Flash_Erase(uint32_t numberpages) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_FLASH_Unlock();
 8003778:	f001 fa26 	bl	8004bc8 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef pEraseInit;
  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800377c:	2300      	movs	r3, #0
 800377e:	613b      	str	r3, [r7, #16]
  pEraseInit.PageAddress = Address;
 8003780:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <Flash_Erase+0x38>)
 8003782:	61bb      	str	r3, [r7, #24]
  pEraseInit.NbPages = numberpages;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	61fb      	str	r3, [r7, #28]
  uint32_t PageError = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 800378c:	f107 020c 	add.w	r2, r7, #12
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fafe 	bl	8004d98 <HAL_FLASHEx_Erase>
  HAL_FLASH_Lock();
 800379c:	f001 fa3a 	bl	8004c14 <HAL_FLASH_Lock>
}
 80037a0:	bf00      	nop
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	0807d000 	.word	0x0807d000

080037ac <Flash_write>:

uint32_t Read_Page(uint32_t Address_ex) {
  value_page0 = *(uint32_t *)(Address_ex);
  return value_page0;
}
void Flash_write(int move, uint32_t Data) {
 80037ac:	b5b0      	push	{r4, r5, r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  HAL_FLASH_Unlock();
 80037b6:	f001 fa07 	bl	8004bc8 <HAL_FLASH_Unlock>
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + move, Data);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80037c0:	f503 23fa 	add.w	r3, r3, #512000	@ 0x7d000
 80037c4:	4619      	mov	r1, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2200      	movs	r2, #0
 80037ca:	461c      	mov	r4, r3
 80037cc:	4615      	mov	r5, r2
 80037ce:	4622      	mov	r2, r4
 80037d0:	462b      	mov	r3, r5
 80037d2:	2002      	movs	r0, #2
 80037d4:	f001 f988 	bl	8004ae8 <HAL_FLASH_Program>

  HAL_FLASH_Lock();
 80037d8:	f001 fa1c 	bl	8004c14 <HAL_FLASH_Lock>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bdb0      	pop	{r4, r5, r7, pc}

080037e4 <write_status_load>:

void write_status_load() {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  Flash_Erase(1);
 80037ea:	2001      	movs	r0, #1
 80037ec:	f7ff ffc0 	bl	8003770 <Flash_Erase>
  for (int i = 0; i <NUMBER_LOADS; i++) {
 80037f0:	2300      	movs	r3, #0
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	e02a      	b.n	800384c <write_status_load+0x68>
    Read = HAL_GPIO_ReadPin(GPIO_LOAD_PORT[i], GPIO_LOAD_PIN[i]);
 80037f6:	4a1d      	ldr	r2, [pc, #116]	@ (800386c <write_status_load+0x88>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80037fe:	491c      	ldr	r1, [pc, #112]	@ (8003870 <write_status_load+0x8c>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003806:	b29b      	uxth	r3, r3
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f001 fd00 	bl	8005210 <HAL_GPIO_ReadPin>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	4b17      	ldr	r3, [pc, #92]	@ (8003874 <write_status_load+0x90>)
 8003816:	601a      	str	r2, [r3, #0]
    status_load[val] = Read;
 8003818:	4b16      	ldr	r3, [pc, #88]	@ (8003874 <write_status_load+0x90>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b16      	ldr	r3, [pc, #88]	@ (8003878 <write_status_load+0x94>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4611      	mov	r1, r2
 8003822:	4a16      	ldr	r2, [pc, #88]	@ (800387c <write_status_load+0x98>)
 8003824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    val++;
 8003828:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <write_status_load+0x94>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <write_status_load+0x94>)
 8003830:	6013      	str	r3, [r2, #0]
    Flash_write(i * 16, status_load[i]);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	011a      	lsls	r2, r3, #4
 8003836:	4911      	ldr	r1, [pc, #68]	@ (800387c <write_status_load+0x98>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7ff ffb3 	bl	80037ac <Flash_write>
  for (int i = 0; i <NUMBER_LOADS; i++) {
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3301      	adds	r3, #1
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b03      	cmp	r3, #3
 8003850:	ddd1      	ble.n	80037f6 <write_status_load+0x12>
  }
  Flash_write(64, onReay);
 8003852:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <write_status_load+0x9c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	2040      	movs	r0, #64	@ 0x40
 800385a:	f7ff ffa7 	bl	80037ac <Flash_write>
  val = 0;
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <write_status_load+0x94>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000010 	.word	0x20000010
 8003870:	20000020 	.word	0x20000020
 8003874:	20000c10 	.word	0x20000c10
 8003878:	20000c0c 	.word	0x20000c0c
 800387c:	20000c14 	.word	0x20000c14
 8003880:	200001d0 	.word	0x200001d0

08003884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800388a:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <HAL_MspInit+0x5c>)
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	4a14      	ldr	r2, [pc, #80]	@ (80038e0 <HAL_MspInit+0x5c>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6193      	str	r3, [r2, #24]
 8003896:	4b12      	ldr	r3, [pc, #72]	@ (80038e0 <HAL_MspInit+0x5c>)
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b0f      	ldr	r3, [pc, #60]	@ (80038e0 <HAL_MspInit+0x5c>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a0e      	ldr	r2, [pc, #56]	@ (80038e0 <HAL_MspInit+0x5c>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	61d3      	str	r3, [r2, #28]
 80038ae:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <HAL_MspInit+0x5c>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80038ba:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <HAL_MspInit+0x60>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <HAL_MspInit+0x60>)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010000 	.word	0x40010000

080038e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	f107 0318 	add.w	r3, r7, #24
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a28      	ldr	r2, [pc, #160]	@ (80039a4 <HAL_ADC_MspInit+0xbc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d122      	bne.n	800394e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003908:	4b27      	ldr	r3, [pc, #156]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	4a26      	ldr	r2, [pc, #152]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 800390e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003912:	6193      	str	r3, [r2, #24]
 8003914:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003920:	4b21      	ldr	r3, [pc, #132]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	4a20      	ldr	r2, [pc, #128]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6193      	str	r3, [r2, #24]
 800392c:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003938:	2302      	movs	r3, #2
 800393a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800393c:	2303      	movs	r3, #3
 800393e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003940:	f107 0318 	add.w	r3, r7, #24
 8003944:	4619      	mov	r1, r3
 8003946:	4819      	ldr	r0, [pc, #100]	@ (80039ac <HAL_ADC_MspInit+0xc4>)
 8003948:	f001 face 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800394c:	e026      	b.n	800399c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a17      	ldr	r2, [pc, #92]	@ (80039b0 <HAL_ADC_MspInit+0xc8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d121      	bne.n	800399c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003958:	4b13      	ldr	r3, [pc, #76]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	4a12      	ldr	r2, [pc, #72]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 800395e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003962:	6193      	str	r3, [r2, #24]
 8003964:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003970:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	4a0c      	ldr	r2, [pc, #48]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	6193      	str	r3, [r2, #24]
 800397c:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_ADC_MspInit+0xc0>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003988:	2310      	movs	r3, #16
 800398a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800398c:	2303      	movs	r3, #3
 800398e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003990:	f107 0318 	add.w	r3, r7, #24
 8003994:	4619      	mov	r1, r3
 8003996:	4805      	ldr	r0, [pc, #20]	@ (80039ac <HAL_ADC_MspInit+0xc4>)
 8003998:	f001 faa6 	bl	8004ee8 <HAL_GPIO_Init>
}
 800399c:	bf00      	nop
 800399e:	3728      	adds	r7, #40	@ 0x28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40012400 	.word	0x40012400
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40010800 	.word	0x40010800
 80039b0:	40012800 	.word	0x40012800

080039b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0d      	ldr	r2, [pc, #52]	@ (80039f8 <HAL_TIM_Base_MspInit+0x44>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d113      	bne.n	80039ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <HAL_TIM_Base_MspInit+0x48>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	4a0c      	ldr	r2, [pc, #48]	@ (80039fc <HAL_TIM_Base_MspInit+0x48>)
 80039cc:	f043 0310 	orr.w	r3, r3, #16
 80039d0:	61d3      	str	r3, [r2, #28]
 80039d2:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <HAL_TIM_Base_MspInit+0x48>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	2036      	movs	r0, #54	@ 0x36
 80039e4:	f000 ff07 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80039e8:	2036      	movs	r0, #54	@ 0x36
 80039ea:	f000 ff20 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40001000 	.word	0x40001000
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	f107 0310 	add.w	r3, r7, #16
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a20      	ldr	r2, [pc, #128]	@ (8003a9c <HAL_UART_MspInit+0x9c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d139      	bne.n	8003a94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a20:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa0 <HAL_UART_MspInit+0xa0>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa0 <HAL_UART_MspInit+0xa0>)
 8003a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a2a:	6193      	str	r3, [r2, #24]
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa0 <HAL_UART_MspInit+0xa0>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <HAL_UART_MspInit+0xa0>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	@ (8003aa0 <HAL_UART_MspInit+0xa0>)
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	6193      	str	r3, [r2, #24]
 8003a44:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <HAL_UART_MspInit+0xa0>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a56:	2302      	movs	r3, #2
 8003a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5e:	f107 0310 	add.w	r3, r7, #16
 8003a62:	4619      	mov	r1, r3
 8003a64:	480f      	ldr	r0, [pc, #60]	@ (8003aa4 <HAL_UART_MspInit+0xa4>)
 8003a66:	f001 fa3f 	bl	8004ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a78:	f107 0310 	add.w	r3, r7, #16
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4809      	ldr	r0, [pc, #36]	@ (8003aa4 <HAL_UART_MspInit+0xa4>)
 8003a80:	f001 fa32 	bl	8004ee8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003a84:	2200      	movs	r2, #0
 8003a86:	2101      	movs	r1, #1
 8003a88:	2025      	movs	r0, #37	@ 0x25
 8003a8a:	f000 feb4 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a8e:	2025      	movs	r0, #37	@ 0x25
 8003a90:	f000 fecd 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a94:	bf00      	nop
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40010800 	.word	0x40010800

08003aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <NMI_Handler+0x4>

08003ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <HardFault_Handler+0x4>

08003ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <MemManage_Handler+0x4>

08003ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <BusFault_Handler+0x4>

08003ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003acc:	bf00      	nop
 8003ace:	e7fd      	b.n	8003acc <UsageFault_Handler+0x4>

08003ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003af8:	f000 f90c 	bl	8003d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b04:	4802      	ldr	r0, [pc, #8]	@ (8003b10 <USART1_IRQHandler+0x10>)
 8003b06:	f002 fd6d 	bl	80065e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	200003d4 	.word	0x200003d4

08003b14 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b18:	4802      	ldr	r0, [pc, #8]	@ (8003b24 <TIM6_IRQHandler+0x10>)
 8003b1a:	f002 fa13 	bl	8005f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000038c 	.word	0x2000038c

08003b28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e00a      	b.n	8003b50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b3a:	f3af 8000 	nop.w
 8003b3e:	4601      	mov	r1, r0
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	60ba      	str	r2, [r7, #8]
 8003b46:	b2ca      	uxtb	r2, r1
 8003b48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	dbf0      	blt.n	8003b3a <_read+0x12>
  }

  return len;
 8003b58:	687b      	ldr	r3, [r7, #4]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b88:	605a      	str	r2, [r3, #4]
  return 0;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <_isatty>:

int _isatty(int file)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b9e:	2301      	movs	r3, #1
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
	...

08003bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bcc:	4a14      	ldr	r2, [pc, #80]	@ (8003c20 <_sbrk+0x5c>)
 8003bce:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <_sbrk+0x60>)
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bd8:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <_sbrk+0x64>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be0:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <_sbrk+0x64>)
 8003be2:	4a12      	ldr	r2, [pc, #72]	@ (8003c2c <_sbrk+0x68>)
 8003be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003be6:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <_sbrk+0x64>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d207      	bcs.n	8003c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bf4:	f003 fe1c 	bl	8007830 <__errno>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	220c      	movs	r2, #12
 8003bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c02:	e009      	b.n	8003c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c04:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <_sbrk+0x64>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c0a:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <_sbrk+0x64>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	4a05      	ldr	r2, [pc, #20]	@ (8003c28 <_sbrk+0x64>)
 8003c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20010000 	.word	0x20010000
 8003c24:	00000400 	.word	0x00000400
 8003c28:	20000c24 	.word	0x20000c24
 8003c2c:	20000da0 	.word	0x20000da0

08003c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c3c:	f7ff fff8 	bl	8003c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c40:	480b      	ldr	r0, [pc, #44]	@ (8003c70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003c42:	490c      	ldr	r1, [pc, #48]	@ (8003c74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003c44:	4a0c      	ldr	r2, [pc, #48]	@ (8003c78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c48:	e002      	b.n	8003c50 <LoopCopyDataInit>

08003c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4e:	3304      	adds	r3, #4

08003c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c54:	d3f9      	bcc.n	8003c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c56:	4a09      	ldr	r2, [pc, #36]	@ (8003c7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003c58:	4c09      	ldr	r4, [pc, #36]	@ (8003c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c5c:	e001      	b.n	8003c62 <LoopFillZerobss>

08003c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c60:	3204      	adds	r2, #4

08003c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c64:	d3fb      	bcc.n	8003c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c66:	f003 fde9 	bl	800783c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c6a:	f7ff fa3f 	bl	80030ec <main>
  bx lr
 8003c6e:	4770      	bx	lr
  ldr r0, =_sdata
 8003c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c74:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003c78:	08009bb0 	.word	0x08009bb0
  ldr r2, =_sbss
 8003c7c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003c80:	20000d9c 	.word	0x20000d9c

08003c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c84:	e7fe      	b.n	8003c84 <ADC1_2_IRQHandler>
	...

08003c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c8c:	4b08      	ldr	r3, [pc, #32]	@ (8003cb0 <HAL_Init+0x28>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a07      	ldr	r2, [pc, #28]	@ (8003cb0 <HAL_Init+0x28>)
 8003c92:	f043 0310 	orr.w	r3, r3, #16
 8003c96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c98:	2003      	movs	r0, #3
 8003c9a:	f000 fda1 	bl	80047e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c9e:	200f      	movs	r0, #15
 8003ca0:	f000 f808 	bl	8003cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca4:	f7ff fdee 	bl	8003884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40022000 	.word	0x40022000

08003cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cbc:	4b12      	ldr	r3, [pc, #72]	@ (8003d08 <HAL_InitTick+0x54>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_InitTick+0x58>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fdb9 	bl	800484a <HAL_SYSTICK_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00e      	b.n	8003d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b0f      	cmp	r3, #15
 8003ce6:	d80a      	bhi.n	8003cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cf0:	f000 fd81 	bl	80047f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cf4:	4a06      	ldr	r2, [pc, #24]	@ (8003d10 <HAL_InitTick+0x5c>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e000      	b.n	8003d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000034 	.word	0x20000034
 8003d0c:	2000003c 	.word	0x2000003c
 8003d10:	20000038 	.word	0x20000038

08003d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_IncTick+0x1c>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_IncTick+0x20>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	4a03      	ldr	r2, [pc, #12]	@ (8003d34 <HAL_IncTick+0x20>)
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	2000003c 	.word	0x2000003c
 8003d34:	20000c28 	.word	0x20000c28

08003d38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d3c:	4b02      	ldr	r3, [pc, #8]	@ (8003d48 <HAL_GetTick+0x10>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	20000c28 	.word	0x20000c28

08003d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d54:	f7ff fff0 	bl	8003d38 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d64:	d005      	beq.n	8003d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_Delay+0x44>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d72:	bf00      	nop
 8003d74:	f7ff ffe0 	bl	8003d38 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d8f7      	bhi.n	8003d74 <HAL_Delay+0x28>
  {
  }
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000003c 	.word	0x2000003c

08003d94 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <HAL_SuspendTick+0x18>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a03      	ldr	r2, [pc, #12]	@ (8003dac <HAL_SuspendTick+0x18>)
 8003d9e:	f023 0302 	bic.w	r3, r3, #2
 8003da2:	6013      	str	r3, [r2, #0]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	e000e010 	.word	0xe000e010

08003db0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <HAL_ResumeTick+0x18>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a03      	ldr	r2, [pc, #12]	@ (8003dc8 <HAL_ResumeTick+0x18>)
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	e000e010 	.word	0xe000e010

08003dcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0ce      	b.n	8003f8c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fd6c 	bl	80038e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fbd7 	bl	80045c4 <ADC_ConversionStop_Disable>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 80a9 	bne.w	8003f7a <HAL_ADC_Init+0x1ae>
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 80a5 	bne.w	8003f7a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e38:	f023 0302 	bic.w	r3, r3, #2
 8003e3c:	f043 0202 	orr.w	r2, r3, #2
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4951      	ldr	r1, [pc, #324]	@ (8003f94 <HAL_ADC_Init+0x1c8>)
 8003e4e:	428b      	cmp	r3, r1
 8003e50:	d10a      	bne.n	8003e68 <HAL_ADC_Init+0x9c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e5a:	d002      	beq.n	8003e62 <HAL_ADC_Init+0x96>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	e004      	b.n	8003e6c <HAL_ADC_Init+0xa0>
 8003e62:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003e66:	e001      	b.n	8003e6c <HAL_ADC_Init+0xa0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7b1b      	ldrb	r3, [r3, #12]
 8003e72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e84:	d003      	beq.n	8003e8e <HAL_ADC_Init+0xc2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <HAL_ADC_Init+0xc8>
 8003e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e92:	e000      	b.n	8003e96 <HAL_ADC_Init+0xca>
 8003e94:	2300      	movs	r3, #0
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7d1b      	ldrb	r3, [r3, #20]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d119      	bne.n	8003ed8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7b1b      	ldrb	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	035a      	lsls	r2, r3, #13
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed0:	f043 0201 	orr.w	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	4b29      	ldr	r3, [pc, #164]	@ (8003f98 <HAL_ADC_Init+0x1cc>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f08:	d003      	beq.n	8003f12 <HAL_ADC_Init+0x146>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d104      	bne.n	8003f1c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	051b      	lsls	r3, r3, #20
 8003f1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	4b19      	ldr	r3, [pc, #100]	@ (8003f9c <HAL_ADC_Init+0x1d0>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d10b      	bne.n	8003f58 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f56:	e018      	b.n	8003f8a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	f023 0312 	bic.w	r3, r3, #18
 8003f60:	f043 0210 	orr.w	r2, r3, #16
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f78:	e007      	b.n	8003f8a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	f043 0210 	orr.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40013c00 	.word	0x40013c00
 8003f98:	ffe1f7fd 	.word	0xffe1f7fd
 8003f9c:	ff1f0efe 	.word	0xff1f0efe

08003fa0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_ADC_Start+0x1a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e098      	b.n	80040ec <HAL_ADC_Start+0x14c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 faa4 	bl	8004510 <ADC_Enable>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 8087 	bne.w	80040e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a41      	ldr	r2, [pc, #260]	@ (80040f4 <HAL_ADC_Start+0x154>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d105      	bne.n	8003ffe <HAL_ADC_Start+0x5e>
 8003ff2:	4b41      	ldr	r3, [pc, #260]	@ (80040f8 <HAL_ADC_Start+0x158>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d115      	bne.n	800402a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004014:	2b00      	cmp	r3, #0
 8004016:	d026      	beq.n	8004066 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004020:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004028:	e01d      	b.n	8004066 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2f      	ldr	r2, [pc, #188]	@ (80040f8 <HAL_ADC_Start+0x158>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_ADC_Start+0xaa>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a2b      	ldr	r2, [pc, #172]	@ (80040f4 <HAL_ADC_Start+0x154>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10d      	bne.n	8004066 <HAL_ADC_Start+0xc6>
 800404a:	4b2b      	ldr	r3, [pc, #172]	@ (80040f8 <HAL_ADC_Start+0x158>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800405e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d006      	beq.n	8004080 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	f023 0206 	bic.w	r2, r3, #6
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800407e:	e002      	b.n	8004086 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0202 	mvn.w	r2, #2
 8004096:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80040a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80040a6:	d113      	bne.n	80040d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80040ac:	4a11      	ldr	r2, [pc, #68]	@ (80040f4 <HAL_ADC_Start+0x154>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d105      	bne.n	80040be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80040b2:	4b11      	ldr	r3, [pc, #68]	@ (80040f8 <HAL_ADC_Start+0x158>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	e00c      	b.n	80040ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	e003      	b.n	80040ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40012800 	.word	0x40012800
 80040f8:	40012400 	.word	0x40012400

080040fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040fc:	b590      	push	{r4, r7, lr}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004112:	f7ff fe11 	bl	8003d38 <HAL_GetTick>
 8004116:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0d3      	b.n	80042e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d131      	bne.n	80041b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004156:	2b00      	cmp	r3, #0
 8004158:	d12a      	bne.n	80041b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800415a:	e021      	b.n	80041a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004162:	d01d      	beq.n	80041a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_ADC_PollForConversion+0x7e>
 800416a:	f7ff fde5 	bl	8003d38 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d212      	bcs.n	80041a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0a2      	b.n	80042e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0d6      	beq.n	800415c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80041ae:	e070      	b.n	8004292 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80041b0:	4b4f      	ldr	r3, [pc, #316]	@ (80042f0 <HAL_ADC_PollForConversion+0x1f4>)
 80041b2:	681c      	ldr	r4, [r3, #0]
 80041b4:	2002      	movs	r0, #2
 80041b6:	f001 fd3d 	bl	8005c34 <HAL_RCCEx_GetPeriphCLKFreq>
 80041ba:	4603      	mov	r3, r0
 80041bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6919      	ldr	r1, [r3, #16]
 80041c6:	4b4b      	ldr	r3, [pc, #300]	@ (80042f4 <HAL_ADC_PollForConversion+0x1f8>)
 80041c8:	400b      	ands	r3, r1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d118      	bne.n	8004200 <HAL_ADC_PollForConversion+0x104>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68d9      	ldr	r1, [r3, #12]
 80041d4:	4b48      	ldr	r3, [pc, #288]	@ (80042f8 <HAL_ADC_PollForConversion+0x1fc>)
 80041d6:	400b      	ands	r3, r1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d111      	bne.n	8004200 <HAL_ADC_PollForConversion+0x104>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6919      	ldr	r1, [r3, #16]
 80041e2:	4b46      	ldr	r3, [pc, #280]	@ (80042fc <HAL_ADC_PollForConversion+0x200>)
 80041e4:	400b      	ands	r3, r1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <HAL_ADC_PollForConversion+0x100>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68d9      	ldr	r1, [r3, #12]
 80041f0:	4b43      	ldr	r3, [pc, #268]	@ (8004300 <HAL_ADC_PollForConversion+0x204>)
 80041f2:	400b      	ands	r3, r1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_PollForConversion+0x100>
 80041f8:	2314      	movs	r3, #20
 80041fa:	e020      	b.n	800423e <HAL_ADC_PollForConversion+0x142>
 80041fc:	2329      	movs	r3, #41	@ 0x29
 80041fe:	e01e      	b.n	800423e <HAL_ADC_PollForConversion+0x142>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6919      	ldr	r1, [r3, #16]
 8004206:	4b3d      	ldr	r3, [pc, #244]	@ (80042fc <HAL_ADC_PollForConversion+0x200>)
 8004208:	400b      	ands	r3, r1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_ADC_PollForConversion+0x120>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68d9      	ldr	r1, [r3, #12]
 8004214:	4b3a      	ldr	r3, [pc, #232]	@ (8004300 <HAL_ADC_PollForConversion+0x204>)
 8004216:	400b      	ands	r3, r1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <HAL_ADC_PollForConversion+0x13c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6919      	ldr	r1, [r3, #16]
 8004222:	4b38      	ldr	r3, [pc, #224]	@ (8004304 <HAL_ADC_PollForConversion+0x208>)
 8004224:	400b      	ands	r3, r1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <HAL_ADC_PollForConversion+0x140>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68d9      	ldr	r1, [r3, #12]
 8004230:	4b34      	ldr	r3, [pc, #208]	@ (8004304 <HAL_ADC_PollForConversion+0x208>)
 8004232:	400b      	ands	r3, r1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_ADC_PollForConversion+0x140>
 8004238:	2354      	movs	r3, #84	@ 0x54
 800423a:	e000      	b.n	800423e <HAL_ADC_PollForConversion+0x142>
 800423c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004244:	e021      	b.n	800428a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800424c:	d01a      	beq.n	8004284 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_ADC_PollForConversion+0x168>
 8004254:	f7ff fd70 	bl	8003d38 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d20f      	bcs.n	8004284 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d90b      	bls.n	8004284 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	f043 0204 	orr.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e030      	b.n	80042e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3301      	adds	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	d8d9      	bhi.n	8004246 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f06f 0212 	mvn.w	r2, #18
 800429a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80042b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80042b6:	d115      	bne.n	80042e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	f043 0201 	orr.w	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd90      	pop	{r4, r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000034 	.word	0x20000034
 80042f4:	24924924 	.word	0x24924924
 80042f8:	00924924 	.word	0x00924924
 80042fc:	12492492 	.word	0x12492492
 8004300:	00492492 	.word	0x00492492
 8004304:	00249249 	.word	0x00249249

08004308 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x20>
 800433c:	2302      	movs	r3, #2
 800433e:	e0dc      	b.n	80044fa <HAL_ADC_ConfigChannel+0x1da>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d81c      	bhi.n	800438a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	3b05      	subs	r3, #5
 8004362:	221f      	movs	r2, #31
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	4019      	ands	r1, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	3b05      	subs	r3, #5
 800437c:	fa00 f203 	lsl.w	r2, r0, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	635a      	str	r2, [r3, #52]	@ 0x34
 8004388:	e03c      	b.n	8004404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d81c      	bhi.n	80043cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	3b23      	subs	r3, #35	@ 0x23
 80043a4:	221f      	movs	r2, #31
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	4019      	ands	r1, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	3b23      	subs	r3, #35	@ 0x23
 80043be:	fa00 f203 	lsl.w	r2, r0, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80043ca:	e01b      	b.n	8004404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	3b41      	subs	r3, #65	@ 0x41
 80043de:	221f      	movs	r2, #31
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	4019      	ands	r1, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	3b41      	subs	r3, #65	@ 0x41
 80043f8:	fa00 f203 	lsl.w	r2, r0, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b09      	cmp	r3, #9
 800440a:	d91c      	bls.n	8004446 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68d9      	ldr	r1, [r3, #12]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	3b1e      	subs	r3, #30
 800441e:	2207      	movs	r2, #7
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	4019      	ands	r1, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6898      	ldr	r0, [r3, #8]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	3b1e      	subs	r3, #30
 8004438:	fa00 f203 	lsl.w	r2, r0, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	60da      	str	r2, [r3, #12]
 8004444:	e019      	b.n	800447a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6919      	ldr	r1, [r3, #16]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4413      	add	r3, r2
 8004456:	2207      	movs	r2, #7
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	4019      	ands	r1, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6898      	ldr	r0, [r3, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	fa00 f203 	lsl.w	r2, r0, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b10      	cmp	r3, #16
 8004480:	d003      	beq.n	800448a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004486:	2b11      	cmp	r3, #17
 8004488:	d132      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1d      	ldr	r2, [pc, #116]	@ (8004504 <HAL_ADC_ConfigChannel+0x1e4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d125      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d126      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80044b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d11a      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044ba:	4b13      	ldr	r3, [pc, #76]	@ (8004508 <HAL_ADC_ConfigChannel+0x1e8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a13      	ldr	r2, [pc, #76]	@ (800450c <HAL_ADC_ConfigChannel+0x1ec>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	0c9a      	lsrs	r2, r3, #18
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044d0:	e002      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f9      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x1b2>
 80044de:	e007      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	40012400 	.word	0x40012400
 8004508:	20000034 	.word	0x20000034
 800450c:	431bde83 	.word	0x431bde83

08004510 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d040      	beq.n	80045b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800453e:	4b1f      	ldr	r3, [pc, #124]	@ (80045bc <ADC_Enable+0xac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1f      	ldr	r2, [pc, #124]	@ (80045c0 <ADC_Enable+0xb0>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	0c9b      	lsrs	r3, r3, #18
 800454a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800454c:	e002      	b.n	8004554 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3b01      	subs	r3, #1
 8004552:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f9      	bne.n	800454e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800455a:	f7ff fbed 	bl	8003d38 <HAL_GetTick>
 800455e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004560:	e01f      	b.n	80045a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004562:	f7ff fbe9 	bl	8003d38 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d918      	bls.n	80045a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d011      	beq.n	80045a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e007      	b.n	80045b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d1d8      	bne.n	8004562 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000034 	.word	0x20000034
 80045c0:	431bde83 	.word	0x431bde83

080045c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d12e      	bne.n	800463c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045ee:	f7ff fba3 	bl	8003d38 <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045f4:	e01b      	b.n	800462e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045f6:	f7ff fb9f 	bl	8003d38 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d914      	bls.n	800462e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d10d      	bne.n	800462e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	f043 0210 	orr.w	r2, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e007      	b.n	800463e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d0dc      	beq.n	80045f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <__NVIC_SetPriorityGrouping>:
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004658:	4b0c      	ldr	r3, [pc, #48]	@ (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467a:	4a04      	ldr	r2, [pc, #16]	@ (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	60d3      	str	r3, [r2, #12]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_GetPriorityGrouping>:
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 0307 	and.w	r3, r3, #7
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <__NVIC_EnableIRQ>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db0b      	blt.n	80046d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	4906      	ldr	r1, [pc, #24]	@ (80046e0 <__NVIC_EnableIRQ+0x34>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2001      	movs	r0, #1
 80046ce:	fa00 f202 	lsl.w	r2, r0, r2
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	e000e100 	.word	0xe000e100

080046e4 <__NVIC_SetPriority>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	6039      	str	r1, [r7, #0]
 80046ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	db0a      	blt.n	800470e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	490c      	ldr	r1, [pc, #48]	@ (8004730 <__NVIC_SetPriority+0x4c>)
 80046fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004702:	0112      	lsls	r2, r2, #4
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	440b      	add	r3, r1
 8004708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800470c:	e00a      	b.n	8004724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4908      	ldr	r1, [pc, #32]	@ (8004734 <__NVIC_SetPriority+0x50>)
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	3b04      	subs	r3, #4
 800471c:	0112      	lsls	r2, r2, #4
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	440b      	add	r3, r1
 8004722:	761a      	strb	r2, [r3, #24]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000e100 	.word	0xe000e100
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <NVIC_EncodePriority>:
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	@ 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f1c3 0307 	rsb	r3, r3, #7
 8004752:	2b04      	cmp	r3, #4
 8004754:	bf28      	it	cs
 8004756:	2304      	movcs	r3, #4
 8004758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3304      	adds	r3, #4
 800475e:	2b06      	cmp	r3, #6
 8004760:	d902      	bls.n	8004768 <NVIC_EncodePriority+0x30>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3b03      	subs	r3, #3
 8004766:	e000      	b.n	800476a <NVIC_EncodePriority+0x32>
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800476c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	401a      	ands	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004780:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	43d9      	mvns	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	4313      	orrs	r3, r2
}
 8004792:	4618      	mov	r0, r3
 8004794:	3724      	adds	r7, #36	@ 0x24
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <SysTick_Config>:
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047ac:	d301      	bcc.n	80047b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80047ae:	2301      	movs	r3, #1
 80047b0:	e00f      	b.n	80047d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047b2:	4a0a      	ldr	r2, [pc, #40]	@ (80047dc <SysTick_Config+0x40>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ba:	210f      	movs	r1, #15
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047c0:	f7ff ff90 	bl	80046e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <SysTick_Config+0x40>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ca:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <SysTick_Config+0x40>)
 80047cc:	2207      	movs	r2, #7
 80047ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	e000e010 	.word	0xe000e010

080047e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff2d 	bl	8004648 <__NVIC_SetPriorityGrouping>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	4603      	mov	r3, r0
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004808:	f7ff ff42 	bl	8004690 <__NVIC_GetPriorityGrouping>
 800480c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	6978      	ldr	r0, [r7, #20]
 8004814:	f7ff ff90 	bl	8004738 <NVIC_EncodePriority>
 8004818:	4602      	mov	r2, r0
 800481a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff5f 	bl	80046e4 <__NVIC_SetPriority>
}
 8004826:	bf00      	nop
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff35 	bl	80046ac <__NVIC_EnableIRQ>
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ffa2 	bl	800479c <SysTick_Config>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d008      	beq.n	800488c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e020      	b.n	80048ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 020e 	bic.w	r2, r2, #14
 800489a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b4:	2101      	movs	r1, #1
 80048b6:	fa01 f202 	lsl.w	r2, r1, r2
 80048ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d005      	beq.n	80048fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2204      	movs	r2, #4
 80048f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
 80048fa:	e0d6      	b.n	8004aaa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 020e 	bic.w	r2, r2, #14
 800490a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	4b64      	ldr	r3, [pc, #400]	@ (8004ab4 <HAL_DMA_Abort_IT+0x1dc>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d958      	bls.n	80049da <HAL_DMA_Abort_IT+0x102>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a62      	ldr	r2, [pc, #392]	@ (8004ab8 <HAL_DMA_Abort_IT+0x1e0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d04f      	beq.n	80049d2 <HAL_DMA_Abort_IT+0xfa>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a61      	ldr	r2, [pc, #388]	@ (8004abc <HAL_DMA_Abort_IT+0x1e4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d048      	beq.n	80049ce <HAL_DMA_Abort_IT+0xf6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a5f      	ldr	r2, [pc, #380]	@ (8004ac0 <HAL_DMA_Abort_IT+0x1e8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d040      	beq.n	80049c8 <HAL_DMA_Abort_IT+0xf0>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ac4 <HAL_DMA_Abort_IT+0x1ec>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d038      	beq.n	80049c2 <HAL_DMA_Abort_IT+0xea>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a5c      	ldr	r2, [pc, #368]	@ (8004ac8 <HAL_DMA_Abort_IT+0x1f0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d030      	beq.n	80049bc <HAL_DMA_Abort_IT+0xe4>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a5b      	ldr	r2, [pc, #364]	@ (8004acc <HAL_DMA_Abort_IT+0x1f4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d028      	beq.n	80049b6 <HAL_DMA_Abort_IT+0xde>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a52      	ldr	r2, [pc, #328]	@ (8004ab4 <HAL_DMA_Abort_IT+0x1dc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d020      	beq.n	80049b0 <HAL_DMA_Abort_IT+0xd8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a57      	ldr	r2, [pc, #348]	@ (8004ad0 <HAL_DMA_Abort_IT+0x1f8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d019      	beq.n	80049ac <HAL_DMA_Abort_IT+0xd4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a55      	ldr	r2, [pc, #340]	@ (8004ad4 <HAL_DMA_Abort_IT+0x1fc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d012      	beq.n	80049a8 <HAL_DMA_Abort_IT+0xd0>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a54      	ldr	r2, [pc, #336]	@ (8004ad8 <HAL_DMA_Abort_IT+0x200>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00a      	beq.n	80049a2 <HAL_DMA_Abort_IT+0xca>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a52      	ldr	r2, [pc, #328]	@ (8004adc <HAL_DMA_Abort_IT+0x204>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d102      	bne.n	800499c <HAL_DMA_Abort_IT+0xc4>
 8004996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800499a:	e01b      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 800499c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049a0:	e018      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049a6:	e015      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049a8:	2310      	movs	r3, #16
 80049aa:	e013      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e011      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049b4:	e00e      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049ba:	e00b      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049c0:	e008      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049c6:	e005      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049cc:	e002      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049ce:	2310      	movs	r3, #16
 80049d0:	e000      	b.n	80049d4 <HAL_DMA_Abort_IT+0xfc>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4a42      	ldr	r2, [pc, #264]	@ (8004ae0 <HAL_DMA_Abort_IT+0x208>)
 80049d6:	6053      	str	r3, [r2, #4]
 80049d8:	e057      	b.n	8004a8a <HAL_DMA_Abort_IT+0x1b2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a36      	ldr	r2, [pc, #216]	@ (8004ab8 <HAL_DMA_Abort_IT+0x1e0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d04f      	beq.n	8004a84 <HAL_DMA_Abort_IT+0x1ac>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a34      	ldr	r2, [pc, #208]	@ (8004abc <HAL_DMA_Abort_IT+0x1e4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d048      	beq.n	8004a80 <HAL_DMA_Abort_IT+0x1a8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a33      	ldr	r2, [pc, #204]	@ (8004ac0 <HAL_DMA_Abort_IT+0x1e8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d040      	beq.n	8004a7a <HAL_DMA_Abort_IT+0x1a2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a31      	ldr	r2, [pc, #196]	@ (8004ac4 <HAL_DMA_Abort_IT+0x1ec>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d038      	beq.n	8004a74 <HAL_DMA_Abort_IT+0x19c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a30      	ldr	r2, [pc, #192]	@ (8004ac8 <HAL_DMA_Abort_IT+0x1f0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d030      	beq.n	8004a6e <HAL_DMA_Abort_IT+0x196>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2e      	ldr	r2, [pc, #184]	@ (8004acc <HAL_DMA_Abort_IT+0x1f4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d028      	beq.n	8004a68 <HAL_DMA_Abort_IT+0x190>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a26      	ldr	r2, [pc, #152]	@ (8004ab4 <HAL_DMA_Abort_IT+0x1dc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d020      	beq.n	8004a62 <HAL_DMA_Abort_IT+0x18a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad0 <HAL_DMA_Abort_IT+0x1f8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d019      	beq.n	8004a5e <HAL_DMA_Abort_IT+0x186>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a29      	ldr	r2, [pc, #164]	@ (8004ad4 <HAL_DMA_Abort_IT+0x1fc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d012      	beq.n	8004a5a <HAL_DMA_Abort_IT+0x182>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a27      	ldr	r2, [pc, #156]	@ (8004ad8 <HAL_DMA_Abort_IT+0x200>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00a      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x17c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <HAL_DMA_Abort_IT+0x204>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d102      	bne.n	8004a4e <HAL_DMA_Abort_IT+0x176>
 8004a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a4c:	e01b      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a52:	e018      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a58:	e015      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a5a:	2310      	movs	r3, #16
 8004a5c:	e013      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e011      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a66:	e00e      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a6c:	e00b      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a72:	e008      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a78:	e005      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a7e:	e002      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a80:	2310      	movs	r3, #16
 8004a82:	e000      	b.n	8004a86 <HAL_DMA_Abort_IT+0x1ae>
 8004a84:	2301      	movs	r3, #1
 8004a86:	4a17      	ldr	r2, [pc, #92]	@ (8004ae4 <HAL_DMA_Abort_IT+0x20c>)
 8004a88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
    } 
  }
  return status;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40020080 	.word	0x40020080
 8004ab8:	40020008 	.word	0x40020008
 8004abc:	4002001c 	.word	0x4002001c
 8004ac0:	40020030 	.word	0x40020030
 8004ac4:	40020044 	.word	0x40020044
 8004ac8:	40020058 	.word	0x40020058
 8004acc:	4002006c 	.word	0x4002006c
 8004ad0:	40020408 	.word	0x40020408
 8004ad4:	4002041c 	.word	0x4002041c
 8004ad8:	40020430 	.word	0x40020430
 8004adc:	40020444 	.word	0x40020444
 8004ae0:	40020400 	.word	0x40020400
 8004ae4:	40020000 	.word	0x40020000

08004ae8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004b02:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc0 <HAL_FLASH_Program+0xd8>)
 8004b04:	7e1b      	ldrb	r3, [r3, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_FLASH_Program+0x26>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e054      	b.n	8004bb8 <HAL_FLASH_Program+0xd0>
 8004b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc0 <HAL_FLASH_Program+0xd8>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b18:	f000 f8a8 	bl	8004c6c <FLASH_WaitForLastOperation>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d144      	bne.n	8004bb0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d102      	bne.n	8004b32 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	757b      	strb	r3, [r7, #21]
 8004b30:	e007      	b.n	8004b42 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d102      	bne.n	8004b3e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	757b      	strb	r3, [r7, #21]
 8004b3c:	e001      	b.n	8004b42 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004b3e:	2304      	movs	r3, #4
 8004b40:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	75bb      	strb	r3, [r7, #22]
 8004b46:	e02d      	b.n	8004ba4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004b48:	7dbb      	ldrb	r3, [r7, #22]
 8004b4a:	005a      	lsls	r2, r3, #1
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	eb02 0c03 	add.w	ip, r2, r3
 8004b52:	7dbb      	ldrb	r3, [r7, #22]
 8004b54:	0119      	lsls	r1, r3, #4
 8004b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5a:	f1c1 0620 	rsb	r6, r1, #32
 8004b5e:	f1a1 0020 	sub.w	r0, r1, #32
 8004b62:	fa22 f401 	lsr.w	r4, r2, r1
 8004b66:	fa03 f606 	lsl.w	r6, r3, r6
 8004b6a:	4334      	orrs	r4, r6
 8004b6c:	fa23 f000 	lsr.w	r0, r3, r0
 8004b70:	4304      	orrs	r4, r0
 8004b72:	fa23 f501 	lsr.w	r5, r3, r1
 8004b76:	b2a3      	uxth	r3, r4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4660      	mov	r0, ip
 8004b7c:	f000 f85a 	bl	8004c34 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b84:	f000 f872 	bl	8004c6c <FLASH_WaitForLastOperation>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <HAL_FLASH_Program+0xdc>)
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <HAL_FLASH_Program+0xdc>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d107      	bne.n	8004bae <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004b9e:	7dbb      	ldrb	r3, [r7, #22]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	75bb      	strb	r3, [r7, #22]
 8004ba4:	7dba      	ldrb	r2, [r7, #22]
 8004ba6:	7d7b      	ldrb	r3, [r7, #21]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d3cd      	bcc.n	8004b48 <HAL_FLASH_Program+0x60>
 8004bac:	e000      	b.n	8004bb0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004bae:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <HAL_FLASH_Program+0xd8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	761a      	strb	r2, [r3, #24]

  return status;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc0:	20000c30 	.word	0x20000c30
 8004bc4:	40022000 	.word	0x40022000

08004bc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c08 <HAL_FLASH_Unlock+0x40>)
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004bde:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <HAL_FLASH_Unlock+0x40>)
 8004be0:	4a0a      	ldr	r2, [pc, #40]	@ (8004c0c <HAL_FLASH_Unlock+0x44>)
 8004be2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004be4:	4b08      	ldr	r3, [pc, #32]	@ (8004c08 <HAL_FLASH_Unlock+0x40>)
 8004be6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c10 <HAL_FLASH_Unlock+0x48>)
 8004be8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004bea:	4b07      	ldr	r3, [pc, #28]	@ (8004c08 <HAL_FLASH_Unlock+0x40>)
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40022000 	.word	0x40022000
 8004c0c:	45670123 	.word	0x45670123
 8004c10:	cdef89ab 	.word	0xcdef89ab

08004c14 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004c18:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <HAL_FLASH_Lock+0x1c>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	4a04      	ldr	r2, [pc, #16]	@ (8004c30 <HAL_FLASH_Lock+0x1c>)
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c22:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40022000 	.word	0x40022000

08004c34 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c40:	4b08      	ldr	r3, [pc, #32]	@ (8004c64 <FLASH_Program_HalfWord+0x30>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004c46:	4b08      	ldr	r3, [pc, #32]	@ (8004c68 <FLASH_Program_HalfWord+0x34>)
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	4a07      	ldr	r2, [pc, #28]	@ (8004c68 <FLASH_Program_HalfWord+0x34>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	887a      	ldrh	r2, [r7, #2]
 8004c56:	801a      	strh	r2, [r3, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000c30 	.word	0x20000c30
 8004c68:	40022000 	.word	0x40022000

08004c6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004c74:	f7ff f860 	bl	8003d38 <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004c7a:	e010      	b.n	8004c9e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c82:	d00c      	beq.n	8004c9e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <FLASH_WaitForLastOperation+0x2e>
 8004c8a:	f7ff f855 	bl	8003d38 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d201      	bcs.n	8004c9e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e025      	b.n	8004cea <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004c9e:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <FLASH_WaitForLastOperation+0x88>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e8      	bne.n	8004c7c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004caa:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <FLASH_WaitForLastOperation+0x88>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf4 <FLASH_WaitForLastOperation+0x88>)
 8004cb8:	2220      	movs	r2, #32
 8004cba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <FLASH_WaitForLastOperation+0x88>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <FLASH_WaitForLastOperation+0x88>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004cd4:	4b07      	ldr	r3, [pc, #28]	@ (8004cf4 <FLASH_WaitForLastOperation+0x88>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004ce0:	f000 f80a 	bl	8004cf8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40022000 	.word	0x40022000

08004cf8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004d02:	4b23      	ldr	r3, [pc, #140]	@ (8004d90 <FLASH_SetErrorCode+0x98>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d0e:	4b21      	ldr	r3, [pc, #132]	@ (8004d94 <FLASH_SetErrorCode+0x9c>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	4a1f      	ldr	r2, [pc, #124]	@ (8004d94 <FLASH_SetErrorCode+0x9c>)
 8004d18:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f043 0310 	orr.w	r3, r3, #16
 8004d20:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004d22:	4b1b      	ldr	r3, [pc, #108]	@ (8004d90 <FLASH_SetErrorCode+0x98>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004d2e:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <FLASH_SetErrorCode+0x9c>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	4a17      	ldr	r2, [pc, #92]	@ (8004d94 <FLASH_SetErrorCode+0x9c>)
 8004d38:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f043 0304 	orr.w	r3, r3, #4
 8004d40:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004d42:	4b13      	ldr	r3, [pc, #76]	@ (8004d90 <FLASH_SetErrorCode+0x98>)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004d4e:	4b11      	ldr	r3, [pc, #68]	@ (8004d94 <FLASH_SetErrorCode+0x9c>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <FLASH_SetErrorCode+0x9c>)
 8004d58:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <FLASH_SetErrorCode+0x98>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d90 <FLASH_SetErrorCode+0x98>)
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f240 1201 	movw	r2, #257	@ 0x101
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d106      	bne.n	8004d7e <FLASH_SetErrorCode+0x86>
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <FLASH_SetErrorCode+0x98>)
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	4a06      	ldr	r2, [pc, #24]	@ (8004d90 <FLASH_SetErrorCode+0x98>)
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	61d3      	str	r3, [r2, #28]
}  
 8004d7c:	e002      	b.n	8004d84 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004d7e:	4a04      	ldr	r2, [pc, #16]	@ (8004d90 <FLASH_SetErrorCode+0x98>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60d3      	str	r3, [r2, #12]
}  
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40022000 	.word	0x40022000
 8004d94:	20000c30 	.word	0x20000c30

08004d98 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004daa:	4b2f      	ldr	r3, [pc, #188]	@ (8004e68 <HAL_FLASHEx_Erase+0xd0>)
 8004dac:	7e1b      	ldrb	r3, [r3, #24]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_FLASHEx_Erase+0x1e>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e053      	b.n	8004e5e <HAL_FLASHEx_Erase+0xc6>
 8004db6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e68 <HAL_FLASHEx_Erase+0xd0>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d116      	bne.n	8004df2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004dc4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004dc8:	f7ff ff50 	bl	8004c6c <FLASH_WaitForLastOperation>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d141      	bne.n	8004e56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	f000 f84c 	bl	8004e70 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004dd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004ddc:	f7ff ff46 	bl	8004c6c <FLASH_WaitForLastOperation>
 8004de0:	4603      	mov	r3, r0
 8004de2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004de4:	4b21      	ldr	r3, [pc, #132]	@ (8004e6c <HAL_FLASHEx_Erase+0xd4>)
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	4a20      	ldr	r2, [pc, #128]	@ (8004e6c <HAL_FLASHEx_Erase+0xd4>)
 8004dea:	f023 0304 	bic.w	r3, r3, #4
 8004dee:	6113      	str	r3, [r2, #16]
 8004df0:	e031      	b.n	8004e56 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004df2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004df6:	f7ff ff39 	bl	8004c6c <FLASH_WaitForLastOperation>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d12a      	bne.n	8004e56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e06:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	e019      	b.n	8004e44 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004e10:	68b8      	ldr	r0, [r7, #8]
 8004e12:	f000 f849 	bl	8004ea8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e16:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004e1a:	f7ff ff27 	bl	8004c6c <FLASH_WaitForLastOperation>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004e22:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <HAL_FLASHEx_Erase+0xd4>)
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	4a11      	ldr	r2, [pc, #68]	@ (8004e6c <HAL_FLASHEx_Erase+0xd4>)
 8004e28:	f023 0302 	bic.w	r3, r3, #2
 8004e2c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	601a      	str	r2, [r3, #0]
            break;
 8004e3a:	e00c      	b.n	8004e56 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e42:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	02da      	lsls	r2, r3, #11
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4413      	add	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d3dc      	bcc.n	8004e10 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e56:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <HAL_FLASHEx_Erase+0xd0>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	761a      	strb	r2, [r3, #24]

  return status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000c30 	.word	0x20000c30
 8004e6c:	40022000 	.word	0x40022000

08004e70 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e78:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <FLASH_MassErase+0x30>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004e7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ea4 <FLASH_MassErase+0x34>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4a08      	ldr	r2, [pc, #32]	@ (8004ea4 <FLASH_MassErase+0x34>)
 8004e84:	f043 0304 	orr.w	r3, r3, #4
 8004e88:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <FLASH_MassErase+0x34>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	4a05      	ldr	r2, [pc, #20]	@ (8004ea4 <FLASH_MassErase+0x34>)
 8004e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e94:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	20000c30 	.word	0x20000c30
 8004ea4:	40022000 	.word	0x40022000

08004ea8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <FLASH_PageErase+0x38>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <FLASH_PageErase+0x3c>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <FLASH_PageErase+0x3c>)
 8004ebc:	f043 0302 	orr.w	r3, r3, #2
 8004ec0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004ec2:	4a08      	ldr	r2, [pc, #32]	@ (8004ee4 <FLASH_PageErase+0x3c>)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <FLASH_PageErase+0x3c>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4a05      	ldr	r2, [pc, #20]	@ (8004ee4 <FLASH_PageErase+0x3c>)
 8004ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ed2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000c30 	.word	0x20000c30
 8004ee4:	40022000 	.word	0x40022000

08004ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b08b      	sub	sp, #44	@ 0x2c
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004efa:	e179      	b.n	80051f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004efc:	2201      	movs	r2, #1
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	f040 8168 	bne.w	80051ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4a96      	ldr	r2, [pc, #600]	@ (8005178 <HAL_GPIO_Init+0x290>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d05e      	beq.n	8004fe2 <HAL_GPIO_Init+0xfa>
 8004f24:	4a94      	ldr	r2, [pc, #592]	@ (8005178 <HAL_GPIO_Init+0x290>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d875      	bhi.n	8005016 <HAL_GPIO_Init+0x12e>
 8004f2a:	4a94      	ldr	r2, [pc, #592]	@ (800517c <HAL_GPIO_Init+0x294>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d058      	beq.n	8004fe2 <HAL_GPIO_Init+0xfa>
 8004f30:	4a92      	ldr	r2, [pc, #584]	@ (800517c <HAL_GPIO_Init+0x294>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d86f      	bhi.n	8005016 <HAL_GPIO_Init+0x12e>
 8004f36:	4a92      	ldr	r2, [pc, #584]	@ (8005180 <HAL_GPIO_Init+0x298>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d052      	beq.n	8004fe2 <HAL_GPIO_Init+0xfa>
 8004f3c:	4a90      	ldr	r2, [pc, #576]	@ (8005180 <HAL_GPIO_Init+0x298>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d869      	bhi.n	8005016 <HAL_GPIO_Init+0x12e>
 8004f42:	4a90      	ldr	r2, [pc, #576]	@ (8005184 <HAL_GPIO_Init+0x29c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d04c      	beq.n	8004fe2 <HAL_GPIO_Init+0xfa>
 8004f48:	4a8e      	ldr	r2, [pc, #568]	@ (8005184 <HAL_GPIO_Init+0x29c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d863      	bhi.n	8005016 <HAL_GPIO_Init+0x12e>
 8004f4e:	4a8e      	ldr	r2, [pc, #568]	@ (8005188 <HAL_GPIO_Init+0x2a0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d046      	beq.n	8004fe2 <HAL_GPIO_Init+0xfa>
 8004f54:	4a8c      	ldr	r2, [pc, #560]	@ (8005188 <HAL_GPIO_Init+0x2a0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d85d      	bhi.n	8005016 <HAL_GPIO_Init+0x12e>
 8004f5a:	2b12      	cmp	r3, #18
 8004f5c:	d82a      	bhi.n	8004fb4 <HAL_GPIO_Init+0xcc>
 8004f5e:	2b12      	cmp	r3, #18
 8004f60:	d859      	bhi.n	8005016 <HAL_GPIO_Init+0x12e>
 8004f62:	a201      	add	r2, pc, #4	@ (adr r2, 8004f68 <HAL_GPIO_Init+0x80>)
 8004f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f68:	08004fe3 	.word	0x08004fe3
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	08004fcf 	.word	0x08004fcf
 8004f74:	08005011 	.word	0x08005011
 8004f78:	08005017 	.word	0x08005017
 8004f7c:	08005017 	.word	0x08005017
 8004f80:	08005017 	.word	0x08005017
 8004f84:	08005017 	.word	0x08005017
 8004f88:	08005017 	.word	0x08005017
 8004f8c:	08005017 	.word	0x08005017
 8004f90:	08005017 	.word	0x08005017
 8004f94:	08005017 	.word	0x08005017
 8004f98:	08005017 	.word	0x08005017
 8004f9c:	08005017 	.word	0x08005017
 8004fa0:	08005017 	.word	0x08005017
 8004fa4:	08005017 	.word	0x08005017
 8004fa8:	08005017 	.word	0x08005017
 8004fac:	08004fc5 	.word	0x08004fc5
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	4a75      	ldr	r2, [pc, #468]	@ (800518c <HAL_GPIO_Init+0x2a4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004fba:	e02c      	b.n	8005016 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	623b      	str	r3, [r7, #32]
          break;
 8004fc2:	e029      	b.n	8005018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	623b      	str	r3, [r7, #32]
          break;
 8004fcc:	e024      	b.n	8005018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	623b      	str	r3, [r7, #32]
          break;
 8004fd6:	e01f      	b.n	8005018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	623b      	str	r3, [r7, #32]
          break;
 8004fe0:	e01a      	b.n	8005018 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fea:	2304      	movs	r3, #4
 8004fec:	623b      	str	r3, [r7, #32]
          break;
 8004fee:	e013      	b.n	8005018 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d105      	bne.n	8005004 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	611a      	str	r2, [r3, #16]
          break;
 8005002:	e009      	b.n	8005018 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005004:	2308      	movs	r3, #8
 8005006:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	615a      	str	r2, [r3, #20]
          break;
 800500e:	e003      	b.n	8005018 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005010:	2300      	movs	r3, #0
 8005012:	623b      	str	r3, [r7, #32]
          break;
 8005014:	e000      	b.n	8005018 <HAL_GPIO_Init+0x130>
          break;
 8005016:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2bff      	cmp	r3, #255	@ 0xff
 800501c:	d801      	bhi.n	8005022 <HAL_GPIO_Init+0x13a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	e001      	b.n	8005026 <HAL_GPIO_Init+0x13e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2bff      	cmp	r3, #255	@ 0xff
 800502c:	d802      	bhi.n	8005034 <HAL_GPIO_Init+0x14c>
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	e002      	b.n	800503a <HAL_GPIO_Init+0x152>
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	3b08      	subs	r3, #8
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	210f      	movs	r1, #15
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	401a      	ands	r2, r3
 800504c:	6a39      	ldr	r1, [r7, #32]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	fa01 f303 	lsl.w	r3, r1, r3
 8005054:	431a      	orrs	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80c1 	beq.w	80051ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005068:	4b49      	ldr	r3, [pc, #292]	@ (8005190 <HAL_GPIO_Init+0x2a8>)
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	4a48      	ldr	r2, [pc, #288]	@ (8005190 <HAL_GPIO_Init+0x2a8>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6193      	str	r3, [r2, #24]
 8005074:	4b46      	ldr	r3, [pc, #280]	@ (8005190 <HAL_GPIO_Init+0x2a8>)
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005080:	4a44      	ldr	r2, [pc, #272]	@ (8005194 <HAL_GPIO_Init+0x2ac>)
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	3302      	adds	r3, #2
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	220f      	movs	r2, #15
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3c      	ldr	r2, [pc, #240]	@ (8005198 <HAL_GPIO_Init+0x2b0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d01f      	beq.n	80050ec <HAL_GPIO_Init+0x204>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3b      	ldr	r2, [pc, #236]	@ (800519c <HAL_GPIO_Init+0x2b4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d019      	beq.n	80050e8 <HAL_GPIO_Init+0x200>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3a      	ldr	r2, [pc, #232]	@ (80051a0 <HAL_GPIO_Init+0x2b8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_GPIO_Init+0x1fc>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a39      	ldr	r2, [pc, #228]	@ (80051a4 <HAL_GPIO_Init+0x2bc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00d      	beq.n	80050e0 <HAL_GPIO_Init+0x1f8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a38      	ldr	r2, [pc, #224]	@ (80051a8 <HAL_GPIO_Init+0x2c0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <HAL_GPIO_Init+0x1f4>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a37      	ldr	r2, [pc, #220]	@ (80051ac <HAL_GPIO_Init+0x2c4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <HAL_GPIO_Init+0x1f0>
 80050d4:	2305      	movs	r3, #5
 80050d6:	e00a      	b.n	80050ee <HAL_GPIO_Init+0x206>
 80050d8:	2306      	movs	r3, #6
 80050da:	e008      	b.n	80050ee <HAL_GPIO_Init+0x206>
 80050dc:	2304      	movs	r3, #4
 80050de:	e006      	b.n	80050ee <HAL_GPIO_Init+0x206>
 80050e0:	2303      	movs	r3, #3
 80050e2:	e004      	b.n	80050ee <HAL_GPIO_Init+0x206>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e002      	b.n	80050ee <HAL_GPIO_Init+0x206>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_GPIO_Init+0x206>
 80050ec:	2300      	movs	r3, #0
 80050ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f0:	f002 0203 	and.w	r2, r2, #3
 80050f4:	0092      	lsls	r2, r2, #2
 80050f6:	4093      	lsls	r3, r2
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050fe:	4925      	ldr	r1, [pc, #148]	@ (8005194 <HAL_GPIO_Init+0x2ac>)
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	3302      	adds	r3, #2
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d006      	beq.n	8005126 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005118:	4b25      	ldr	r3, [pc, #148]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	4924      	ldr	r1, [pc, #144]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]
 8005124:	e006      	b.n	8005134 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005126:	4b22      	ldr	r3, [pc, #136]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	43db      	mvns	r3, r3
 800512e:	4920      	ldr	r1, [pc, #128]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 8005130:	4013      	ands	r3, r2
 8005132:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005140:	4b1b      	ldr	r3, [pc, #108]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	491a      	ldr	r1, [pc, #104]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	4313      	orrs	r3, r2
 800514a:	60cb      	str	r3, [r1, #12]
 800514c:	e006      	b.n	800515c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800514e:	4b18      	ldr	r3, [pc, #96]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	43db      	mvns	r3, r3
 8005156:	4916      	ldr	r1, [pc, #88]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 8005158:	4013      	ands	r3, r2
 800515a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d025      	beq.n	80051b4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005168:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4910      	ldr	r1, [pc, #64]	@ (80051b0 <HAL_GPIO_Init+0x2c8>)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
 8005174:	e025      	b.n	80051c2 <HAL_GPIO_Init+0x2da>
 8005176:	bf00      	nop
 8005178:	10320000 	.word	0x10320000
 800517c:	10310000 	.word	0x10310000
 8005180:	10220000 	.word	0x10220000
 8005184:	10210000 	.word	0x10210000
 8005188:	10120000 	.word	0x10120000
 800518c:	10110000 	.word	0x10110000
 8005190:	40021000 	.word	0x40021000
 8005194:	40010000 	.word	0x40010000
 8005198:	40010800 	.word	0x40010800
 800519c:	40010c00 	.word	0x40010c00
 80051a0:	40011000 	.word	0x40011000
 80051a4:	40011400 	.word	0x40011400
 80051a8:	40011800 	.word	0x40011800
 80051ac:	40011c00 	.word	0x40011c00
 80051b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80051b4:	4b15      	ldr	r3, [pc, #84]	@ (800520c <HAL_GPIO_Init+0x324>)
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	4913      	ldr	r1, [pc, #76]	@ (800520c <HAL_GPIO_Init+0x324>)
 80051be:	4013      	ands	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d006      	beq.n	80051dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80051ce:	4b0f      	ldr	r3, [pc, #60]	@ (800520c <HAL_GPIO_Init+0x324>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	490e      	ldr	r1, [pc, #56]	@ (800520c <HAL_GPIO_Init+0x324>)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]
 80051da:	e006      	b.n	80051ea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_GPIO_Init+0x324>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	43db      	mvns	r3, r3
 80051e4:	4909      	ldr	r1, [pc, #36]	@ (800520c <HAL_GPIO_Init+0x324>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	3301      	adds	r3, #1
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	fa22 f303 	lsr.w	r3, r2, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f47f ae7e 	bne.w	8004efc <HAL_GPIO_Init+0x14>
  }
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	372c      	adds	r7, #44	@ 0x2c
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	40010400 	.word	0x40010400

08005210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e001      	b.n	8005232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr

0800523e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	807b      	strh	r3, [r7, #2]
 800524a:	4613      	mov	r3, r2
 800524c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800524e:	787b      	ldrb	r3, [r7, #1]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005254:	887a      	ldrh	r2, [r7, #2]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800525a:	e003      	b.n	8005264 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	041a      	lsls	r2, r3, #16
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	611a      	str	r2, [r3, #16]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
	...

08005270 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800527c:	4b09      	ldr	r3, [pc, #36]	@ (80052a4 <HAL_PWR_EnterSLEEPMode+0x34>)
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	4a08      	ldr	r2, [pc, #32]	@ (80052a4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8005282:	f023 0304 	bic.w	r3, r3, #4
 8005286:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800528e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005290:	e002      	b.n	8005298 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8005292:	bf40      	sev
    __WFE();
 8005294:	bf20      	wfe
    __WFE();
 8005296:	bf20      	wfe
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	e000ed00 	.word	0xe000ed00

080052a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e272      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8087 	beq.w	80053d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052c8:	4b92      	ldr	r3, [pc, #584]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 030c 	and.w	r3, r3, #12
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d00c      	beq.n	80052ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d112      	bne.n	8005306 <HAL_RCC_OscConfig+0x5e>
 80052e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ec:	d10b      	bne.n	8005306 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ee:	4b89      	ldr	r3, [pc, #548]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d06c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x12c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d168      	bne.n	80053d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e24c      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x76>
 8005310:	4b80      	ldr	r3, [pc, #512]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7f      	ldr	r2, [pc, #508]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e02e      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <HAL_RCC_OscConfig+0x98>
 8005326:	4b7b      	ldr	r3, [pc, #492]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a7a      	ldr	r2, [pc, #488]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 800532c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	4b78      	ldr	r3, [pc, #480]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a77      	ldr	r2, [pc, #476]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005338:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e01d      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0xbc>
 800534a:	4b72      	ldr	r3, [pc, #456]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a71      	ldr	r2, [pc, #452]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b6f      	ldr	r3, [pc, #444]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6e      	ldr	r2, [pc, #440]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 8005364:	4b6b      	ldr	r3, [pc, #428]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a6a      	ldr	r2, [pc, #424]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b68      	ldr	r3, [pc, #416]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a67      	ldr	r2, [pc, #412]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800537a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fe fcd8 	bl	8003d38 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800538c:	f7fe fcd4 	bl	8003d38 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	@ 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e200      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b5d      	ldr	r3, [pc, #372]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xe4>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fe fcc4 	bl	8003d38 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fe fcc0 	bl	8003d38 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	@ 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1ec      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c6:	4b53      	ldr	r3, [pc, #332]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x10c>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d063      	beq.n	80054aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053ee:	4b49      	ldr	r3, [pc, #292]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d11c      	bne.n	8005434 <HAL_RCC_OscConfig+0x18c>
 80053fa:	4b46      	ldr	r3, [pc, #280]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d116      	bne.n	8005434 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005406:	4b43      	ldr	r3, [pc, #268]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_RCC_OscConfig+0x176>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d001      	beq.n	800541e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e1c0      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541e:	4b3d      	ldr	r3, [pc, #244]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4939      	ldr	r1, [pc, #228]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005432:	e03a      	b.n	80054aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d020      	beq.n	800547e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800543c:	4b36      	ldr	r3, [pc, #216]	@ (8005518 <HAL_RCC_OscConfig+0x270>)
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005442:	f7fe fc79 	bl	8003d38 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544a:	f7fe fc75 	bl	8003d38 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e1a1      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545c:	4b2d      	ldr	r3, [pc, #180]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005468:	4b2a      	ldr	r3, [pc, #168]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4927      	ldr	r1, [pc, #156]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]
 800547c:	e015      	b.n	80054aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547e:	4b26      	ldr	r3, [pc, #152]	@ (8005518 <HAL_RCC_OscConfig+0x270>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fe fc58 	bl	8003d38 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548c:	f7fe fc54 	bl	8003d38 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e180      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549e:	4b1d      	ldr	r3, [pc, #116]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d03a      	beq.n	800552c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d019      	beq.n	80054f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054be:	4b17      	ldr	r3, [pc, #92]	@ (800551c <HAL_RCC_OscConfig+0x274>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c4:	f7fe fc38 	bl	8003d38 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054cc:	f7fe fc34 	bl	8003d38 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e160      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054de:	4b0d      	ldr	r3, [pc, #52]	@ (8005514 <HAL_RCC_OscConfig+0x26c>)
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054ea:	2001      	movs	r0, #1
 80054ec:	f000 face 	bl	8005a8c <RCC_Delay>
 80054f0:	e01c      	b.n	800552c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f2:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <HAL_RCC_OscConfig+0x274>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f8:	f7fe fc1e 	bl	8003d38 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fe:	e00f      	b.n	8005520 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005500:	f7fe fc1a 	bl	8003d38 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d908      	bls.n	8005520 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e146      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000
 8005518:	42420000 	.word	0x42420000
 800551c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005520:	4b92      	ldr	r3, [pc, #584]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e9      	bne.n	8005500 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80a6 	beq.w	8005686 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553e:	4b8b      	ldr	r3, [pc, #556]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554a:	4b88      	ldr	r3, [pc, #544]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	4a87      	ldr	r2, [pc, #540]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005554:	61d3      	str	r3, [r2, #28]
 8005556:	4b85      	ldr	r3, [pc, #532]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005566:	4b82      	ldr	r3, [pc, #520]	@ (8005770 <HAL_RCC_OscConfig+0x4c8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d118      	bne.n	80055a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005572:	4b7f      	ldr	r3, [pc, #508]	@ (8005770 <HAL_RCC_OscConfig+0x4c8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a7e      	ldr	r2, [pc, #504]	@ (8005770 <HAL_RCC_OscConfig+0x4c8>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557e:	f7fe fbdb 	bl	8003d38 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005586:	f7fe fbd7 	bl	8003d38 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b64      	cmp	r3, #100	@ 0x64
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e103      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005598:	4b75      	ldr	r3, [pc, #468]	@ (8005770 <HAL_RCC_OscConfig+0x4c8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d106      	bne.n	80055ba <HAL_RCC_OscConfig+0x312>
 80055ac:	4b6f      	ldr	r3, [pc, #444]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	4a6e      	ldr	r2, [pc, #440]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6213      	str	r3, [r2, #32]
 80055b8:	e02d      	b.n	8005616 <HAL_RCC_OscConfig+0x36e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10c      	bne.n	80055dc <HAL_RCC_OscConfig+0x334>
 80055c2:	4b6a      	ldr	r3, [pc, #424]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	4a69      	ldr	r2, [pc, #420]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	6213      	str	r3, [r2, #32]
 80055ce:	4b67      	ldr	r3, [pc, #412]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	4a66      	ldr	r2, [pc, #408]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	6213      	str	r3, [r2, #32]
 80055da:	e01c      	b.n	8005616 <HAL_RCC_OscConfig+0x36e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d10c      	bne.n	80055fe <HAL_RCC_OscConfig+0x356>
 80055e4:	4b61      	ldr	r3, [pc, #388]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	4a60      	ldr	r2, [pc, #384]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055ea:	f043 0304 	orr.w	r3, r3, #4
 80055ee:	6213      	str	r3, [r2, #32]
 80055f0:	4b5e      	ldr	r3, [pc, #376]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	4a5d      	ldr	r2, [pc, #372]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6213      	str	r3, [r2, #32]
 80055fc:	e00b      	b.n	8005616 <HAL_RCC_OscConfig+0x36e>
 80055fe:	4b5b      	ldr	r3, [pc, #364]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	4a5a      	ldr	r2, [pc, #360]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	6213      	str	r3, [r2, #32]
 800560a:	4b58      	ldr	r3, [pc, #352]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	4a57      	ldr	r2, [pc, #348]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005610:	f023 0304 	bic.w	r3, r3, #4
 8005614:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d015      	beq.n	800564a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561e:	f7fe fb8b 	bl	8003d38 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005624:	e00a      	b.n	800563c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fe fb87 	bl	8003d38 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e0b1      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800563c:	4b4b      	ldr	r3, [pc, #300]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0ee      	beq.n	8005626 <HAL_RCC_OscConfig+0x37e>
 8005648:	e014      	b.n	8005674 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564a:	f7fe fb75 	bl	8003d38 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005650:	e00a      	b.n	8005668 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fe fb71 	bl	8003d38 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e09b      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005668:	4b40      	ldr	r3, [pc, #256]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ee      	bne.n	8005652 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d105      	bne.n	8005686 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567a:	4b3c      	ldr	r3, [pc, #240]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4a3b      	ldr	r2, [pc, #236]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005684:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8087 	beq.w	800579e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005690:	4b36      	ldr	r3, [pc, #216]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	2b08      	cmp	r3, #8
 800569a:	d061      	beq.n	8005760 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d146      	bne.n	8005732 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a4:	4b33      	ldr	r3, [pc, #204]	@ (8005774 <HAL_RCC_OscConfig+0x4cc>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056aa:	f7fe fb45 	bl	8003d38 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b2:	f7fe fb41 	bl	8003d38 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e06d      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056c4:	4b29      	ldr	r3, [pc, #164]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f0      	bne.n	80056b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d8:	d108      	bne.n	80056ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056da:	4b24      	ldr	r3, [pc, #144]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4921      	ldr	r1, [pc, #132]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056ec:	4b1f      	ldr	r3, [pc, #124]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a19      	ldr	r1, [r3, #32]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	430b      	orrs	r3, r1
 80056fe:	491b      	ldr	r1, [pc, #108]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005700:	4313      	orrs	r3, r2
 8005702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005704:	4b1b      	ldr	r3, [pc, #108]	@ (8005774 <HAL_RCC_OscConfig+0x4cc>)
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570a:	f7fe fb15 	bl	8003d38 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005712:	f7fe fb11 	bl	8003d38 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e03d      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005724:	4b11      	ldr	r3, [pc, #68]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x46a>
 8005730:	e035      	b.n	800579e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005732:	4b10      	ldr	r3, [pc, #64]	@ (8005774 <HAL_RCC_OscConfig+0x4cc>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fe fafe 	bl	8003d38 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005740:	f7fe fafa 	bl	8003d38 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e026      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005752:	4b06      	ldr	r3, [pc, #24]	@ (800576c <HAL_RCC_OscConfig+0x4c4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x498>
 800575e:	e01e      	b.n	800579e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d107      	bne.n	8005778 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e019      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
 800576c:	40021000 	.word	0x40021000
 8005770:	40007000 	.word	0x40007000
 8005774:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005778:	4b0b      	ldr	r3, [pc, #44]	@ (80057a8 <HAL_RCC_OscConfig+0x500>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	429a      	cmp	r2, r3
 800578a:	d106      	bne.n	800579a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d001      	beq.n	800579e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40021000 	.word	0x40021000

080057ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0d0      	b.n	8005962 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057c0:	4b6a      	ldr	r3, [pc, #424]	@ (800596c <HAL_RCC_ClockConfig+0x1c0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d910      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b67      	ldr	r3, [pc, #412]	@ (800596c <HAL_RCC_ClockConfig+0x1c0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 0207 	bic.w	r2, r3, #7
 80057d6:	4965      	ldr	r1, [pc, #404]	@ (800596c <HAL_RCC_ClockConfig+0x1c0>)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	4313      	orrs	r3, r2
 80057dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	4b63      	ldr	r3, [pc, #396]	@ (800596c <HAL_RCC_ClockConfig+0x1c0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0b8      	b.n	8005962 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d020      	beq.n	800583e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005808:	4b59      	ldr	r3, [pc, #356]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4a58      	ldr	r2, [pc, #352]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800580e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005812:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005820:	4b53      	ldr	r3, [pc, #332]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	4a52      	ldr	r2, [pc, #328]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 8005826:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800582a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800582c:	4b50      	ldr	r3, [pc, #320]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	494d      	ldr	r1, [pc, #308]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800583a:	4313      	orrs	r3, r2
 800583c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d040      	beq.n	80058cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b47      	ldr	r3, [pc, #284]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d115      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e07f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d107      	bne.n	800587a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586a:	4b41      	ldr	r3, [pc, #260]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e073      	b.n	8005962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587a:	4b3d      	ldr	r3, [pc, #244]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e06b      	b.n	8005962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800588a:	4b39      	ldr	r3, [pc, #228]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f023 0203 	bic.w	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4936      	ldr	r1, [pc, #216]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 8005898:	4313      	orrs	r3, r2
 800589a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800589c:	f7fe fa4c 	bl	8003d38 <HAL_GetTick>
 80058a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a4:	f7fe fa48 	bl	8003d38 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e053      	b.n	8005962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 020c 	and.w	r2, r3, #12
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d1eb      	bne.n	80058a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058cc:	4b27      	ldr	r3, [pc, #156]	@ (800596c <HAL_RCC_ClockConfig+0x1c0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d210      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b24      	ldr	r3, [pc, #144]	@ (800596c <HAL_RCC_ClockConfig+0x1c0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 0207 	bic.w	r2, r3, #7
 80058e2:	4922      	ldr	r1, [pc, #136]	@ (800596c <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b20      	ldr	r3, [pc, #128]	@ (800596c <HAL_RCC_ClockConfig+0x1c0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e032      	b.n	8005962 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005908:	4b19      	ldr	r3, [pc, #100]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4916      	ldr	r1, [pc, #88]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005926:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	490e      	ldr	r1, [pc, #56]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800593a:	f000 f821 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 800593e:	4602      	mov	r2, r0
 8005940:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	490a      	ldr	r1, [pc, #40]	@ (8005974 <HAL_RCC_ClockConfig+0x1c8>)
 800594c:	5ccb      	ldrb	r3, [r1, r3]
 800594e:	fa22 f303 	lsr.w	r3, r2, r3
 8005952:	4a09      	ldr	r2, [pc, #36]	@ (8005978 <HAL_RCC_ClockConfig+0x1cc>)
 8005954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005956:	4b09      	ldr	r3, [pc, #36]	@ (800597c <HAL_RCC_ClockConfig+0x1d0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe f9aa 	bl	8003cb4 <HAL_InitTick>

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40022000 	.word	0x40022000
 8005970:	40021000 	.word	0x40021000
 8005974:	08009a10 	.word	0x08009a10
 8005978:	20000034 	.word	0x20000034
 800597c:	20000038 	.word	0x20000038

08005980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	2300      	movs	r3, #0
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	2300      	movs	r3, #0
 8005994:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800599a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x94>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 030c 	and.w	r3, r3, #12
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d002      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x30>
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d003      	beq.n	80059b6 <HAL_RCC_GetSysClockFreq+0x36>
 80059ae:	e027      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059b0:	4b19      	ldr	r3, [pc, #100]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80059b2:	613b      	str	r3, [r7, #16]
      break;
 80059b4:	e027      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	0c9b      	lsrs	r3, r3, #18
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	4a17      	ldr	r2, [pc, #92]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 80059c0:	5cd3      	ldrb	r3, [r2, r3]
 80059c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d010      	beq.n	80059f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059ce:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x94>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	0c5b      	lsrs	r3, r3, #17
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	4a11      	ldr	r2, [pc, #68]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xa0>)
 80059da:	5cd3      	ldrb	r3, [r2, r3]
 80059dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80059e2:	fb03 f202 	mul.w	r2, r3, r2
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e004      	b.n	80059fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80059f4:	fb02 f303 	mul.w	r3, r2, r3
 80059f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	613b      	str	r3, [r7, #16]
      break;
 80059fe:	e002      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a00:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a02:	613b      	str	r3, [r7, #16]
      break;
 8005a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a06:	693b      	ldr	r3, [r7, #16]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40021000 	.word	0x40021000
 8005a18:	007a1200 	.word	0x007a1200
 8005a1c:	08009a28 	.word	0x08009a28
 8005a20:	08009a38 	.word	0x08009a38
 8005a24:	003d0900 	.word	0x003d0900

08005a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a2c:	4b02      	ldr	r3, [pc, #8]	@ (8005a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	20000034 	.word	0x20000034

08005a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a40:	f7ff fff2 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b05      	ldr	r3, [pc, #20]	@ (8005a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4903      	ldr	r1, [pc, #12]	@ (8005a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	08009a20 	.word	0x08009a20

08005a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a68:	f7ff ffde 	bl	8005a28 <HAL_RCC_GetHCLKFreq>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	0adb      	lsrs	r3, r3, #11
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	4903      	ldr	r1, [pc, #12]	@ (8005a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40021000 	.word	0x40021000
 8005a88:	08009a20 	.word	0x08009a20

08005a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a94:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <RCC_Delay+0x34>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac4 <RCC_Delay+0x38>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	0a5b      	lsrs	r3, r3, #9
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005aa8:	bf00      	nop
  }
  while (Delay --);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1e5a      	subs	r2, r3, #1
 8005aae:	60fa      	str	r2, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f9      	bne.n	8005aa8 <RCC_Delay+0x1c>
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr
 8005ac0:	20000034 	.word	0x20000034
 8005ac4:	10624dd3 	.word	0x10624dd3

08005ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d07d      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005af4:	4b4c      	ldr	r3, [pc, #304]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	4a4b      	ldr	r2, [pc, #300]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005afe:	61d3      	str	r3, [r2, #28]
 8005b00:	4b49      	ldr	r3, [pc, #292]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b10:	4b46      	ldr	r3, [pc, #280]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d118      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b1c:	4b43      	ldr	r3, [pc, #268]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a42      	ldr	r2, [pc, #264]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b28:	f7fe f906 	bl	8003d38 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2e:	e008      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b30:	f7fe f902 	bl	8003d38 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	@ 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e06d      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b42:	4b3a      	ldr	r3, [pc, #232]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b4e:	4b36      	ldr	r3, [pc, #216]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d02e      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d027      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b76:	4b2e      	ldr	r3, [pc, #184]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b82:	4a29      	ldr	r2, [pc, #164]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d014      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b92:	f7fe f8d1 	bl	8003d38 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b98:	e00a      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fe f8cd 	bl	8003d38 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e036      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ee      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4917      	ldr	r1, [pc, #92]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4b14      	ldr	r3, [pc, #80]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	4a13      	ldr	r2, [pc, #76]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bec:	4b0e      	ldr	r3, [pc, #56]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	490b      	ldr	r1, [pc, #44]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d008      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c0a:	4b07      	ldr	r3, [pc, #28]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	4904      	ldr	r1, [pc, #16]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	40007000 	.word	0x40007000
 8005c30:	42420440 	.word	0x42420440

08005c34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b0f      	cmp	r3, #15
 8005c56:	f200 80af 	bhi.w	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005d37 	.word	0x08005d37
 8005c64:	08005d9d 	.word	0x08005d9d
 8005c68:	08005db9 	.word	0x08005db9
 8005c6c:	08005d27 	.word	0x08005d27
 8005c70:	08005db9 	.word	0x08005db9
 8005c74:	08005db9 	.word	0x08005db9
 8005c78:	08005db9 	.word	0x08005db9
 8005c7c:	08005d2f 	.word	0x08005d2f
 8005c80:	08005db9 	.word	0x08005db9
 8005c84:	08005db9 	.word	0x08005db9
 8005c88:	08005db9 	.word	0x08005db9
 8005c8c:	08005db9 	.word	0x08005db9
 8005c90:	08005db9 	.word	0x08005db9
 8005c94:	08005db9 	.word	0x08005db9
 8005c98:	08005db9 	.word	0x08005db9
 8005c9c:	08005ca1 	.word	0x08005ca1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005ca6:	4b49      	ldr	r3, [pc, #292]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8084 	beq.w	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	0c9b      	lsrs	r3, r3, #18
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	4a44      	ldr	r2, [pc, #272]	@ (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8005cbe:	5cd3      	ldrb	r3, [r2, r3]
 8005cc0:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d015      	beq.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	0c5b      	lsrs	r3, r3, #17
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005cd8:	5cd3      	ldrb	r3, [r2, r3]
 8005cda:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00d      	beq.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e004      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4a38      	ldr	r2, [pc, #224]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005d02:	4b32      	ldr	r3, [pc, #200]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d0e:	d102      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005d14:	e052      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	4a31      	ldr	r2, [pc, #196]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	61bb      	str	r3, [r7, #24]
      break;
 8005d24:	e04a      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005d26:	f7ff fe2b 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8005d2a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005d2c:	e049      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005d2e:	f7ff fe27 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8005d32:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005d34:	e045      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005d36:	4b25      	ldr	r3, [pc, #148]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d46:	d108      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8005d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	e01f      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d64:	d109      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005d66:	4b19      	ldr	r3, [pc, #100]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8005d72:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	e00f      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d84:	d11c      	bne.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005d86:	4b11      	ldr	r3, [pc, #68]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d016      	beq.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8005d92:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005d96:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005d98:	e012      	b.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005d9a:	e011      	b.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005d9c:	f7ff fe62 	bl	8005a64 <HAL_RCC_GetPCLK2Freq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	0b9b      	lsrs	r3, r3, #14
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	3301      	adds	r3, #1
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	61bb      	str	r3, [r7, #24]
      break;
 8005db6:	e004      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8005db8:	bf00      	nop
 8005dba:	e002      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8005dc0:	bf00      	nop
    }
  }
  return (frequency);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	08009a3c 	.word	0x08009a3c
 8005dd4:	08009a4c 	.word	0x08009a4c
 8005dd8:	007a1200 	.word	0x007a1200
 8005ddc:	003d0900 	.word	0x003d0900
 8005de0:	aaaaaaab 	.word	0xaaaaaaab

08005de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e041      	b.n	8005e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fd fdd2 	bl	80039b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f000 f9a2 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d001      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e044      	b.n	8005f26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <HAL_TIM_Base_Start_IT+0xac>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f34 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	@ (8005f38 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <HAL_TIM_Base_Start_IT+0xb8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <HAL_TIM_Base_Start_IT+0xbc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d111      	bne.n	8005f14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b06      	cmp	r3, #6
 8005f00:	d010      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f12:	e007      	b.n	8005f24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40013400 	.word	0x40013400
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00

08005f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d020      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01b      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0202 	mvn.w	r2, #2
 8005f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8d1 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f8c4 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f8d3 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d020      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0204 	mvn.w	r2, #4
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f8ab 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f89e 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f8ad 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d020      	beq.n	8006040 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01b      	beq.n	8006040 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0208 	mvn.w	r2, #8
 8006010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2204      	movs	r2, #4
 8006016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f885 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f878 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f887 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b00      	cmp	r3, #0
 8006048:	d020      	beq.n	800608c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01b      	beq.n	800608c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0210 	mvn.w	r2, #16
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2208      	movs	r2, #8
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f85f 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f852 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f861 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00c      	beq.n	80060b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0201 	mvn.w	r2, #1
 80060a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fd f814 	bl	80030d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00c      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f947 	bl	8006362 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00c      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f831 	bl	800615a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00c      	beq.n	800611c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0220 	mvn.w	r2, #32
 8006114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f91a 	bl	8006350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a39      	ldr	r2, [pc, #228]	@ (8006264 <TIM_Base_SetConfig+0xf8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a38      	ldr	r2, [pc, #224]	@ (8006268 <TIM_Base_SetConfig+0xfc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a35      	ldr	r2, [pc, #212]	@ (800626c <TIM_Base_SetConfig+0x100>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a34      	ldr	r2, [pc, #208]	@ (8006270 <TIM_Base_SetConfig+0x104>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a33      	ldr	r2, [pc, #204]	@ (8006274 <TIM_Base_SetConfig+0x108>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a28      	ldr	r2, [pc, #160]	@ (8006264 <TIM_Base_SetConfig+0xf8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <TIM_Base_SetConfig+0x82>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a27      	ldr	r2, [pc, #156]	@ (8006268 <TIM_Base_SetConfig+0xfc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00f      	beq.n	80061ee <TIM_Base_SetConfig+0x82>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d4:	d00b      	beq.n	80061ee <TIM_Base_SetConfig+0x82>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a24      	ldr	r2, [pc, #144]	@ (800626c <TIM_Base_SetConfig+0x100>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d007      	beq.n	80061ee <TIM_Base_SetConfig+0x82>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a23      	ldr	r2, [pc, #140]	@ (8006270 <TIM_Base_SetConfig+0x104>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d003      	beq.n	80061ee <TIM_Base_SetConfig+0x82>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a22      	ldr	r2, [pc, #136]	@ (8006274 <TIM_Base_SetConfig+0x108>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d108      	bne.n	8006200 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a0f      	ldr	r2, [pc, #60]	@ (8006264 <TIM_Base_SetConfig+0xf8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_Base_SetConfig+0xc8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a0e      	ldr	r2, [pc, #56]	@ (8006268 <TIM_Base_SetConfig+0xfc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d103      	bne.n	800623c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	611a      	str	r2, [r3, #16]
  }
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	40012c00 	.word	0x40012c00
 8006268:	40013400 	.word	0x40013400
 800626c:	40000400 	.word	0x40000400
 8006270:	40000800 	.word	0x40000800
 8006274:	40000c00 	.word	0x40000c00

08006278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e050      	b.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1b      	ldr	r2, [pc, #108]	@ (800633c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a19      	ldr	r2, [pc, #100]	@ (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e6:	d00e      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a14      	ldr	r2, [pc, #80]	@ (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a12      	ldr	r2, [pc, #72]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10c      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800630c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4313      	orrs	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr
 800633c:	40012c00 	.word	0x40012c00
 8006340:	40013400 	.word	0x40013400
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00

08006350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr

08006362 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e042      	b.n	800640c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fd fb30 	bl	8003a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2224      	movs	r2, #36	@ 0x24
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fded 	bl	8006f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	@ 0x28
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b20      	cmp	r3, #32
 8006432:	d175      	bne.n	8006520 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_UART_Transmit+0x2c>
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e06e      	b.n	8006522 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2221      	movs	r2, #33	@ 0x21
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006452:	f7fd fc71 	bl	8003d38 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	88fa      	ldrh	r2, [r7, #6]
 8006462:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800646c:	d108      	bne.n	8006480 <HAL_UART_Transmit+0x6c>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e003      	b.n	8006488 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006484:	2300      	movs	r3, #0
 8006486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006488:	e02e      	b.n	80064e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2200      	movs	r2, #0
 8006492:	2180      	movs	r1, #128	@ 0x80
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 fb52 	bl	8006b3e <UART_WaitOnFlagUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e03a      	b.n	8006522 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	3302      	adds	r3, #2
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	e007      	b.n	80064da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1cb      	bne.n	800648a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2200      	movs	r2, #0
 80064fa:	2140      	movs	r1, #64	@ 0x40
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fb1e 	bl	8006b3e <UART_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e006      	b.n	8006522 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
  }
}
 8006522:	4618      	mov	r0, r3
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b08c      	sub	sp, #48	@ 0x30
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	4613      	mov	r3, r2
 8006536:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b20      	cmp	r3, #32
 8006542:	d14a      	bne.n	80065da <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e043      	b.n	80065dc <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006560:	88fb      	ldrh	r3, [r7, #6]
 8006562:	461a      	mov	r2, r3
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fb42 	bl	8006bf0 <UART_Start_Receive_IT>
 800656c:	4603      	mov	r3, r0
 800656e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006572:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006576:	2b00      	cmp	r3, #0
 8006578:	d12c      	bne.n	80065d4 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657e:	2b01      	cmp	r3, #1
 8006580:	d125      	bne.n	80065ce <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	617b      	str	r3, [r7, #20]
   return(result);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f043 0310 	orr.w	r3, r3, #16
 80065ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80065ba:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6a39      	ldr	r1, [r7, #32]
 80065be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e5      	bne.n	8006598 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80065cc:	e002      	b.n	80065d4 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80065d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065d8:	e000      	b.n	80065dc <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3730      	adds	r7, #48	@ 0x30
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b0ba      	sub	sp, #232	@ 0xe8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800660a:	2300      	movs	r3, #0
 800660c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10f      	bne.n	800664a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800662a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <HAL_UART_IRQHandler+0x66>
 8006636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fbea 	bl	8006e1c <UART_Receive_IT>
      return;
 8006648:	e25b      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800664a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80de 	beq.w	8006810 <HAL_UART_IRQHandler+0x22c>
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d106      	bne.n	800666e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006664:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80d1 	beq.w	8006810 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_UART_IRQHandler+0xae>
 800667a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800667e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	f043 0201 	orr.w	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <HAL_UART_IRQHandler+0xd2>
 800669e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	f043 0202 	orr.w	r2, r3, #2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_UART_IRQHandler+0xf6>
 80066c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	f043 0204 	orr.w	r2, r3, #4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d011      	beq.n	800670a <HAL_UART_IRQHandler+0x126>
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d105      	bne.n	80066fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006702:	f043 0208 	orr.w	r2, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 81f2 	beq.w	8006af8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	d008      	beq.n	8006732 <HAL_UART_IRQHandler+0x14e>
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fb75 	bl	8006e1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d103      	bne.n	800675e <HAL_UART_IRQHandler+0x17a>
 8006756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d04f      	beq.n	80067fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa7f 	bl	8006c62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d041      	beq.n	80067f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006788:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800678c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3314      	adds	r3, #20
 800679a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800679e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1d9      	bne.n	8006772 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d013      	beq.n	80067ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ca:	4a7e      	ldr	r2, [pc, #504]	@ (80069c4 <HAL_UART_IRQHandler+0x3e0>)
 80067cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe f880 	bl	80048d8 <HAL_DMA_Abort_IT>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	e00e      	b.n	800680c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f99c 	bl	8006b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f4:	e00a      	b.n	800680c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f998 	bl	8006b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	e006      	b.n	800680c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f994 	bl	8006b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800680a:	e175      	b.n	8006af8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	bf00      	nop
    return;
 800680e:	e173      	b.n	8006af8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006814:	2b01      	cmp	r3, #1
 8006816:	f040 814f 	bne.w	8006ab8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800681e:	f003 0310 	and.w	r3, r3, #16
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 8148 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8141 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60bb      	str	r3, [r7, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80b6 	beq.w	80069c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8145 	beq.w	8006afc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800687a:	429a      	cmp	r2, r3
 800687c:	f080 813e 	bcs.w	8006afc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006886:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	2b20      	cmp	r3, #32
 8006890:	f000 8088 	beq.w	80069a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80068c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1d9      	bne.n	8006894 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3314      	adds	r3, #20
 8006900:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006904:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006908:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800690c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e1      	bne.n	80068e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3314      	adds	r3, #20
 8006922:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800692c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800692e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006932:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3314      	adds	r3, #20
 800693c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006940:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006942:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006946:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800694e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e3      	bne.n	800691c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006974:	f023 0310 	bic.w	r3, r3, #16
 8006978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006986:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006988:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800698c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e3      	bne.n	8006962 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fd ff5f 	bl	8004862 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fc fa06 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069c0:	e09c      	b.n	8006afc <HAL_UART_IRQHandler+0x518>
 80069c2:	bf00      	nop
 80069c4:	08006d27 	.word	0x08006d27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 808e 	beq.w	8006b00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80069e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8089 	beq.w	8006b00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a12:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e3      	bne.n	80069ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	623b      	str	r3, [r7, #32]
   return(result);
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e3      	bne.n	8006a26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0310 	bic.w	r3, r3, #16
 8006a82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a90:	61fa      	str	r2, [r7, #28]
 8006a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	69b9      	ldr	r1, [r7, #24]
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e3      	bne.n	8006a6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fc f98b 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ab6:	e023      	b.n	8006b00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d009      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x4f4>
 8006ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f93c 	bl	8006d4e <UART_Transmit_IT>
    return;
 8006ad6:	e014      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00e      	beq.n	8006b02 <HAL_UART_IRQHandler+0x51e>
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f97b 	bl	8006dec <UART_EndTransmit_IT>
    return;
 8006af6:	e004      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
    return;
 8006af8:	bf00      	nop
 8006afa:	e002      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
      return;
 8006afc:	bf00      	nop
 8006afe:	e000      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b00:	bf00      	nop
  }
}
 8006b02:	37e8      	adds	r7, #232	@ 0xe8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr

08006b1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr

08006b3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4e:	e03b      	b.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b56:	d037      	beq.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b58:	f7fd f8ee 	bl	8003d38 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	6a3a      	ldr	r2, [r7, #32]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d302      	bcc.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e03a      	b.n	8006be8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d023      	beq.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b80      	cmp	r3, #128	@ 0x80
 8006b84:	d020      	beq.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b40      	cmp	r3, #64	@ 0x40
 8006b8a:	d01d      	beq.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d116      	bne.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f856 	bl	8006c62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e00f      	b.n	8006be8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	bf0c      	ite	eq
 8006bd8:	2301      	moveq	r3, #1
 8006bda:	2300      	movne	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d0b4      	beq.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	88fa      	ldrh	r2, [r7, #6]
 8006c0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2222      	movs	r2, #34	@ 0x22
 8006c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c34:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695a      	ldr	r2, [r3, #20]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0220 	orr.w	r2, r2, #32
 8006c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr

08006c62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b095      	sub	sp, #84	@ 0x54
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e5      	bne.n	8006c6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3314      	adds	r3, #20
 8006cbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e5      	bne.n	8006c9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d119      	bne.n	8006d0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f023 0310 	bic.w	r3, r3, #16
 8006cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	330c      	adds	r3, #12
 8006cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cfa:	61ba      	str	r2, [r7, #24]
 8006cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6979      	ldr	r1, [r7, #20]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	613b      	str	r3, [r7, #16]
   return(result);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e5      	bne.n	8006cda <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d1c:	bf00      	nop
 8006d1e:	3754      	adds	r7, #84	@ 0x54
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff fef3 	bl	8006b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d46:	bf00      	nop
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b21      	cmp	r3, #33	@ 0x21
 8006d60:	d13e      	bne.n	8006de0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6a:	d114      	bne.n	8006d96 <UART_Transmit_IT+0x48>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d110      	bne.n	8006d96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	621a      	str	r2, [r3, #32]
 8006d94:	e008      	b.n	8006da8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	1c59      	adds	r1, r3, #1
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6211      	str	r1, [r2, #32]
 8006da0:	781a      	ldrb	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4619      	mov	r1, r3
 8006db6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10f      	bne.n	8006ddc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e000      	b.n	8006de2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006de0:	2302      	movs	r3, #2
  }
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff fe7b 	bl	8006b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08c      	sub	sp, #48	@ 0x30
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b22      	cmp	r3, #34	@ 0x22
 8006e2e:	f040 80ae 	bne.w	8006f8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3a:	d117      	bne.n	8006e6c <UART_Receive_IT+0x50>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d113      	bne.n	8006e6c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	1c9a      	adds	r2, r3, #2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e6a:	e026      	b.n	8006eba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e7e:	d007      	beq.n	8006e90 <UART_Receive_IT+0x74>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <UART_Receive_IT+0x82>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	e008      	b.n	8006eb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d15d      	bne.n	8006f8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0220 	bic.w	r2, r2, #32
 8006edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006eec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695a      	ldr	r2, [r3, #20]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d135      	bne.n	8006f80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	330c      	adds	r3, #12
 8006f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f023 0310 	bic.w	r3, r3, #16
 8006f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f3a:	623a      	str	r2, [r7, #32]
 8006f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	69f9      	ldr	r1, [r7, #28]
 8006f40:	6a3a      	ldr	r2, [r7, #32]
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e5      	bne.n	8006f1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0310 	and.w	r3, r3, #16
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d10a      	bne.n	8006f72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fb ff27 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
 8006f7e:	e002      	b.n	8006f86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff fdca 	bl	8006b1a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e002      	b.n	8006f90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e000      	b.n	8006f90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f8e:	2302      	movs	r3, #2
  }
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3730      	adds	r7, #48	@ 0x30
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006fd2:	f023 030c 	bic.w	r3, r3, #12
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80070ac <UART_SetConfig+0x114>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d103      	bne.n	8007008 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007000:	f7fe fd30 	bl	8005a64 <HAL_RCC_GetPCLK2Freq>
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	e002      	b.n	800700e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007008:	f7fe fd18 	bl	8005a3c <HAL_RCC_GetPCLK1Freq>
 800700c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	009a      	lsls	r2, r3, #2
 8007018:	441a      	add	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	fbb2 f3f3 	udiv	r3, r2, r3
 8007024:	4a22      	ldr	r2, [pc, #136]	@ (80070b0 <UART_SetConfig+0x118>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	0119      	lsls	r1, r3, #4
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009a      	lsls	r2, r3, #2
 8007038:	441a      	add	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	fbb2 f2f3 	udiv	r2, r2, r3
 8007044:	4b1a      	ldr	r3, [pc, #104]	@ (80070b0 <UART_SetConfig+0x118>)
 8007046:	fba3 0302 	umull	r0, r3, r3, r2
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	2064      	movs	r0, #100	@ 0x64
 800704e:	fb00 f303 	mul.w	r3, r0, r3
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	3332      	adds	r3, #50	@ 0x32
 8007058:	4a15      	ldr	r2, [pc, #84]	@ (80070b0 <UART_SetConfig+0x118>)
 800705a:	fba2 2303 	umull	r2, r3, r2, r3
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007064:	4419      	add	r1, r3
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009a      	lsls	r2, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	fbb2 f2f3 	udiv	r2, r2, r3
 800707c:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <UART_SetConfig+0x118>)
 800707e:	fba3 0302 	umull	r0, r3, r3, r2
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	2064      	movs	r0, #100	@ 0x64
 8007086:	fb00 f303 	mul.w	r3, r0, r3
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	3332      	adds	r3, #50	@ 0x32
 8007090:	4a07      	ldr	r2, [pc, #28]	@ (80070b0 <UART_SetConfig+0x118>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	f003 020f 	and.w	r2, r3, #15
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	440a      	add	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40013800 	.word	0x40013800
 80070b0:	51eb851f 	.word	0x51eb851f

080070b4 <malloc>:
 80070b4:	4b02      	ldr	r3, [pc, #8]	@ (80070c0 <malloc+0xc>)
 80070b6:	4601      	mov	r1, r0
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	f000 b82d 	b.w	8007118 <_malloc_r>
 80070be:	bf00      	nop
 80070c0:	2000004c 	.word	0x2000004c

080070c4 <free>:
 80070c4:	4b02      	ldr	r3, [pc, #8]	@ (80070d0 <free+0xc>)
 80070c6:	4601      	mov	r1, r0
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	f000 bbed 	b.w	80078a8 <_free_r>
 80070ce:	bf00      	nop
 80070d0:	2000004c 	.word	0x2000004c

080070d4 <sbrk_aligned>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007114 <sbrk_aligned+0x40>)
 80070d8:	460c      	mov	r4, r1
 80070da:	6831      	ldr	r1, [r6, #0]
 80070dc:	4605      	mov	r5, r0
 80070de:	b911      	cbnz	r1, 80070e6 <sbrk_aligned+0x12>
 80070e0:	f000 fb84 	bl	80077ec <_sbrk_r>
 80070e4:	6030      	str	r0, [r6, #0]
 80070e6:	4621      	mov	r1, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	f000 fb7f 	bl	80077ec <_sbrk_r>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d103      	bne.n	80070fa <sbrk_aligned+0x26>
 80070f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80070f6:	4620      	mov	r0, r4
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	1cc4      	adds	r4, r0, #3
 80070fc:	f024 0403 	bic.w	r4, r4, #3
 8007100:	42a0      	cmp	r0, r4
 8007102:	d0f8      	beq.n	80070f6 <sbrk_aligned+0x22>
 8007104:	1a21      	subs	r1, r4, r0
 8007106:	4628      	mov	r0, r5
 8007108:	f000 fb70 	bl	80077ec <_sbrk_r>
 800710c:	3001      	adds	r0, #1
 800710e:	d1f2      	bne.n	80070f6 <sbrk_aligned+0x22>
 8007110:	e7ef      	b.n	80070f2 <sbrk_aligned+0x1e>
 8007112:	bf00      	nop
 8007114:	20000c50 	.word	0x20000c50

08007118 <_malloc_r>:
 8007118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800711c:	1ccd      	adds	r5, r1, #3
 800711e:	f025 0503 	bic.w	r5, r5, #3
 8007122:	3508      	adds	r5, #8
 8007124:	2d0c      	cmp	r5, #12
 8007126:	bf38      	it	cc
 8007128:	250c      	movcc	r5, #12
 800712a:	2d00      	cmp	r5, #0
 800712c:	4606      	mov	r6, r0
 800712e:	db01      	blt.n	8007134 <_malloc_r+0x1c>
 8007130:	42a9      	cmp	r1, r5
 8007132:	d904      	bls.n	800713e <_malloc_r+0x26>
 8007134:	230c      	movs	r3, #12
 8007136:	6033      	str	r3, [r6, #0]
 8007138:	2000      	movs	r0, #0
 800713a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007214 <_malloc_r+0xfc>
 8007142:	f000 f869 	bl	8007218 <__malloc_lock>
 8007146:	f8d8 3000 	ldr.w	r3, [r8]
 800714a:	461c      	mov	r4, r3
 800714c:	bb44      	cbnz	r4, 80071a0 <_malloc_r+0x88>
 800714e:	4629      	mov	r1, r5
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff ffbf 	bl	80070d4 <sbrk_aligned>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	4604      	mov	r4, r0
 800715a:	d158      	bne.n	800720e <_malloc_r+0xf6>
 800715c:	f8d8 4000 	ldr.w	r4, [r8]
 8007160:	4627      	mov	r7, r4
 8007162:	2f00      	cmp	r7, #0
 8007164:	d143      	bne.n	80071ee <_malloc_r+0xd6>
 8007166:	2c00      	cmp	r4, #0
 8007168:	d04b      	beq.n	8007202 <_malloc_r+0xea>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	4639      	mov	r1, r7
 800716e:	4630      	mov	r0, r6
 8007170:	eb04 0903 	add.w	r9, r4, r3
 8007174:	f000 fb3a 	bl	80077ec <_sbrk_r>
 8007178:	4581      	cmp	r9, r0
 800717a:	d142      	bne.n	8007202 <_malloc_r+0xea>
 800717c:	6821      	ldr	r1, [r4, #0]
 800717e:	4630      	mov	r0, r6
 8007180:	1a6d      	subs	r5, r5, r1
 8007182:	4629      	mov	r1, r5
 8007184:	f7ff ffa6 	bl	80070d4 <sbrk_aligned>
 8007188:	3001      	adds	r0, #1
 800718a:	d03a      	beq.n	8007202 <_malloc_r+0xea>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	442b      	add	r3, r5
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	f8d8 3000 	ldr.w	r3, [r8]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	bb62      	cbnz	r2, 80071f4 <_malloc_r+0xdc>
 800719a:	f8c8 7000 	str.w	r7, [r8]
 800719e:	e00f      	b.n	80071c0 <_malloc_r+0xa8>
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	1b52      	subs	r2, r2, r5
 80071a4:	d420      	bmi.n	80071e8 <_malloc_r+0xd0>
 80071a6:	2a0b      	cmp	r2, #11
 80071a8:	d917      	bls.n	80071da <_malloc_r+0xc2>
 80071aa:	1961      	adds	r1, r4, r5
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	6025      	str	r5, [r4, #0]
 80071b0:	bf18      	it	ne
 80071b2:	6059      	strne	r1, [r3, #4]
 80071b4:	6863      	ldr	r3, [r4, #4]
 80071b6:	bf08      	it	eq
 80071b8:	f8c8 1000 	streq.w	r1, [r8]
 80071bc:	5162      	str	r2, [r4, r5]
 80071be:	604b      	str	r3, [r1, #4]
 80071c0:	4630      	mov	r0, r6
 80071c2:	f000 f82f 	bl	8007224 <__malloc_unlock>
 80071c6:	f104 000b 	add.w	r0, r4, #11
 80071ca:	1d23      	adds	r3, r4, #4
 80071cc:	f020 0007 	bic.w	r0, r0, #7
 80071d0:	1ac2      	subs	r2, r0, r3
 80071d2:	bf1c      	itt	ne
 80071d4:	1a1b      	subne	r3, r3, r0
 80071d6:	50a3      	strne	r3, [r4, r2]
 80071d8:	e7af      	b.n	800713a <_malloc_r+0x22>
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	42a3      	cmp	r3, r4
 80071de:	bf0c      	ite	eq
 80071e0:	f8c8 2000 	streq.w	r2, [r8]
 80071e4:	605a      	strne	r2, [r3, #4]
 80071e6:	e7eb      	b.n	80071c0 <_malloc_r+0xa8>
 80071e8:	4623      	mov	r3, r4
 80071ea:	6864      	ldr	r4, [r4, #4]
 80071ec:	e7ae      	b.n	800714c <_malloc_r+0x34>
 80071ee:	463c      	mov	r4, r7
 80071f0:	687f      	ldr	r7, [r7, #4]
 80071f2:	e7b6      	b.n	8007162 <_malloc_r+0x4a>
 80071f4:	461a      	mov	r2, r3
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d1fb      	bne.n	80071f4 <_malloc_r+0xdc>
 80071fc:	2300      	movs	r3, #0
 80071fe:	6053      	str	r3, [r2, #4]
 8007200:	e7de      	b.n	80071c0 <_malloc_r+0xa8>
 8007202:	230c      	movs	r3, #12
 8007204:	4630      	mov	r0, r6
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	f000 f80c 	bl	8007224 <__malloc_unlock>
 800720c:	e794      	b.n	8007138 <_malloc_r+0x20>
 800720e:	6005      	str	r5, [r0, #0]
 8007210:	e7d6      	b.n	80071c0 <_malloc_r+0xa8>
 8007212:	bf00      	nop
 8007214:	20000c54 	.word	0x20000c54

08007218 <__malloc_lock>:
 8007218:	4801      	ldr	r0, [pc, #4]	@ (8007220 <__malloc_lock+0x8>)
 800721a:	f000 bb34 	b.w	8007886 <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	20000d98 	.word	0x20000d98

08007224 <__malloc_unlock>:
 8007224:	4801      	ldr	r0, [pc, #4]	@ (800722c <__malloc_unlock+0x8>)
 8007226:	f000 bb2f 	b.w	8007888 <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	20000d98 	.word	0x20000d98

08007230 <realloc>:
 8007230:	4b02      	ldr	r3, [pc, #8]	@ (800723c <realloc+0xc>)
 8007232:	460a      	mov	r2, r1
 8007234:	4601      	mov	r1, r0
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	f000 b802 	b.w	8007240 <_realloc_r>
 800723c:	2000004c 	.word	0x2000004c

08007240 <_realloc_r>:
 8007240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	4680      	mov	r8, r0
 8007246:	4615      	mov	r5, r2
 8007248:	460c      	mov	r4, r1
 800724a:	b921      	cbnz	r1, 8007256 <_realloc_r+0x16>
 800724c:	4611      	mov	r1, r2
 800724e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007252:	f7ff bf61 	b.w	8007118 <_malloc_r>
 8007256:	b92a      	cbnz	r2, 8007264 <_realloc_r+0x24>
 8007258:	f000 fb26 	bl	80078a8 <_free_r>
 800725c:	2400      	movs	r4, #0
 800725e:	4620      	mov	r0, r4
 8007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007264:	f000 fb68 	bl	8007938 <_malloc_usable_size_r>
 8007268:	4285      	cmp	r5, r0
 800726a:	4606      	mov	r6, r0
 800726c:	d802      	bhi.n	8007274 <_realloc_r+0x34>
 800726e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007272:	d8f4      	bhi.n	800725e <_realloc_r+0x1e>
 8007274:	4629      	mov	r1, r5
 8007276:	4640      	mov	r0, r8
 8007278:	f7ff ff4e 	bl	8007118 <_malloc_r>
 800727c:	4607      	mov	r7, r0
 800727e:	2800      	cmp	r0, #0
 8007280:	d0ec      	beq.n	800725c <_realloc_r+0x1c>
 8007282:	42b5      	cmp	r5, r6
 8007284:	462a      	mov	r2, r5
 8007286:	4621      	mov	r1, r4
 8007288:	bf28      	it	cs
 800728a:	4632      	movcs	r2, r6
 800728c:	f000 fafd 	bl	800788a <memcpy>
 8007290:	4621      	mov	r1, r4
 8007292:	4640      	mov	r0, r8
 8007294:	f000 fb08 	bl	80078a8 <_free_r>
 8007298:	463c      	mov	r4, r7
 800729a:	e7e0      	b.n	800725e <_realloc_r+0x1e>

0800729c <std>:
 800729c:	2300      	movs	r3, #0
 800729e:	b510      	push	{r4, lr}
 80072a0:	4604      	mov	r4, r0
 80072a2:	e9c0 3300 	strd	r3, r3, [r0]
 80072a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072aa:	6083      	str	r3, [r0, #8]
 80072ac:	8181      	strh	r1, [r0, #12]
 80072ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80072b0:	81c2      	strh	r2, [r0, #14]
 80072b2:	6183      	str	r3, [r0, #24]
 80072b4:	4619      	mov	r1, r3
 80072b6:	2208      	movs	r2, #8
 80072b8:	305c      	adds	r0, #92	@ 0x5c
 80072ba:	f000 fa45 	bl	8007748 <memset>
 80072be:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <std+0x58>)
 80072c0:	6224      	str	r4, [r4, #32]
 80072c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80072c4:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <std+0x5c>)
 80072c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072c8:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <std+0x60>)
 80072ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007300 <std+0x64>)
 80072ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80072d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007304 <std+0x68>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d006      	beq.n	80072e4 <std+0x48>
 80072d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072da:	4294      	cmp	r4, r2
 80072dc:	d002      	beq.n	80072e4 <std+0x48>
 80072de:	33d0      	adds	r3, #208	@ 0xd0
 80072e0:	429c      	cmp	r4, r3
 80072e2:	d105      	bne.n	80072f0 <std+0x54>
 80072e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ec:	f000 baca 	b.w	8007884 <__retarget_lock_init_recursive>
 80072f0:	bd10      	pop	{r4, pc}
 80072f2:	bf00      	nop
 80072f4:	08007595 	.word	0x08007595
 80072f8:	080075bb 	.word	0x080075bb
 80072fc:	080075f3 	.word	0x080075f3
 8007300:	08007617 	.word	0x08007617
 8007304:	20000c58 	.word	0x20000c58

08007308 <stdio_exit_handler>:
 8007308:	4a02      	ldr	r2, [pc, #8]	@ (8007314 <stdio_exit_handler+0xc>)
 800730a:	4903      	ldr	r1, [pc, #12]	@ (8007318 <stdio_exit_handler+0x10>)
 800730c:	4803      	ldr	r0, [pc, #12]	@ (800731c <stdio_exit_handler+0x14>)
 800730e:	f000 b869 	b.w	80073e4 <_fwalk_sglue>
 8007312:	bf00      	nop
 8007314:	20000040 	.word	0x20000040
 8007318:	080088c9 	.word	0x080088c9
 800731c:	20000050 	.word	0x20000050

08007320 <cleanup_stdio>:
 8007320:	6841      	ldr	r1, [r0, #4]
 8007322:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <cleanup_stdio+0x34>)
 8007324:	b510      	push	{r4, lr}
 8007326:	4299      	cmp	r1, r3
 8007328:	4604      	mov	r4, r0
 800732a:	d001      	beq.n	8007330 <cleanup_stdio+0x10>
 800732c:	f001 facc 	bl	80088c8 <_fflush_r>
 8007330:	68a1      	ldr	r1, [r4, #8]
 8007332:	4b09      	ldr	r3, [pc, #36]	@ (8007358 <cleanup_stdio+0x38>)
 8007334:	4299      	cmp	r1, r3
 8007336:	d002      	beq.n	800733e <cleanup_stdio+0x1e>
 8007338:	4620      	mov	r0, r4
 800733a:	f001 fac5 	bl	80088c8 <_fflush_r>
 800733e:	68e1      	ldr	r1, [r4, #12]
 8007340:	4b06      	ldr	r3, [pc, #24]	@ (800735c <cleanup_stdio+0x3c>)
 8007342:	4299      	cmp	r1, r3
 8007344:	d004      	beq.n	8007350 <cleanup_stdio+0x30>
 8007346:	4620      	mov	r0, r4
 8007348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800734c:	f001 babc 	b.w	80088c8 <_fflush_r>
 8007350:	bd10      	pop	{r4, pc}
 8007352:	bf00      	nop
 8007354:	20000c58 	.word	0x20000c58
 8007358:	20000cc0 	.word	0x20000cc0
 800735c:	20000d28 	.word	0x20000d28

08007360 <global_stdio_init.part.0>:
 8007360:	b510      	push	{r4, lr}
 8007362:	4b0b      	ldr	r3, [pc, #44]	@ (8007390 <global_stdio_init.part.0+0x30>)
 8007364:	4c0b      	ldr	r4, [pc, #44]	@ (8007394 <global_stdio_init.part.0+0x34>)
 8007366:	4a0c      	ldr	r2, [pc, #48]	@ (8007398 <global_stdio_init.part.0+0x38>)
 8007368:	4620      	mov	r0, r4
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	2104      	movs	r1, #4
 800736e:	2200      	movs	r2, #0
 8007370:	f7ff ff94 	bl	800729c <std>
 8007374:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007378:	2201      	movs	r2, #1
 800737a:	2109      	movs	r1, #9
 800737c:	f7ff ff8e 	bl	800729c <std>
 8007380:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007384:	2202      	movs	r2, #2
 8007386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738a:	2112      	movs	r1, #18
 800738c:	f7ff bf86 	b.w	800729c <std>
 8007390:	20000d90 	.word	0x20000d90
 8007394:	20000c58 	.word	0x20000c58
 8007398:	08007309 	.word	0x08007309

0800739c <__sfp_lock_acquire>:
 800739c:	4801      	ldr	r0, [pc, #4]	@ (80073a4 <__sfp_lock_acquire+0x8>)
 800739e:	f000 ba72 	b.w	8007886 <__retarget_lock_acquire_recursive>
 80073a2:	bf00      	nop
 80073a4:	20000d99 	.word	0x20000d99

080073a8 <__sfp_lock_release>:
 80073a8:	4801      	ldr	r0, [pc, #4]	@ (80073b0 <__sfp_lock_release+0x8>)
 80073aa:	f000 ba6d 	b.w	8007888 <__retarget_lock_release_recursive>
 80073ae:	bf00      	nop
 80073b0:	20000d99 	.word	0x20000d99

080073b4 <__sinit>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	4604      	mov	r4, r0
 80073b8:	f7ff fff0 	bl	800739c <__sfp_lock_acquire>
 80073bc:	6a23      	ldr	r3, [r4, #32]
 80073be:	b11b      	cbz	r3, 80073c8 <__sinit+0x14>
 80073c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c4:	f7ff bff0 	b.w	80073a8 <__sfp_lock_release>
 80073c8:	4b04      	ldr	r3, [pc, #16]	@ (80073dc <__sinit+0x28>)
 80073ca:	6223      	str	r3, [r4, #32]
 80073cc:	4b04      	ldr	r3, [pc, #16]	@ (80073e0 <__sinit+0x2c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f5      	bne.n	80073c0 <__sinit+0xc>
 80073d4:	f7ff ffc4 	bl	8007360 <global_stdio_init.part.0>
 80073d8:	e7f2      	b.n	80073c0 <__sinit+0xc>
 80073da:	bf00      	nop
 80073dc:	08007321 	.word	0x08007321
 80073e0:	20000d90 	.word	0x20000d90

080073e4 <_fwalk_sglue>:
 80073e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e8:	4607      	mov	r7, r0
 80073ea:	4688      	mov	r8, r1
 80073ec:	4614      	mov	r4, r2
 80073ee:	2600      	movs	r6, #0
 80073f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073f4:	f1b9 0901 	subs.w	r9, r9, #1
 80073f8:	d505      	bpl.n	8007406 <_fwalk_sglue+0x22>
 80073fa:	6824      	ldr	r4, [r4, #0]
 80073fc:	2c00      	cmp	r4, #0
 80073fe:	d1f7      	bne.n	80073f0 <_fwalk_sglue+0xc>
 8007400:	4630      	mov	r0, r6
 8007402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d907      	bls.n	800741c <_fwalk_sglue+0x38>
 800740c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007410:	3301      	adds	r3, #1
 8007412:	d003      	beq.n	800741c <_fwalk_sglue+0x38>
 8007414:	4629      	mov	r1, r5
 8007416:	4638      	mov	r0, r7
 8007418:	47c0      	blx	r8
 800741a:	4306      	orrs	r6, r0
 800741c:	3568      	adds	r5, #104	@ 0x68
 800741e:	e7e9      	b.n	80073f4 <_fwalk_sglue+0x10>

08007420 <iprintf>:
 8007420:	b40f      	push	{r0, r1, r2, r3}
 8007422:	b507      	push	{r0, r1, r2, lr}
 8007424:	4906      	ldr	r1, [pc, #24]	@ (8007440 <iprintf+0x20>)
 8007426:	ab04      	add	r3, sp, #16
 8007428:	6808      	ldr	r0, [r1, #0]
 800742a:	f853 2b04 	ldr.w	r2, [r3], #4
 800742e:	6881      	ldr	r1, [r0, #8]
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	f000 fdd3 	bl	8007fdc <_vfiprintf_r>
 8007436:	b003      	add	sp, #12
 8007438:	f85d eb04 	ldr.w	lr, [sp], #4
 800743c:	b004      	add	sp, #16
 800743e:	4770      	bx	lr
 8007440:	2000004c 	.word	0x2000004c

08007444 <_puts_r>:
 8007444:	6a03      	ldr	r3, [r0, #32]
 8007446:	b570      	push	{r4, r5, r6, lr}
 8007448:	4605      	mov	r5, r0
 800744a:	460e      	mov	r6, r1
 800744c:	6884      	ldr	r4, [r0, #8]
 800744e:	b90b      	cbnz	r3, 8007454 <_puts_r+0x10>
 8007450:	f7ff ffb0 	bl	80073b4 <__sinit>
 8007454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007456:	07db      	lsls	r3, r3, #31
 8007458:	d405      	bmi.n	8007466 <_puts_r+0x22>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	0598      	lsls	r0, r3, #22
 800745e:	d402      	bmi.n	8007466 <_puts_r+0x22>
 8007460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007462:	f000 fa10 	bl	8007886 <__retarget_lock_acquire_recursive>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	0719      	lsls	r1, r3, #28
 800746a:	d502      	bpl.n	8007472 <_puts_r+0x2e>
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d135      	bne.n	80074de <_puts_r+0x9a>
 8007472:	4621      	mov	r1, r4
 8007474:	4628      	mov	r0, r5
 8007476:	f000 f911 	bl	800769c <__swsetup_r>
 800747a:	b380      	cbz	r0, 80074de <_puts_r+0x9a>
 800747c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007482:	07da      	lsls	r2, r3, #31
 8007484:	d405      	bmi.n	8007492 <_puts_r+0x4e>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	059b      	lsls	r3, r3, #22
 800748a:	d402      	bmi.n	8007492 <_puts_r+0x4e>
 800748c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800748e:	f000 f9fb 	bl	8007888 <__retarget_lock_release_recursive>
 8007492:	4628      	mov	r0, r5
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	2b00      	cmp	r3, #0
 8007498:	da04      	bge.n	80074a4 <_puts_r+0x60>
 800749a:	69a2      	ldr	r2, [r4, #24]
 800749c:	429a      	cmp	r2, r3
 800749e:	dc17      	bgt.n	80074d0 <_puts_r+0x8c>
 80074a0:	290a      	cmp	r1, #10
 80074a2:	d015      	beq.n	80074d0 <_puts_r+0x8c>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	6022      	str	r2, [r4, #0]
 80074aa:	7019      	strb	r1, [r3, #0]
 80074ac:	68a3      	ldr	r3, [r4, #8]
 80074ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074b2:	3b01      	subs	r3, #1
 80074b4:	60a3      	str	r3, [r4, #8]
 80074b6:	2900      	cmp	r1, #0
 80074b8:	d1ed      	bne.n	8007496 <_puts_r+0x52>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da11      	bge.n	80074e2 <_puts_r+0x9e>
 80074be:	4622      	mov	r2, r4
 80074c0:	210a      	movs	r1, #10
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 f8ab 	bl	800761e <__swbuf_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	d0d7      	beq.n	800747c <_puts_r+0x38>
 80074cc:	250a      	movs	r5, #10
 80074ce:	e7d7      	b.n	8007480 <_puts_r+0x3c>
 80074d0:	4622      	mov	r2, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f8a3 	bl	800761e <__swbuf_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	d1e7      	bne.n	80074ac <_puts_r+0x68>
 80074dc:	e7ce      	b.n	800747c <_puts_r+0x38>
 80074de:	3e01      	subs	r6, #1
 80074e0:	e7e4      	b.n	80074ac <_puts_r+0x68>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	6022      	str	r2, [r4, #0]
 80074e8:	220a      	movs	r2, #10
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	e7ee      	b.n	80074cc <_puts_r+0x88>
	...

080074f0 <puts>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	@ (80074fc <puts+0xc>)
 80074f2:	4601      	mov	r1, r0
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f7ff bfa5 	b.w	8007444 <_puts_r>
 80074fa:	bf00      	nop
 80074fc:	2000004c 	.word	0x2000004c

08007500 <siprintf>:
 8007500:	b40e      	push	{r1, r2, r3}
 8007502:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007506:	b500      	push	{lr}
 8007508:	b09c      	sub	sp, #112	@ 0x70
 800750a:	ab1d      	add	r3, sp, #116	@ 0x74
 800750c:	9002      	str	r0, [sp, #8]
 800750e:	9006      	str	r0, [sp, #24]
 8007510:	9107      	str	r1, [sp, #28]
 8007512:	9104      	str	r1, [sp, #16]
 8007514:	4808      	ldr	r0, [pc, #32]	@ (8007538 <siprintf+0x38>)
 8007516:	4909      	ldr	r1, [pc, #36]	@ (800753c <siprintf+0x3c>)
 8007518:	f853 2b04 	ldr.w	r2, [r3], #4
 800751c:	9105      	str	r1, [sp, #20]
 800751e:	6800      	ldr	r0, [r0, #0]
 8007520:	a902      	add	r1, sp, #8
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	f000 fa6c 	bl	8007a00 <_svfiprintf_r>
 8007528:	2200      	movs	r2, #0
 800752a:	9b02      	ldr	r3, [sp, #8]
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	b01c      	add	sp, #112	@ 0x70
 8007530:	f85d eb04 	ldr.w	lr, [sp], #4
 8007534:	b003      	add	sp, #12
 8007536:	4770      	bx	lr
 8007538:	2000004c 	.word	0x2000004c
 800753c:	ffff0208 	.word	0xffff0208

08007540 <siscanf>:
 8007540:	b40e      	push	{r1, r2, r3}
 8007542:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007546:	b530      	push	{r4, r5, lr}
 8007548:	b09c      	sub	sp, #112	@ 0x70
 800754a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800754c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007550:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007554:	9002      	str	r0, [sp, #8]
 8007556:	9006      	str	r0, [sp, #24]
 8007558:	f7f8 fe66 	bl	8000228 <strlen>
 800755c:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <siscanf+0x4c>)
 800755e:	9003      	str	r0, [sp, #12]
 8007560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007562:	2300      	movs	r3, #0
 8007564:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007566:	9314      	str	r3, [sp, #80]	@ 0x50
 8007568:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800756c:	9007      	str	r0, [sp, #28]
 800756e:	4808      	ldr	r0, [pc, #32]	@ (8007590 <siscanf+0x50>)
 8007570:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007574:	462a      	mov	r2, r5
 8007576:	4623      	mov	r3, r4
 8007578:	a902      	add	r1, sp, #8
 800757a:	6800      	ldr	r0, [r0, #0]
 800757c:	9401      	str	r4, [sp, #4]
 800757e:	f000 fb93 	bl	8007ca8 <__ssvfiscanf_r>
 8007582:	b01c      	add	sp, #112	@ 0x70
 8007584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007588:	b003      	add	sp, #12
 800758a:	4770      	bx	lr
 800758c:	080075b7 	.word	0x080075b7
 8007590:	2000004c 	.word	0x2000004c

08007594 <__sread>:
 8007594:	b510      	push	{r4, lr}
 8007596:	460c      	mov	r4, r1
 8007598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759c:	f000 f914 	bl	80077c8 <_read_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	bfab      	itete	ge
 80075a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075a6:	89a3      	ldrhlt	r3, [r4, #12]
 80075a8:	181b      	addge	r3, r3, r0
 80075aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075ae:	bfac      	ite	ge
 80075b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075b2:	81a3      	strhlt	r3, [r4, #12]
 80075b4:	bd10      	pop	{r4, pc}

080075b6 <__seofread>:
 80075b6:	2000      	movs	r0, #0
 80075b8:	4770      	bx	lr

080075ba <__swrite>:
 80075ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	461f      	mov	r7, r3
 80075c0:	898b      	ldrh	r3, [r1, #12]
 80075c2:	4605      	mov	r5, r0
 80075c4:	05db      	lsls	r3, r3, #23
 80075c6:	460c      	mov	r4, r1
 80075c8:	4616      	mov	r6, r2
 80075ca:	d505      	bpl.n	80075d8 <__swrite+0x1e>
 80075cc:	2302      	movs	r3, #2
 80075ce:	2200      	movs	r2, #0
 80075d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d4:	f000 f8e6 	bl	80077a4 <_lseek_r>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	4632      	mov	r2, r6
 80075dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075e0:	81a3      	strh	r3, [r4, #12]
 80075e2:	4628      	mov	r0, r5
 80075e4:	463b      	mov	r3, r7
 80075e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ee:	f000 b90d 	b.w	800780c <_write_r>

080075f2 <__sseek>:
 80075f2:	b510      	push	{r4, lr}
 80075f4:	460c      	mov	r4, r1
 80075f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fa:	f000 f8d3 	bl	80077a4 <_lseek_r>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	bf15      	itete	ne
 8007604:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007606:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800760a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800760e:	81a3      	strheq	r3, [r4, #12]
 8007610:	bf18      	it	ne
 8007612:	81a3      	strhne	r3, [r4, #12]
 8007614:	bd10      	pop	{r4, pc}

08007616 <__sclose>:
 8007616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761a:	f000 b8b3 	b.w	8007784 <_close_r>

0800761e <__swbuf_r>:
 800761e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007620:	460e      	mov	r6, r1
 8007622:	4614      	mov	r4, r2
 8007624:	4605      	mov	r5, r0
 8007626:	b118      	cbz	r0, 8007630 <__swbuf_r+0x12>
 8007628:	6a03      	ldr	r3, [r0, #32]
 800762a:	b90b      	cbnz	r3, 8007630 <__swbuf_r+0x12>
 800762c:	f7ff fec2 	bl	80073b4 <__sinit>
 8007630:	69a3      	ldr	r3, [r4, #24]
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	071a      	lsls	r2, r3, #28
 8007638:	d501      	bpl.n	800763e <__swbuf_r+0x20>
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	b943      	cbnz	r3, 8007650 <__swbuf_r+0x32>
 800763e:	4621      	mov	r1, r4
 8007640:	4628      	mov	r0, r5
 8007642:	f000 f82b 	bl	800769c <__swsetup_r>
 8007646:	b118      	cbz	r0, 8007650 <__swbuf_r+0x32>
 8007648:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800764c:	4638      	mov	r0, r7
 800764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	6922      	ldr	r2, [r4, #16]
 8007654:	b2f6      	uxtb	r6, r6
 8007656:	1a98      	subs	r0, r3, r2
 8007658:	6963      	ldr	r3, [r4, #20]
 800765a:	4637      	mov	r7, r6
 800765c:	4283      	cmp	r3, r0
 800765e:	dc05      	bgt.n	800766c <__swbuf_r+0x4e>
 8007660:	4621      	mov	r1, r4
 8007662:	4628      	mov	r0, r5
 8007664:	f001 f930 	bl	80088c8 <_fflush_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	d1ed      	bne.n	8007648 <__swbuf_r+0x2a>
 800766c:	68a3      	ldr	r3, [r4, #8]
 800766e:	3b01      	subs	r3, #1
 8007670:	60a3      	str	r3, [r4, #8]
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	6022      	str	r2, [r4, #0]
 8007678:	701e      	strb	r6, [r3, #0]
 800767a:	6962      	ldr	r2, [r4, #20]
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	429a      	cmp	r2, r3
 8007680:	d004      	beq.n	800768c <__swbuf_r+0x6e>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	07db      	lsls	r3, r3, #31
 8007686:	d5e1      	bpl.n	800764c <__swbuf_r+0x2e>
 8007688:	2e0a      	cmp	r6, #10
 800768a:	d1df      	bne.n	800764c <__swbuf_r+0x2e>
 800768c:	4621      	mov	r1, r4
 800768e:	4628      	mov	r0, r5
 8007690:	f001 f91a 	bl	80088c8 <_fflush_r>
 8007694:	2800      	cmp	r0, #0
 8007696:	d0d9      	beq.n	800764c <__swbuf_r+0x2e>
 8007698:	e7d6      	b.n	8007648 <__swbuf_r+0x2a>
	...

0800769c <__swsetup_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4b29      	ldr	r3, [pc, #164]	@ (8007744 <__swsetup_r+0xa8>)
 80076a0:	4605      	mov	r5, r0
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	460c      	mov	r4, r1
 80076a6:	b118      	cbz	r0, 80076b0 <__swsetup_r+0x14>
 80076a8:	6a03      	ldr	r3, [r0, #32]
 80076aa:	b90b      	cbnz	r3, 80076b0 <__swsetup_r+0x14>
 80076ac:	f7ff fe82 	bl	80073b4 <__sinit>
 80076b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b4:	0719      	lsls	r1, r3, #28
 80076b6:	d422      	bmi.n	80076fe <__swsetup_r+0x62>
 80076b8:	06da      	lsls	r2, r3, #27
 80076ba:	d407      	bmi.n	80076cc <__swsetup_r+0x30>
 80076bc:	2209      	movs	r2, #9
 80076be:	602a      	str	r2, [r5, #0]
 80076c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	e033      	b.n	8007734 <__swsetup_r+0x98>
 80076cc:	0758      	lsls	r0, r3, #29
 80076ce:	d512      	bpl.n	80076f6 <__swsetup_r+0x5a>
 80076d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076d2:	b141      	cbz	r1, 80076e6 <__swsetup_r+0x4a>
 80076d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076d8:	4299      	cmp	r1, r3
 80076da:	d002      	beq.n	80076e2 <__swsetup_r+0x46>
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 f8e3 	bl	80078a8 <_free_r>
 80076e2:	2300      	movs	r3, #0
 80076e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6063      	str	r3, [r4, #4]
 80076f2:	6923      	ldr	r3, [r4, #16]
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f043 0308 	orr.w	r3, r3, #8
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	b94b      	cbnz	r3, 8007716 <__swsetup_r+0x7a>
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800770c:	d003      	beq.n	8007716 <__swsetup_r+0x7a>
 800770e:	4621      	mov	r1, r4
 8007710:	4628      	mov	r0, r5
 8007712:	f001 f926 	bl	8008962 <__smakebuf_r>
 8007716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771a:	f013 0201 	ands.w	r2, r3, #1
 800771e:	d00a      	beq.n	8007736 <__swsetup_r+0x9a>
 8007720:	2200      	movs	r2, #0
 8007722:	60a2      	str	r2, [r4, #8]
 8007724:	6962      	ldr	r2, [r4, #20]
 8007726:	4252      	negs	r2, r2
 8007728:	61a2      	str	r2, [r4, #24]
 800772a:	6922      	ldr	r2, [r4, #16]
 800772c:	b942      	cbnz	r2, 8007740 <__swsetup_r+0xa4>
 800772e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007732:	d1c5      	bne.n	80076c0 <__swsetup_r+0x24>
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	0799      	lsls	r1, r3, #30
 8007738:	bf58      	it	pl
 800773a:	6962      	ldrpl	r2, [r4, #20]
 800773c:	60a2      	str	r2, [r4, #8]
 800773e:	e7f4      	b.n	800772a <__swsetup_r+0x8e>
 8007740:	2000      	movs	r0, #0
 8007742:	e7f7      	b.n	8007734 <__swsetup_r+0x98>
 8007744:	2000004c 	.word	0x2000004c

08007748 <memset>:
 8007748:	4603      	mov	r3, r0
 800774a:	4402      	add	r2, r0
 800774c:	4293      	cmp	r3, r2
 800774e:	d100      	bne.n	8007752 <memset+0xa>
 8007750:	4770      	bx	lr
 8007752:	f803 1b01 	strb.w	r1, [r3], #1
 8007756:	e7f9      	b.n	800774c <memset+0x4>

08007758 <strstr>:
 8007758:	780a      	ldrb	r2, [r1, #0]
 800775a:	b570      	push	{r4, r5, r6, lr}
 800775c:	b96a      	cbnz	r2, 800777a <strstr+0x22>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	429a      	cmp	r2, r3
 8007762:	d109      	bne.n	8007778 <strstr+0x20>
 8007764:	460c      	mov	r4, r1
 8007766:	4605      	mov	r5, r0
 8007768:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0f6      	beq.n	800775e <strstr+0x6>
 8007770:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007774:	429e      	cmp	r6, r3
 8007776:	d0f7      	beq.n	8007768 <strstr+0x10>
 8007778:	3001      	adds	r0, #1
 800777a:	7803      	ldrb	r3, [r0, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1ef      	bne.n	8007760 <strstr+0x8>
 8007780:	4618      	mov	r0, r3
 8007782:	e7ec      	b.n	800775e <strstr+0x6>

08007784 <_close_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	2300      	movs	r3, #0
 8007788:	4d05      	ldr	r5, [pc, #20]	@ (80077a0 <_close_r+0x1c>)
 800778a:	4604      	mov	r4, r0
 800778c:	4608      	mov	r0, r1
 800778e:	602b      	str	r3, [r5, #0]
 8007790:	f7fc f9e7 	bl	8003b62 <_close>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_close_r+0x1a>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_close_r+0x1a>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	20000d94 	.word	0x20000d94

080077a4 <_lseek_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4604      	mov	r4, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	2200      	movs	r2, #0
 80077ae:	4d05      	ldr	r5, [pc, #20]	@ (80077c4 <_lseek_r+0x20>)
 80077b0:	602a      	str	r2, [r5, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f7fc f9f9 	bl	8003baa <_lseek>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d102      	bne.n	80077c2 <_lseek_r+0x1e>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	b103      	cbz	r3, 80077c2 <_lseek_r+0x1e>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	20000d94 	.word	0x20000d94

080077c8 <_read_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	2200      	movs	r2, #0
 80077d2:	4d05      	ldr	r5, [pc, #20]	@ (80077e8 <_read_r+0x20>)
 80077d4:	602a      	str	r2, [r5, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f7fc f9a6 	bl	8003b28 <_read>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_read_r+0x1e>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_read_r+0x1e>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20000d94 	.word	0x20000d94

080077ec <_sbrk_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	2300      	movs	r3, #0
 80077f0:	4d05      	ldr	r5, [pc, #20]	@ (8007808 <_sbrk_r+0x1c>)
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	f7fc f9e4 	bl	8003bc4 <_sbrk>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_sbrk_r+0x1a>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_sbrk_r+0x1a>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	20000d94 	.word	0x20000d94

0800780c <_write_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	4611      	mov	r1, r2
 8007814:	2200      	movs	r2, #0
 8007816:	4d05      	ldr	r5, [pc, #20]	@ (800782c <_write_r+0x20>)
 8007818:	602a      	str	r2, [r5, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	f7fb fc40 	bl	80030a0 <_write>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_write_r+0x1e>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_write_r+0x1e>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20000d94 	.word	0x20000d94

08007830 <__errno>:
 8007830:	4b01      	ldr	r3, [pc, #4]	@ (8007838 <__errno+0x8>)
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	2000004c 	.word	0x2000004c

0800783c <__libc_init_array>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	2600      	movs	r6, #0
 8007840:	4d0c      	ldr	r5, [pc, #48]	@ (8007874 <__libc_init_array+0x38>)
 8007842:	4c0d      	ldr	r4, [pc, #52]	@ (8007878 <__libc_init_array+0x3c>)
 8007844:	1b64      	subs	r4, r4, r5
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	42a6      	cmp	r6, r4
 800784a:	d109      	bne.n	8007860 <__libc_init_array+0x24>
 800784c:	f001 fa6c 	bl	8008d28 <_init>
 8007850:	2600      	movs	r6, #0
 8007852:	4d0a      	ldr	r5, [pc, #40]	@ (800787c <__libc_init_array+0x40>)
 8007854:	4c0a      	ldr	r4, [pc, #40]	@ (8007880 <__libc_init_array+0x44>)
 8007856:	1b64      	subs	r4, r4, r5
 8007858:	10a4      	asrs	r4, r4, #2
 800785a:	42a6      	cmp	r6, r4
 800785c:	d105      	bne.n	800786a <__libc_init_array+0x2e>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	f855 3b04 	ldr.w	r3, [r5], #4
 8007864:	4798      	blx	r3
 8007866:	3601      	adds	r6, #1
 8007868:	e7ee      	b.n	8007848 <__libc_init_array+0xc>
 800786a:	f855 3b04 	ldr.w	r3, [r5], #4
 800786e:	4798      	blx	r3
 8007870:	3601      	adds	r6, #1
 8007872:	e7f2      	b.n	800785a <__libc_init_array+0x1e>
 8007874:	08009ba8 	.word	0x08009ba8
 8007878:	08009ba8 	.word	0x08009ba8
 800787c:	08009ba8 	.word	0x08009ba8
 8007880:	08009bac 	.word	0x08009bac

08007884 <__retarget_lock_init_recursive>:
 8007884:	4770      	bx	lr

08007886 <__retarget_lock_acquire_recursive>:
 8007886:	4770      	bx	lr

08007888 <__retarget_lock_release_recursive>:
 8007888:	4770      	bx	lr

0800788a <memcpy>:
 800788a:	440a      	add	r2, r1
 800788c:	4291      	cmp	r1, r2
 800788e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007892:	d100      	bne.n	8007896 <memcpy+0xc>
 8007894:	4770      	bx	lr
 8007896:	b510      	push	{r4, lr}
 8007898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800789c:	4291      	cmp	r1, r2
 800789e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078a2:	d1f9      	bne.n	8007898 <memcpy+0xe>
 80078a4:	bd10      	pop	{r4, pc}
	...

080078a8 <_free_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4605      	mov	r5, r0
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d040      	beq.n	8007932 <_free_r+0x8a>
 80078b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b4:	1f0c      	subs	r4, r1, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bfb8      	it	lt
 80078ba:	18e4      	addlt	r4, r4, r3
 80078bc:	f7ff fcac 	bl	8007218 <__malloc_lock>
 80078c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007934 <_free_r+0x8c>)
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	b933      	cbnz	r3, 80078d4 <_free_r+0x2c>
 80078c6:	6063      	str	r3, [r4, #4]
 80078c8:	6014      	str	r4, [r2, #0]
 80078ca:	4628      	mov	r0, r5
 80078cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d0:	f7ff bca8 	b.w	8007224 <__malloc_unlock>
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	d908      	bls.n	80078ea <_free_r+0x42>
 80078d8:	6820      	ldr	r0, [r4, #0]
 80078da:	1821      	adds	r1, r4, r0
 80078dc:	428b      	cmp	r3, r1
 80078de:	bf01      	itttt	eq
 80078e0:	6819      	ldreq	r1, [r3, #0]
 80078e2:	685b      	ldreq	r3, [r3, #4]
 80078e4:	1809      	addeq	r1, r1, r0
 80078e6:	6021      	streq	r1, [r4, #0]
 80078e8:	e7ed      	b.n	80078c6 <_free_r+0x1e>
 80078ea:	461a      	mov	r2, r3
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	b10b      	cbz	r3, 80078f4 <_free_r+0x4c>
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	d9fa      	bls.n	80078ea <_free_r+0x42>
 80078f4:	6811      	ldr	r1, [r2, #0]
 80078f6:	1850      	adds	r0, r2, r1
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d10b      	bne.n	8007914 <_free_r+0x6c>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	4401      	add	r1, r0
 8007900:	1850      	adds	r0, r2, r1
 8007902:	4283      	cmp	r3, r0
 8007904:	6011      	str	r1, [r2, #0]
 8007906:	d1e0      	bne.n	80078ca <_free_r+0x22>
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	4408      	add	r0, r1
 800790e:	6010      	str	r0, [r2, #0]
 8007910:	6053      	str	r3, [r2, #4]
 8007912:	e7da      	b.n	80078ca <_free_r+0x22>
 8007914:	d902      	bls.n	800791c <_free_r+0x74>
 8007916:	230c      	movs	r3, #12
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	e7d6      	b.n	80078ca <_free_r+0x22>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	1821      	adds	r1, r4, r0
 8007920:	428b      	cmp	r3, r1
 8007922:	bf01      	itttt	eq
 8007924:	6819      	ldreq	r1, [r3, #0]
 8007926:	685b      	ldreq	r3, [r3, #4]
 8007928:	1809      	addeq	r1, r1, r0
 800792a:	6021      	streq	r1, [r4, #0]
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	6054      	str	r4, [r2, #4]
 8007930:	e7cb      	b.n	80078ca <_free_r+0x22>
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20000c54 	.word	0x20000c54

08007938 <_malloc_usable_size_r>:
 8007938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800793c:	1f18      	subs	r0, r3, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	bfbc      	itt	lt
 8007942:	580b      	ldrlt	r3, [r1, r0]
 8007944:	18c0      	addlt	r0, r0, r3
 8007946:	4770      	bx	lr

08007948 <__ssputs_r>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	461f      	mov	r7, r3
 800794e:	688e      	ldr	r6, [r1, #8]
 8007950:	4682      	mov	sl, r0
 8007952:	42be      	cmp	r6, r7
 8007954:	460c      	mov	r4, r1
 8007956:	4690      	mov	r8, r2
 8007958:	680b      	ldr	r3, [r1, #0]
 800795a:	d82d      	bhi.n	80079b8 <__ssputs_r+0x70>
 800795c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007960:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007964:	d026      	beq.n	80079b4 <__ssputs_r+0x6c>
 8007966:	6965      	ldr	r5, [r4, #20]
 8007968:	6909      	ldr	r1, [r1, #16]
 800796a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800796e:	eba3 0901 	sub.w	r9, r3, r1
 8007972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007976:	1c7b      	adds	r3, r7, #1
 8007978:	444b      	add	r3, r9
 800797a:	106d      	asrs	r5, r5, #1
 800797c:	429d      	cmp	r5, r3
 800797e:	bf38      	it	cc
 8007980:	461d      	movcc	r5, r3
 8007982:	0553      	lsls	r3, r2, #21
 8007984:	d527      	bpl.n	80079d6 <__ssputs_r+0x8e>
 8007986:	4629      	mov	r1, r5
 8007988:	f7ff fbc6 	bl	8007118 <_malloc_r>
 800798c:	4606      	mov	r6, r0
 800798e:	b360      	cbz	r0, 80079ea <__ssputs_r+0xa2>
 8007990:	464a      	mov	r2, r9
 8007992:	6921      	ldr	r1, [r4, #16]
 8007994:	f7ff ff79 	bl	800788a <memcpy>
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800799e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	6126      	str	r6, [r4, #16]
 80079a6:	444e      	add	r6, r9
 80079a8:	6026      	str	r6, [r4, #0]
 80079aa:	463e      	mov	r6, r7
 80079ac:	6165      	str	r5, [r4, #20]
 80079ae:	eba5 0509 	sub.w	r5, r5, r9
 80079b2:	60a5      	str	r5, [r4, #8]
 80079b4:	42be      	cmp	r6, r7
 80079b6:	d900      	bls.n	80079ba <__ssputs_r+0x72>
 80079b8:	463e      	mov	r6, r7
 80079ba:	4632      	mov	r2, r6
 80079bc:	4641      	mov	r1, r8
 80079be:	6820      	ldr	r0, [r4, #0]
 80079c0:	f001 f87c 	bl	8008abc <memmove>
 80079c4:	2000      	movs	r0, #0
 80079c6:	68a3      	ldr	r3, [r4, #8]
 80079c8:	1b9b      	subs	r3, r3, r6
 80079ca:	60a3      	str	r3, [r4, #8]
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	4433      	add	r3, r6
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d6:	462a      	mov	r2, r5
 80079d8:	f7ff fc32 	bl	8007240 <_realloc_r>
 80079dc:	4606      	mov	r6, r0
 80079de:	2800      	cmp	r0, #0
 80079e0:	d1e0      	bne.n	80079a4 <__ssputs_r+0x5c>
 80079e2:	4650      	mov	r0, sl
 80079e4:	6921      	ldr	r1, [r4, #16]
 80079e6:	f7ff ff5f 	bl	80078a8 <_free_r>
 80079ea:	230c      	movs	r3, #12
 80079ec:	f8ca 3000 	str.w	r3, [sl]
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	e7e9      	b.n	80079d2 <__ssputs_r+0x8a>
	...

08007a00 <_svfiprintf_r>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	4698      	mov	r8, r3
 8007a06:	898b      	ldrh	r3, [r1, #12]
 8007a08:	4607      	mov	r7, r0
 8007a0a:	061b      	lsls	r3, r3, #24
 8007a0c:	460d      	mov	r5, r1
 8007a0e:	4614      	mov	r4, r2
 8007a10:	b09d      	sub	sp, #116	@ 0x74
 8007a12:	d510      	bpl.n	8007a36 <_svfiprintf_r+0x36>
 8007a14:	690b      	ldr	r3, [r1, #16]
 8007a16:	b973      	cbnz	r3, 8007a36 <_svfiprintf_r+0x36>
 8007a18:	2140      	movs	r1, #64	@ 0x40
 8007a1a:	f7ff fb7d 	bl	8007118 <_malloc_r>
 8007a1e:	6028      	str	r0, [r5, #0]
 8007a20:	6128      	str	r0, [r5, #16]
 8007a22:	b930      	cbnz	r0, 8007a32 <_svfiprintf_r+0x32>
 8007a24:	230c      	movs	r3, #12
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a2c:	b01d      	add	sp, #116	@ 0x74
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a32:	2340      	movs	r3, #64	@ 0x40
 8007a34:	616b      	str	r3, [r5, #20]
 8007a36:	2300      	movs	r3, #0
 8007a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3a:	2320      	movs	r3, #32
 8007a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a40:	2330      	movs	r3, #48	@ 0x30
 8007a42:	f04f 0901 	mov.w	r9, #1
 8007a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a4a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007be4 <_svfiprintf_r+0x1e4>
 8007a4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a52:	4623      	mov	r3, r4
 8007a54:	469a      	mov	sl, r3
 8007a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a5a:	b10a      	cbz	r2, 8007a60 <_svfiprintf_r+0x60>
 8007a5c:	2a25      	cmp	r2, #37	@ 0x25
 8007a5e:	d1f9      	bne.n	8007a54 <_svfiprintf_r+0x54>
 8007a60:	ebba 0b04 	subs.w	fp, sl, r4
 8007a64:	d00b      	beq.n	8007a7e <_svfiprintf_r+0x7e>
 8007a66:	465b      	mov	r3, fp
 8007a68:	4622      	mov	r2, r4
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff ff6b 	bl	8007948 <__ssputs_r>
 8007a72:	3001      	adds	r0, #1
 8007a74:	f000 80a7 	beq.w	8007bc6 <_svfiprintf_r+0x1c6>
 8007a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a7a:	445a      	add	r2, fp
 8007a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 809f 	beq.w	8007bc6 <_svfiprintf_r+0x1c6>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a92:	f10a 0a01 	add.w	sl, sl, #1
 8007a96:	9304      	str	r3, [sp, #16]
 8007a98:	9307      	str	r3, [sp, #28]
 8007a9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa0:	4654      	mov	r4, sl
 8007aa2:	2205      	movs	r2, #5
 8007aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa8:	484e      	ldr	r0, [pc, #312]	@ (8007be4 <_svfiprintf_r+0x1e4>)
 8007aaa:	f001 f843 	bl	8008b34 <memchr>
 8007aae:	9a04      	ldr	r2, [sp, #16]
 8007ab0:	b9d8      	cbnz	r0, 8007aea <_svfiprintf_r+0xea>
 8007ab2:	06d0      	lsls	r0, r2, #27
 8007ab4:	bf44      	itt	mi
 8007ab6:	2320      	movmi	r3, #32
 8007ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007abc:	0711      	lsls	r1, r2, #28
 8007abe:	bf44      	itt	mi
 8007ac0:	232b      	movmi	r3, #43	@ 0x2b
 8007ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8007acc:	d015      	beq.n	8007afa <_svfiprintf_r+0xfa>
 8007ace:	4654      	mov	r4, sl
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f04f 0c0a 	mov.w	ip, #10
 8007ad6:	9a07      	ldr	r2, [sp, #28]
 8007ad8:	4621      	mov	r1, r4
 8007ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ade:	3b30      	subs	r3, #48	@ 0x30
 8007ae0:	2b09      	cmp	r3, #9
 8007ae2:	d94b      	bls.n	8007b7c <_svfiprintf_r+0x17c>
 8007ae4:	b1b0      	cbz	r0, 8007b14 <_svfiprintf_r+0x114>
 8007ae6:	9207      	str	r2, [sp, #28]
 8007ae8:	e014      	b.n	8007b14 <_svfiprintf_r+0x114>
 8007aea:	eba0 0308 	sub.w	r3, r0, r8
 8007aee:	fa09 f303 	lsl.w	r3, r9, r3
 8007af2:	4313      	orrs	r3, r2
 8007af4:	46a2      	mov	sl, r4
 8007af6:	9304      	str	r3, [sp, #16]
 8007af8:	e7d2      	b.n	8007aa0 <_svfiprintf_r+0xa0>
 8007afa:	9b03      	ldr	r3, [sp, #12]
 8007afc:	1d19      	adds	r1, r3, #4
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	9103      	str	r1, [sp, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bfbb      	ittet	lt
 8007b06:	425b      	neglt	r3, r3
 8007b08:	f042 0202 	orrlt.w	r2, r2, #2
 8007b0c:	9307      	strge	r3, [sp, #28]
 8007b0e:	9307      	strlt	r3, [sp, #28]
 8007b10:	bfb8      	it	lt
 8007b12:	9204      	strlt	r2, [sp, #16]
 8007b14:	7823      	ldrb	r3, [r4, #0]
 8007b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b18:	d10a      	bne.n	8007b30 <_svfiprintf_r+0x130>
 8007b1a:	7863      	ldrb	r3, [r4, #1]
 8007b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b1e:	d132      	bne.n	8007b86 <_svfiprintf_r+0x186>
 8007b20:	9b03      	ldr	r3, [sp, #12]
 8007b22:	3402      	adds	r4, #2
 8007b24:	1d1a      	adds	r2, r3, #4
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	9203      	str	r2, [sp, #12]
 8007b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b2e:	9305      	str	r3, [sp, #20]
 8007b30:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007be8 <_svfiprintf_r+0x1e8>
 8007b34:	2203      	movs	r2, #3
 8007b36:	4650      	mov	r0, sl
 8007b38:	7821      	ldrb	r1, [r4, #0]
 8007b3a:	f000 fffb 	bl	8008b34 <memchr>
 8007b3e:	b138      	cbz	r0, 8007b50 <_svfiprintf_r+0x150>
 8007b40:	2240      	movs	r2, #64	@ 0x40
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	eba0 000a 	sub.w	r0, r0, sl
 8007b48:	4082      	lsls	r2, r0
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	3401      	adds	r4, #1
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b54:	2206      	movs	r2, #6
 8007b56:	4825      	ldr	r0, [pc, #148]	@ (8007bec <_svfiprintf_r+0x1ec>)
 8007b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b5c:	f000 ffea 	bl	8008b34 <memchr>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d036      	beq.n	8007bd2 <_svfiprintf_r+0x1d2>
 8007b64:	4b22      	ldr	r3, [pc, #136]	@ (8007bf0 <_svfiprintf_r+0x1f0>)
 8007b66:	bb1b      	cbnz	r3, 8007bb0 <_svfiprintf_r+0x1b0>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	3307      	adds	r3, #7
 8007b6c:	f023 0307 	bic.w	r3, r3, #7
 8007b70:	3308      	adds	r3, #8
 8007b72:	9303      	str	r3, [sp, #12]
 8007b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b76:	4433      	add	r3, r6
 8007b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b7a:	e76a      	b.n	8007a52 <_svfiprintf_r+0x52>
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	2001      	movs	r0, #1
 8007b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b84:	e7a8      	b.n	8007ad8 <_svfiprintf_r+0xd8>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f04f 0c0a 	mov.w	ip, #10
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	3401      	adds	r4, #1
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	4620      	mov	r0, r4
 8007b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b98:	3a30      	subs	r2, #48	@ 0x30
 8007b9a:	2a09      	cmp	r2, #9
 8007b9c:	d903      	bls.n	8007ba6 <_svfiprintf_r+0x1a6>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0c6      	beq.n	8007b30 <_svfiprintf_r+0x130>
 8007ba2:	9105      	str	r1, [sp, #20]
 8007ba4:	e7c4      	b.n	8007b30 <_svfiprintf_r+0x130>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	2301      	movs	r3, #1
 8007baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bae:	e7f0      	b.n	8007b92 <_svfiprintf_r+0x192>
 8007bb0:	ab03      	add	r3, sp, #12
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf4 <_svfiprintf_r+0x1f4>)
 8007bba:	a904      	add	r1, sp, #16
 8007bbc:	f3af 8000 	nop.w
 8007bc0:	1c42      	adds	r2, r0, #1
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	d1d6      	bne.n	8007b74 <_svfiprintf_r+0x174>
 8007bc6:	89ab      	ldrh	r3, [r5, #12]
 8007bc8:	065b      	lsls	r3, r3, #25
 8007bca:	f53f af2d 	bmi.w	8007a28 <_svfiprintf_r+0x28>
 8007bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bd0:	e72c      	b.n	8007a2c <_svfiprintf_r+0x2c>
 8007bd2:	ab03      	add	r3, sp, #12
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	4638      	mov	r0, r7
 8007bda:	4b06      	ldr	r3, [pc, #24]	@ (8007bf4 <_svfiprintf_r+0x1f4>)
 8007bdc:	a904      	add	r1, sp, #16
 8007bde:	f000 fb87 	bl	80082f0 <_printf_i>
 8007be2:	e7ed      	b.n	8007bc0 <_svfiprintf_r+0x1c0>
 8007be4:	08009b4f 	.word	0x08009b4f
 8007be8:	08009b55 	.word	0x08009b55
 8007bec:	08009b59 	.word	0x08009b59
 8007bf0:	00000000 	.word	0x00000000
 8007bf4:	08007949 	.word	0x08007949

08007bf8 <_sungetc_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	1c4b      	adds	r3, r1, #1
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	d103      	bne.n	8007c08 <_sungetc_r+0x10>
 8007c00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007c04:	4628      	mov	r0, r5
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	8993      	ldrh	r3, [r2, #12]
 8007c0a:	b2cd      	uxtb	r5, r1
 8007c0c:	f023 0320 	bic.w	r3, r3, #32
 8007c10:	8193      	strh	r3, [r2, #12]
 8007c12:	6853      	ldr	r3, [r2, #4]
 8007c14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007c16:	b18a      	cbz	r2, 8007c3c <_sungetc_r+0x44>
 8007c18:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	dd08      	ble.n	8007c30 <_sungetc_r+0x38>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	1e5a      	subs	r2, r3, #1
 8007c22:	6022      	str	r2, [r4, #0]
 8007c24:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007c28:	6863      	ldr	r3, [r4, #4]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	6063      	str	r3, [r4, #4]
 8007c2e:	e7e9      	b.n	8007c04 <_sungetc_r+0xc>
 8007c30:	4621      	mov	r1, r4
 8007c32:	f000 ff0b 	bl	8008a4c <__submore>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0f1      	beq.n	8007c1e <_sungetc_r+0x26>
 8007c3a:	e7e1      	b.n	8007c00 <_sungetc_r+0x8>
 8007c3c:	6921      	ldr	r1, [r4, #16]
 8007c3e:	6822      	ldr	r2, [r4, #0]
 8007c40:	b141      	cbz	r1, 8007c54 <_sungetc_r+0x5c>
 8007c42:	4291      	cmp	r1, r2
 8007c44:	d206      	bcs.n	8007c54 <_sungetc_r+0x5c>
 8007c46:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007c4a:	42a9      	cmp	r1, r5
 8007c4c:	d102      	bne.n	8007c54 <_sungetc_r+0x5c>
 8007c4e:	3a01      	subs	r2, #1
 8007c50:	6022      	str	r2, [r4, #0]
 8007c52:	e7ea      	b.n	8007c2a <_sungetc_r+0x32>
 8007c54:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c5e:	2303      	movs	r3, #3
 8007c60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007c62:	4623      	mov	r3, r4
 8007c64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e7de      	b.n	8007c2c <_sungetc_r+0x34>

08007c6e <__ssrefill_r>:
 8007c6e:	b510      	push	{r4, lr}
 8007c70:	460c      	mov	r4, r1
 8007c72:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007c74:	b169      	cbz	r1, 8007c92 <__ssrefill_r+0x24>
 8007c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	d001      	beq.n	8007c82 <__ssrefill_r+0x14>
 8007c7e:	f7ff fe13 	bl	80078a8 <_free_r>
 8007c82:	2000      	movs	r0, #0
 8007c84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c86:	6360      	str	r0, [r4, #52]	@ 0x34
 8007c88:	6063      	str	r3, [r4, #4]
 8007c8a:	b113      	cbz	r3, 8007c92 <__ssrefill_r+0x24>
 8007c8c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007c8e:	6023      	str	r3, [r4, #0]
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	f043 0320 	orr.w	r3, r3, #32
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	e7f3      	b.n	8007c90 <__ssrefill_r+0x22>

08007ca8 <__ssvfiscanf_r>:
 8007ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	460c      	mov	r4, r1
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007cb6:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007cba:	49aa      	ldr	r1, [pc, #680]	@ (8007f64 <__ssvfiscanf_r+0x2bc>)
 8007cbc:	f10d 0804 	add.w	r8, sp, #4
 8007cc0:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007cc2:	49a9      	ldr	r1, [pc, #676]	@ (8007f68 <__ssvfiscanf_r+0x2c0>)
 8007cc4:	4fa9      	ldr	r7, [pc, #676]	@ (8007f6c <__ssvfiscanf_r+0x2c4>)
 8007cc6:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007cca:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	7813      	ldrb	r3, [r2, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8159 	beq.w	8007f88 <__ssvfiscanf_r+0x2e0>
 8007cd6:	5cf9      	ldrb	r1, [r7, r3]
 8007cd8:	1c55      	adds	r5, r2, #1
 8007cda:	f011 0108 	ands.w	r1, r1, #8
 8007cde:	d019      	beq.n	8007d14 <__ssvfiscanf_r+0x6c>
 8007ce0:	6863      	ldr	r3, [r4, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dd0f      	ble.n	8007d06 <__ssvfiscanf_r+0x5e>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	5cba      	ldrb	r2, [r7, r2]
 8007cec:	0712      	lsls	r2, r2, #28
 8007cee:	d401      	bmi.n	8007cf4 <__ssvfiscanf_r+0x4c>
 8007cf0:	462a      	mov	r2, r5
 8007cf2:	e7ec      	b.n	8007cce <__ssvfiscanf_r+0x26>
 8007cf4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	3201      	adds	r2, #1
 8007cfa:	9245      	str	r2, [sp, #276]	@ 0x114
 8007cfc:	6862      	ldr	r2, [r4, #4]
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	3a01      	subs	r2, #1
 8007d02:	6062      	str	r2, [r4, #4]
 8007d04:	e7ec      	b.n	8007ce0 <__ssvfiscanf_r+0x38>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4630      	mov	r0, r6
 8007d0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007d0c:	4798      	blx	r3
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d0e9      	beq.n	8007ce6 <__ssvfiscanf_r+0x3e>
 8007d12:	e7ed      	b.n	8007cf0 <__ssvfiscanf_r+0x48>
 8007d14:	2b25      	cmp	r3, #37	@ 0x25
 8007d16:	d012      	beq.n	8007d3e <__ssvfiscanf_r+0x96>
 8007d18:	4699      	mov	r9, r3
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f340 8094 	ble.w	8007e4a <__ssvfiscanf_r+0x1a2>
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	7813      	ldrb	r3, [r2, #0]
 8007d26:	454b      	cmp	r3, r9
 8007d28:	f040 812e 	bne.w	8007f88 <__ssvfiscanf_r+0x2e0>
 8007d2c:	6863      	ldr	r3, [r4, #4]
 8007d2e:	3201      	adds	r2, #1
 8007d30:	3b01      	subs	r3, #1
 8007d32:	6063      	str	r3, [r4, #4]
 8007d34:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007d36:	6022      	str	r2, [r4, #0]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	9345      	str	r3, [sp, #276]	@ 0x114
 8007d3c:	e7d8      	b.n	8007cf0 <__ssvfiscanf_r+0x48>
 8007d3e:	9141      	str	r1, [sp, #260]	@ 0x104
 8007d40:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007d42:	7853      	ldrb	r3, [r2, #1]
 8007d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d46:	bf04      	itt	eq
 8007d48:	2310      	moveq	r3, #16
 8007d4a:	1c95      	addeq	r5, r2, #2
 8007d4c:	f04f 020a 	mov.w	r2, #10
 8007d50:	bf08      	it	eq
 8007d52:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007d54:	46a9      	mov	r9, r5
 8007d56:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007d5a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	d91e      	bls.n	8007da0 <__ssvfiscanf_r+0xf8>
 8007d62:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8007f70 <__ssvfiscanf_r+0x2c8>
 8007d66:	2203      	movs	r2, #3
 8007d68:	4650      	mov	r0, sl
 8007d6a:	f000 fee3 	bl	8008b34 <memchr>
 8007d6e:	b138      	cbz	r0, 8007d80 <__ssvfiscanf_r+0xd8>
 8007d70:	2301      	movs	r3, #1
 8007d72:	464d      	mov	r5, r9
 8007d74:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007d76:	eba0 000a 	sub.w	r0, r0, sl
 8007d7a:	4083      	lsls	r3, r0
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007d80:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d84:	2b78      	cmp	r3, #120	@ 0x78
 8007d86:	d806      	bhi.n	8007d96 <__ssvfiscanf_r+0xee>
 8007d88:	2b57      	cmp	r3, #87	@ 0x57
 8007d8a:	d810      	bhi.n	8007dae <__ssvfiscanf_r+0x106>
 8007d8c:	2b25      	cmp	r3, #37	@ 0x25
 8007d8e:	d0c3      	beq.n	8007d18 <__ssvfiscanf_r+0x70>
 8007d90:	d856      	bhi.n	8007e40 <__ssvfiscanf_r+0x198>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d064      	beq.n	8007e60 <__ssvfiscanf_r+0x1b8>
 8007d96:	2303      	movs	r3, #3
 8007d98:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007d9a:	230a      	movs	r3, #10
 8007d9c:	9342      	str	r3, [sp, #264]	@ 0x108
 8007d9e:	e077      	b.n	8007e90 <__ssvfiscanf_r+0x1e8>
 8007da0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007da2:	464d      	mov	r5, r9
 8007da4:	fb02 1103 	mla	r1, r2, r3, r1
 8007da8:	3930      	subs	r1, #48	@ 0x30
 8007daa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007dac:	e7d2      	b.n	8007d54 <__ssvfiscanf_r+0xac>
 8007dae:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007db2:	2a20      	cmp	r2, #32
 8007db4:	d8ef      	bhi.n	8007d96 <__ssvfiscanf_r+0xee>
 8007db6:	a101      	add	r1, pc, #4	@ (adr r1, 8007dbc <__ssvfiscanf_r+0x114>)
 8007db8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007dbc:	08007e6f 	.word	0x08007e6f
 8007dc0:	08007d97 	.word	0x08007d97
 8007dc4:	08007d97 	.word	0x08007d97
 8007dc8:	08007ec9 	.word	0x08007ec9
 8007dcc:	08007d97 	.word	0x08007d97
 8007dd0:	08007d97 	.word	0x08007d97
 8007dd4:	08007d97 	.word	0x08007d97
 8007dd8:	08007d97 	.word	0x08007d97
 8007ddc:	08007d97 	.word	0x08007d97
 8007de0:	08007d97 	.word	0x08007d97
 8007de4:	08007d97 	.word	0x08007d97
 8007de8:	08007edf 	.word	0x08007edf
 8007dec:	08007ec5 	.word	0x08007ec5
 8007df0:	08007e47 	.word	0x08007e47
 8007df4:	08007e47 	.word	0x08007e47
 8007df8:	08007e47 	.word	0x08007e47
 8007dfc:	08007d97 	.word	0x08007d97
 8007e00:	08007e81 	.word	0x08007e81
 8007e04:	08007d97 	.word	0x08007d97
 8007e08:	08007d97 	.word	0x08007d97
 8007e0c:	08007d97 	.word	0x08007d97
 8007e10:	08007d97 	.word	0x08007d97
 8007e14:	08007eef 	.word	0x08007eef
 8007e18:	08007e89 	.word	0x08007e89
 8007e1c:	08007e67 	.word	0x08007e67
 8007e20:	08007d97 	.word	0x08007d97
 8007e24:	08007d97 	.word	0x08007d97
 8007e28:	08007eeb 	.word	0x08007eeb
 8007e2c:	08007d97 	.word	0x08007d97
 8007e30:	08007ec5 	.word	0x08007ec5
 8007e34:	08007d97 	.word	0x08007d97
 8007e38:	08007d97 	.word	0x08007d97
 8007e3c:	08007e6f 	.word	0x08007e6f
 8007e40:	3b45      	subs	r3, #69	@ 0x45
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d8a7      	bhi.n	8007d96 <__ssvfiscanf_r+0xee>
 8007e46:	2305      	movs	r3, #5
 8007e48:	e021      	b.n	8007e8e <__ssvfiscanf_r+0x1e6>
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007e50:	4798      	blx	r3
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f43f af65 	beq.w	8007d22 <__ssvfiscanf_r+0x7a>
 8007e58:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	f040 808c 	bne.w	8007f78 <__ssvfiscanf_r+0x2d0>
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e64:	e08c      	b.n	8007f80 <__ssvfiscanf_r+0x2d8>
 8007e66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007e68:	f042 0220 	orr.w	r2, r2, #32
 8007e6c:	9241      	str	r2, [sp, #260]	@ 0x104
 8007e6e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e74:	9241      	str	r2, [sp, #260]	@ 0x104
 8007e76:	2210      	movs	r2, #16
 8007e78:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e7a:	9242      	str	r2, [sp, #264]	@ 0x108
 8007e7c:	d902      	bls.n	8007e84 <__ssvfiscanf_r+0x1dc>
 8007e7e:	e005      	b.n	8007e8c <__ssvfiscanf_r+0x1e4>
 8007e80:	2300      	movs	r3, #0
 8007e82:	9342      	str	r3, [sp, #264]	@ 0x108
 8007e84:	2303      	movs	r3, #3
 8007e86:	e002      	b.n	8007e8e <__ssvfiscanf_r+0x1e6>
 8007e88:	2308      	movs	r3, #8
 8007e8a:	9342      	str	r3, [sp, #264]	@ 0x108
 8007e8c:	2304      	movs	r3, #4
 8007e8e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dd39      	ble.n	8007f0a <__ssvfiscanf_r+0x262>
 8007e96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007e98:	0659      	lsls	r1, r3, #25
 8007e9a:	d404      	bmi.n	8007ea6 <__ssvfiscanf_r+0x1fe>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	5cba      	ldrb	r2, [r7, r2]
 8007ea2:	0712      	lsls	r2, r2, #28
 8007ea4:	d438      	bmi.n	8007f18 <__ssvfiscanf_r+0x270>
 8007ea6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	dc47      	bgt.n	8007f3c <__ssvfiscanf_r+0x294>
 8007eac:	466b      	mov	r3, sp
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	a941      	add	r1, sp, #260	@ 0x104
 8007eb4:	f000 fb3c 	bl	8008530 <_scanf_chars>
 8007eb8:	2801      	cmp	r0, #1
 8007eba:	d065      	beq.n	8007f88 <__ssvfiscanf_r+0x2e0>
 8007ebc:	2802      	cmp	r0, #2
 8007ebe:	f47f af17 	bne.w	8007cf0 <__ssvfiscanf_r+0x48>
 8007ec2:	e7c9      	b.n	8007e58 <__ssvfiscanf_r+0x1b0>
 8007ec4:	220a      	movs	r2, #10
 8007ec6:	e7d7      	b.n	8007e78 <__ssvfiscanf_r+0x1d0>
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f000 fd85 	bl	80089da <__sccl>
 8007ed0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed8:	9341      	str	r3, [sp, #260]	@ 0x104
 8007eda:	2301      	movs	r3, #1
 8007edc:	e7d7      	b.n	8007e8e <__ssvfiscanf_r+0x1e6>
 8007ede:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ee4:	9341      	str	r3, [sp, #260]	@ 0x104
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e7d1      	b.n	8007e8e <__ssvfiscanf_r+0x1e6>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e7cf      	b.n	8007e8e <__ssvfiscanf_r+0x1e6>
 8007eee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007ef0:	06c3      	lsls	r3, r0, #27
 8007ef2:	f53f aefd 	bmi.w	8007cf0 <__ssvfiscanf_r+0x48>
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007efa:	1d19      	adds	r1, r3, #4
 8007efc:	9100      	str	r1, [sp, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	07c0      	lsls	r0, r0, #31
 8007f02:	bf4c      	ite	mi
 8007f04:	801a      	strhmi	r2, [r3, #0]
 8007f06:	601a      	strpl	r2, [r3, #0]
 8007f08:	e6f2      	b.n	8007cf0 <__ssvfiscanf_r+0x48>
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007f10:	4798      	blx	r3
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d0bf      	beq.n	8007e96 <__ssvfiscanf_r+0x1ee>
 8007f16:	e79f      	b.n	8007e58 <__ssvfiscanf_r+0x1b0>
 8007f18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007f1a:	3201      	adds	r2, #1
 8007f1c:	9245      	str	r2, [sp, #276]	@ 0x114
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	3a01      	subs	r2, #1
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	6062      	str	r2, [r4, #4]
 8007f26:	dd02      	ble.n	8007f2e <__ssvfiscanf_r+0x286>
 8007f28:	3301      	adds	r3, #1
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	e7b6      	b.n	8007e9c <__ssvfiscanf_r+0x1f4>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4630      	mov	r0, r6
 8007f32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007f34:	4798      	blx	r3
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0b0      	beq.n	8007e9c <__ssvfiscanf_r+0x1f4>
 8007f3a:	e78d      	b.n	8007e58 <__ssvfiscanf_r+0x1b0>
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	dc06      	bgt.n	8007f4e <__ssvfiscanf_r+0x2a6>
 8007f40:	466b      	mov	r3, sp
 8007f42:	4622      	mov	r2, r4
 8007f44:	4630      	mov	r0, r6
 8007f46:	a941      	add	r1, sp, #260	@ 0x104
 8007f48:	f000 fb4c 	bl	80085e4 <_scanf_i>
 8007f4c:	e7b4      	b.n	8007eb8 <__ssvfiscanf_r+0x210>
 8007f4e:	4b09      	ldr	r3, [pc, #36]	@ (8007f74 <__ssvfiscanf_r+0x2cc>)
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f43f aecd 	beq.w	8007cf0 <__ssvfiscanf_r+0x48>
 8007f56:	466b      	mov	r3, sp
 8007f58:	4622      	mov	r2, r4
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	a941      	add	r1, sp, #260	@ 0x104
 8007f5e:	f3af 8000 	nop.w
 8007f62:	e7a9      	b.n	8007eb8 <__ssvfiscanf_r+0x210>
 8007f64:	08007bf9 	.word	0x08007bf9
 8007f68:	08007c6f 	.word	0x08007c6f
 8007f6c:	08009a4f 	.word	0x08009a4f
 8007f70:	08009b55 	.word	0x08009b55
 8007f74:	00000000 	.word	0x00000000
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	065b      	lsls	r3, r3, #25
 8007f7c:	f53f af70 	bmi.w	8007e60 <__ssvfiscanf_r+0x1b8>
 8007f80:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f88:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007f8a:	e7f9      	b.n	8007f80 <__ssvfiscanf_r+0x2d8>

08007f8c <__sfputc_r>:
 8007f8c:	6893      	ldr	r3, [r2, #8]
 8007f8e:	b410      	push	{r4}
 8007f90:	3b01      	subs	r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	6093      	str	r3, [r2, #8]
 8007f96:	da07      	bge.n	8007fa8 <__sfputc_r+0x1c>
 8007f98:	6994      	ldr	r4, [r2, #24]
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	db01      	blt.n	8007fa2 <__sfputc_r+0x16>
 8007f9e:	290a      	cmp	r1, #10
 8007fa0:	d102      	bne.n	8007fa8 <__sfputc_r+0x1c>
 8007fa2:	bc10      	pop	{r4}
 8007fa4:	f7ff bb3b 	b.w	800761e <__swbuf_r>
 8007fa8:	6813      	ldr	r3, [r2, #0]
 8007faa:	1c58      	adds	r0, r3, #1
 8007fac:	6010      	str	r0, [r2, #0]
 8007fae:	7019      	strb	r1, [r3, #0]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	bc10      	pop	{r4}
 8007fb4:	4770      	bx	lr

08007fb6 <__sfputs_r>:
 8007fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb8:	4606      	mov	r6, r0
 8007fba:	460f      	mov	r7, r1
 8007fbc:	4614      	mov	r4, r2
 8007fbe:	18d5      	adds	r5, r2, r3
 8007fc0:	42ac      	cmp	r4, r5
 8007fc2:	d101      	bne.n	8007fc8 <__sfputs_r+0x12>
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	e007      	b.n	8007fd8 <__sfputs_r+0x22>
 8007fc8:	463a      	mov	r2, r7
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	f7ff ffdc 	bl	8007f8c <__sfputc_r>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d1f3      	bne.n	8007fc0 <__sfputs_r+0xa>
 8007fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fdc <_vfiprintf_r>:
 8007fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	460d      	mov	r5, r1
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	4698      	mov	r8, r3
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	b09d      	sub	sp, #116	@ 0x74
 8007fea:	b118      	cbz	r0, 8007ff4 <_vfiprintf_r+0x18>
 8007fec:	6a03      	ldr	r3, [r0, #32]
 8007fee:	b90b      	cbnz	r3, 8007ff4 <_vfiprintf_r+0x18>
 8007ff0:	f7ff f9e0 	bl	80073b4 <__sinit>
 8007ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ff6:	07d9      	lsls	r1, r3, #31
 8007ff8:	d405      	bmi.n	8008006 <_vfiprintf_r+0x2a>
 8007ffa:	89ab      	ldrh	r3, [r5, #12]
 8007ffc:	059a      	lsls	r2, r3, #22
 8007ffe:	d402      	bmi.n	8008006 <_vfiprintf_r+0x2a>
 8008000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008002:	f7ff fc40 	bl	8007886 <__retarget_lock_acquire_recursive>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	071b      	lsls	r3, r3, #28
 800800a:	d501      	bpl.n	8008010 <_vfiprintf_r+0x34>
 800800c:	692b      	ldr	r3, [r5, #16]
 800800e:	b99b      	cbnz	r3, 8008038 <_vfiprintf_r+0x5c>
 8008010:	4629      	mov	r1, r5
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff fb42 	bl	800769c <__swsetup_r>
 8008018:	b170      	cbz	r0, 8008038 <_vfiprintf_r+0x5c>
 800801a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800801c:	07dc      	lsls	r4, r3, #31
 800801e:	d504      	bpl.n	800802a <_vfiprintf_r+0x4e>
 8008020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008024:	b01d      	add	sp, #116	@ 0x74
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	0598      	lsls	r0, r3, #22
 800802e:	d4f7      	bmi.n	8008020 <_vfiprintf_r+0x44>
 8008030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008032:	f7ff fc29 	bl	8007888 <__retarget_lock_release_recursive>
 8008036:	e7f3      	b.n	8008020 <_vfiprintf_r+0x44>
 8008038:	2300      	movs	r3, #0
 800803a:	9309      	str	r3, [sp, #36]	@ 0x24
 800803c:	2320      	movs	r3, #32
 800803e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008042:	2330      	movs	r3, #48	@ 0x30
 8008044:	f04f 0901 	mov.w	r9, #1
 8008048:	f8cd 800c 	str.w	r8, [sp, #12]
 800804c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80081f8 <_vfiprintf_r+0x21c>
 8008050:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008054:	4623      	mov	r3, r4
 8008056:	469a      	mov	sl, r3
 8008058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800805c:	b10a      	cbz	r2, 8008062 <_vfiprintf_r+0x86>
 800805e:	2a25      	cmp	r2, #37	@ 0x25
 8008060:	d1f9      	bne.n	8008056 <_vfiprintf_r+0x7a>
 8008062:	ebba 0b04 	subs.w	fp, sl, r4
 8008066:	d00b      	beq.n	8008080 <_vfiprintf_r+0xa4>
 8008068:	465b      	mov	r3, fp
 800806a:	4622      	mov	r2, r4
 800806c:	4629      	mov	r1, r5
 800806e:	4630      	mov	r0, r6
 8008070:	f7ff ffa1 	bl	8007fb6 <__sfputs_r>
 8008074:	3001      	adds	r0, #1
 8008076:	f000 80a7 	beq.w	80081c8 <_vfiprintf_r+0x1ec>
 800807a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800807c:	445a      	add	r2, fp
 800807e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008080:	f89a 3000 	ldrb.w	r3, [sl]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 809f 	beq.w	80081c8 <_vfiprintf_r+0x1ec>
 800808a:	2300      	movs	r3, #0
 800808c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008094:	f10a 0a01 	add.w	sl, sl, #1
 8008098:	9304      	str	r3, [sp, #16]
 800809a:	9307      	str	r3, [sp, #28]
 800809c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80080a2:	4654      	mov	r4, sl
 80080a4:	2205      	movs	r2, #5
 80080a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080aa:	4853      	ldr	r0, [pc, #332]	@ (80081f8 <_vfiprintf_r+0x21c>)
 80080ac:	f000 fd42 	bl	8008b34 <memchr>
 80080b0:	9a04      	ldr	r2, [sp, #16]
 80080b2:	b9d8      	cbnz	r0, 80080ec <_vfiprintf_r+0x110>
 80080b4:	06d1      	lsls	r1, r2, #27
 80080b6:	bf44      	itt	mi
 80080b8:	2320      	movmi	r3, #32
 80080ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080be:	0713      	lsls	r3, r2, #28
 80080c0:	bf44      	itt	mi
 80080c2:	232b      	movmi	r3, #43	@ 0x2b
 80080c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080c8:	f89a 3000 	ldrb.w	r3, [sl]
 80080cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ce:	d015      	beq.n	80080fc <_vfiprintf_r+0x120>
 80080d0:	4654      	mov	r4, sl
 80080d2:	2000      	movs	r0, #0
 80080d4:	f04f 0c0a 	mov.w	ip, #10
 80080d8:	9a07      	ldr	r2, [sp, #28]
 80080da:	4621      	mov	r1, r4
 80080dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e0:	3b30      	subs	r3, #48	@ 0x30
 80080e2:	2b09      	cmp	r3, #9
 80080e4:	d94b      	bls.n	800817e <_vfiprintf_r+0x1a2>
 80080e6:	b1b0      	cbz	r0, 8008116 <_vfiprintf_r+0x13a>
 80080e8:	9207      	str	r2, [sp, #28]
 80080ea:	e014      	b.n	8008116 <_vfiprintf_r+0x13a>
 80080ec:	eba0 0308 	sub.w	r3, r0, r8
 80080f0:	fa09 f303 	lsl.w	r3, r9, r3
 80080f4:	4313      	orrs	r3, r2
 80080f6:	46a2      	mov	sl, r4
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	e7d2      	b.n	80080a2 <_vfiprintf_r+0xc6>
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	1d19      	adds	r1, r3, #4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	9103      	str	r1, [sp, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	bfbb      	ittet	lt
 8008108:	425b      	neglt	r3, r3
 800810a:	f042 0202 	orrlt.w	r2, r2, #2
 800810e:	9307      	strge	r3, [sp, #28]
 8008110:	9307      	strlt	r3, [sp, #28]
 8008112:	bfb8      	it	lt
 8008114:	9204      	strlt	r2, [sp, #16]
 8008116:	7823      	ldrb	r3, [r4, #0]
 8008118:	2b2e      	cmp	r3, #46	@ 0x2e
 800811a:	d10a      	bne.n	8008132 <_vfiprintf_r+0x156>
 800811c:	7863      	ldrb	r3, [r4, #1]
 800811e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008120:	d132      	bne.n	8008188 <_vfiprintf_r+0x1ac>
 8008122:	9b03      	ldr	r3, [sp, #12]
 8008124:	3402      	adds	r4, #2
 8008126:	1d1a      	adds	r2, r3, #4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	9203      	str	r2, [sp, #12]
 800812c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008130:	9305      	str	r3, [sp, #20]
 8008132:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80081fc <_vfiprintf_r+0x220>
 8008136:	2203      	movs	r2, #3
 8008138:	4650      	mov	r0, sl
 800813a:	7821      	ldrb	r1, [r4, #0]
 800813c:	f000 fcfa 	bl	8008b34 <memchr>
 8008140:	b138      	cbz	r0, 8008152 <_vfiprintf_r+0x176>
 8008142:	2240      	movs	r2, #64	@ 0x40
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	eba0 000a 	sub.w	r0, r0, sl
 800814a:	4082      	lsls	r2, r0
 800814c:	4313      	orrs	r3, r2
 800814e:	3401      	adds	r4, #1
 8008150:	9304      	str	r3, [sp, #16]
 8008152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008156:	2206      	movs	r2, #6
 8008158:	4829      	ldr	r0, [pc, #164]	@ (8008200 <_vfiprintf_r+0x224>)
 800815a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800815e:	f000 fce9 	bl	8008b34 <memchr>
 8008162:	2800      	cmp	r0, #0
 8008164:	d03f      	beq.n	80081e6 <_vfiprintf_r+0x20a>
 8008166:	4b27      	ldr	r3, [pc, #156]	@ (8008204 <_vfiprintf_r+0x228>)
 8008168:	bb1b      	cbnz	r3, 80081b2 <_vfiprintf_r+0x1d6>
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	3307      	adds	r3, #7
 800816e:	f023 0307 	bic.w	r3, r3, #7
 8008172:	3308      	adds	r3, #8
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008178:	443b      	add	r3, r7
 800817a:	9309      	str	r3, [sp, #36]	@ 0x24
 800817c:	e76a      	b.n	8008054 <_vfiprintf_r+0x78>
 800817e:	460c      	mov	r4, r1
 8008180:	2001      	movs	r0, #1
 8008182:	fb0c 3202 	mla	r2, ip, r2, r3
 8008186:	e7a8      	b.n	80080da <_vfiprintf_r+0xfe>
 8008188:	2300      	movs	r3, #0
 800818a:	f04f 0c0a 	mov.w	ip, #10
 800818e:	4619      	mov	r1, r3
 8008190:	3401      	adds	r4, #1
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	4620      	mov	r0, r4
 8008196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800819a:	3a30      	subs	r2, #48	@ 0x30
 800819c:	2a09      	cmp	r2, #9
 800819e:	d903      	bls.n	80081a8 <_vfiprintf_r+0x1cc>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0c6      	beq.n	8008132 <_vfiprintf_r+0x156>
 80081a4:	9105      	str	r1, [sp, #20]
 80081a6:	e7c4      	b.n	8008132 <_vfiprintf_r+0x156>
 80081a8:	4604      	mov	r4, r0
 80081aa:	2301      	movs	r3, #1
 80081ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b0:	e7f0      	b.n	8008194 <_vfiprintf_r+0x1b8>
 80081b2:	ab03      	add	r3, sp, #12
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	462a      	mov	r2, r5
 80081b8:	4630      	mov	r0, r6
 80081ba:	4b13      	ldr	r3, [pc, #76]	@ (8008208 <_vfiprintf_r+0x22c>)
 80081bc:	a904      	add	r1, sp, #16
 80081be:	f3af 8000 	nop.w
 80081c2:	4607      	mov	r7, r0
 80081c4:	1c78      	adds	r0, r7, #1
 80081c6:	d1d6      	bne.n	8008176 <_vfiprintf_r+0x19a>
 80081c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ca:	07d9      	lsls	r1, r3, #31
 80081cc:	d405      	bmi.n	80081da <_vfiprintf_r+0x1fe>
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	059a      	lsls	r2, r3, #22
 80081d2:	d402      	bmi.n	80081da <_vfiprintf_r+0x1fe>
 80081d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081d6:	f7ff fb57 	bl	8007888 <__retarget_lock_release_recursive>
 80081da:	89ab      	ldrh	r3, [r5, #12]
 80081dc:	065b      	lsls	r3, r3, #25
 80081de:	f53f af1f 	bmi.w	8008020 <_vfiprintf_r+0x44>
 80081e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081e4:	e71e      	b.n	8008024 <_vfiprintf_r+0x48>
 80081e6:	ab03      	add	r3, sp, #12
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	462a      	mov	r2, r5
 80081ec:	4630      	mov	r0, r6
 80081ee:	4b06      	ldr	r3, [pc, #24]	@ (8008208 <_vfiprintf_r+0x22c>)
 80081f0:	a904      	add	r1, sp, #16
 80081f2:	f000 f87d 	bl	80082f0 <_printf_i>
 80081f6:	e7e4      	b.n	80081c2 <_vfiprintf_r+0x1e6>
 80081f8:	08009b4f 	.word	0x08009b4f
 80081fc:	08009b55 	.word	0x08009b55
 8008200:	08009b59 	.word	0x08009b59
 8008204:	00000000 	.word	0x00000000
 8008208:	08007fb7 	.word	0x08007fb7

0800820c <_printf_common>:
 800820c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008210:	4616      	mov	r6, r2
 8008212:	4698      	mov	r8, r3
 8008214:	688a      	ldr	r2, [r1, #8]
 8008216:	690b      	ldr	r3, [r1, #16]
 8008218:	4607      	mov	r7, r0
 800821a:	4293      	cmp	r3, r2
 800821c:	bfb8      	it	lt
 800821e:	4613      	movlt	r3, r2
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008226:	460c      	mov	r4, r1
 8008228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800822c:	b10a      	cbz	r2, 8008232 <_printf_common+0x26>
 800822e:	3301      	adds	r3, #1
 8008230:	6033      	str	r3, [r6, #0]
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	0699      	lsls	r1, r3, #26
 8008236:	bf42      	ittt	mi
 8008238:	6833      	ldrmi	r3, [r6, #0]
 800823a:	3302      	addmi	r3, #2
 800823c:	6033      	strmi	r3, [r6, #0]
 800823e:	6825      	ldr	r5, [r4, #0]
 8008240:	f015 0506 	ands.w	r5, r5, #6
 8008244:	d106      	bne.n	8008254 <_printf_common+0x48>
 8008246:	f104 0a19 	add.w	sl, r4, #25
 800824a:	68e3      	ldr	r3, [r4, #12]
 800824c:	6832      	ldr	r2, [r6, #0]
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	42ab      	cmp	r3, r5
 8008252:	dc2b      	bgt.n	80082ac <_printf_common+0xa0>
 8008254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008258:	6822      	ldr	r2, [r4, #0]
 800825a:	3b00      	subs	r3, #0
 800825c:	bf18      	it	ne
 800825e:	2301      	movne	r3, #1
 8008260:	0692      	lsls	r2, r2, #26
 8008262:	d430      	bmi.n	80082c6 <_printf_common+0xba>
 8008264:	4641      	mov	r1, r8
 8008266:	4638      	mov	r0, r7
 8008268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800826c:	47c8      	blx	r9
 800826e:	3001      	adds	r0, #1
 8008270:	d023      	beq.n	80082ba <_printf_common+0xae>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	f003 0306 	and.w	r3, r3, #6
 800827a:	2b04      	cmp	r3, #4
 800827c:	bf14      	ite	ne
 800827e:	2500      	movne	r5, #0
 8008280:	6833      	ldreq	r3, [r6, #0]
 8008282:	f04f 0600 	mov.w	r6, #0
 8008286:	bf08      	it	eq
 8008288:	68e5      	ldreq	r5, [r4, #12]
 800828a:	f104 041a 	add.w	r4, r4, #26
 800828e:	bf08      	it	eq
 8008290:	1aed      	subeq	r5, r5, r3
 8008292:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008296:	bf08      	it	eq
 8008298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800829c:	4293      	cmp	r3, r2
 800829e:	bfc4      	itt	gt
 80082a0:	1a9b      	subgt	r3, r3, r2
 80082a2:	18ed      	addgt	r5, r5, r3
 80082a4:	42b5      	cmp	r5, r6
 80082a6:	d11a      	bne.n	80082de <_printf_common+0xd2>
 80082a8:	2000      	movs	r0, #0
 80082aa:	e008      	b.n	80082be <_printf_common+0xb2>
 80082ac:	2301      	movs	r3, #1
 80082ae:	4652      	mov	r2, sl
 80082b0:	4641      	mov	r1, r8
 80082b2:	4638      	mov	r0, r7
 80082b4:	47c8      	blx	r9
 80082b6:	3001      	adds	r0, #1
 80082b8:	d103      	bne.n	80082c2 <_printf_common+0xb6>
 80082ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c2:	3501      	adds	r5, #1
 80082c4:	e7c1      	b.n	800824a <_printf_common+0x3e>
 80082c6:	2030      	movs	r0, #48	@ 0x30
 80082c8:	18e1      	adds	r1, r4, r3
 80082ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082d4:	4422      	add	r2, r4
 80082d6:	3302      	adds	r3, #2
 80082d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082dc:	e7c2      	b.n	8008264 <_printf_common+0x58>
 80082de:	2301      	movs	r3, #1
 80082e0:	4622      	mov	r2, r4
 80082e2:	4641      	mov	r1, r8
 80082e4:	4638      	mov	r0, r7
 80082e6:	47c8      	blx	r9
 80082e8:	3001      	adds	r0, #1
 80082ea:	d0e6      	beq.n	80082ba <_printf_common+0xae>
 80082ec:	3601      	adds	r6, #1
 80082ee:	e7d9      	b.n	80082a4 <_printf_common+0x98>

080082f0 <_printf_i>:
 80082f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	7e0f      	ldrb	r7, [r1, #24]
 80082f6:	4691      	mov	r9, r2
 80082f8:	2f78      	cmp	r7, #120	@ 0x78
 80082fa:	4680      	mov	r8, r0
 80082fc:	460c      	mov	r4, r1
 80082fe:	469a      	mov	sl, r3
 8008300:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008306:	d807      	bhi.n	8008318 <_printf_i+0x28>
 8008308:	2f62      	cmp	r7, #98	@ 0x62
 800830a:	d80a      	bhi.n	8008322 <_printf_i+0x32>
 800830c:	2f00      	cmp	r7, #0
 800830e:	f000 80d3 	beq.w	80084b8 <_printf_i+0x1c8>
 8008312:	2f58      	cmp	r7, #88	@ 0x58
 8008314:	f000 80ba 	beq.w	800848c <_printf_i+0x19c>
 8008318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800831c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008320:	e03a      	b.n	8008398 <_printf_i+0xa8>
 8008322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008326:	2b15      	cmp	r3, #21
 8008328:	d8f6      	bhi.n	8008318 <_printf_i+0x28>
 800832a:	a101      	add	r1, pc, #4	@ (adr r1, 8008330 <_printf_i+0x40>)
 800832c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008330:	08008389 	.word	0x08008389
 8008334:	0800839d 	.word	0x0800839d
 8008338:	08008319 	.word	0x08008319
 800833c:	08008319 	.word	0x08008319
 8008340:	08008319 	.word	0x08008319
 8008344:	08008319 	.word	0x08008319
 8008348:	0800839d 	.word	0x0800839d
 800834c:	08008319 	.word	0x08008319
 8008350:	08008319 	.word	0x08008319
 8008354:	08008319 	.word	0x08008319
 8008358:	08008319 	.word	0x08008319
 800835c:	0800849f 	.word	0x0800849f
 8008360:	080083c7 	.word	0x080083c7
 8008364:	08008459 	.word	0x08008459
 8008368:	08008319 	.word	0x08008319
 800836c:	08008319 	.word	0x08008319
 8008370:	080084c1 	.word	0x080084c1
 8008374:	08008319 	.word	0x08008319
 8008378:	080083c7 	.word	0x080083c7
 800837c:	08008319 	.word	0x08008319
 8008380:	08008319 	.word	0x08008319
 8008384:	08008461 	.word	0x08008461
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	1d1a      	adds	r2, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6032      	str	r2, [r6, #0]
 8008390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008398:	2301      	movs	r3, #1
 800839a:	e09e      	b.n	80084da <_printf_i+0x1ea>
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	1d19      	adds	r1, r3, #4
 80083a2:	6031      	str	r1, [r6, #0]
 80083a4:	0606      	lsls	r6, r0, #24
 80083a6:	d501      	bpl.n	80083ac <_printf_i+0xbc>
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	e003      	b.n	80083b4 <_printf_i+0xc4>
 80083ac:	0645      	lsls	r5, r0, #25
 80083ae:	d5fb      	bpl.n	80083a8 <_printf_i+0xb8>
 80083b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	da03      	bge.n	80083c0 <_printf_i+0xd0>
 80083b8:	232d      	movs	r3, #45	@ 0x2d
 80083ba:	426d      	negs	r5, r5
 80083bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c0:	230a      	movs	r3, #10
 80083c2:	4859      	ldr	r0, [pc, #356]	@ (8008528 <_printf_i+0x238>)
 80083c4:	e011      	b.n	80083ea <_printf_i+0xfa>
 80083c6:	6821      	ldr	r1, [r4, #0]
 80083c8:	6833      	ldr	r3, [r6, #0]
 80083ca:	0608      	lsls	r0, r1, #24
 80083cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80083d0:	d402      	bmi.n	80083d8 <_printf_i+0xe8>
 80083d2:	0649      	lsls	r1, r1, #25
 80083d4:	bf48      	it	mi
 80083d6:	b2ad      	uxthmi	r5, r5
 80083d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	bf14      	ite	ne
 80083de:	230a      	movne	r3, #10
 80083e0:	2308      	moveq	r3, #8
 80083e2:	4851      	ldr	r0, [pc, #324]	@ (8008528 <_printf_i+0x238>)
 80083e4:	2100      	movs	r1, #0
 80083e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083ea:	6866      	ldr	r6, [r4, #4]
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	bfa8      	it	ge
 80083f0:	6821      	ldrge	r1, [r4, #0]
 80083f2:	60a6      	str	r6, [r4, #8]
 80083f4:	bfa4      	itt	ge
 80083f6:	f021 0104 	bicge.w	r1, r1, #4
 80083fa:	6021      	strge	r1, [r4, #0]
 80083fc:	b90d      	cbnz	r5, 8008402 <_printf_i+0x112>
 80083fe:	2e00      	cmp	r6, #0
 8008400:	d04b      	beq.n	800849a <_printf_i+0x1aa>
 8008402:	4616      	mov	r6, r2
 8008404:	fbb5 f1f3 	udiv	r1, r5, r3
 8008408:	fb03 5711 	mls	r7, r3, r1, r5
 800840c:	5dc7      	ldrb	r7, [r0, r7]
 800840e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008412:	462f      	mov	r7, r5
 8008414:	42bb      	cmp	r3, r7
 8008416:	460d      	mov	r5, r1
 8008418:	d9f4      	bls.n	8008404 <_printf_i+0x114>
 800841a:	2b08      	cmp	r3, #8
 800841c:	d10b      	bne.n	8008436 <_printf_i+0x146>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	07df      	lsls	r7, r3, #31
 8008422:	d508      	bpl.n	8008436 <_printf_i+0x146>
 8008424:	6923      	ldr	r3, [r4, #16]
 8008426:	6861      	ldr	r1, [r4, #4]
 8008428:	4299      	cmp	r1, r3
 800842a:	bfde      	ittt	le
 800842c:	2330      	movle	r3, #48	@ 0x30
 800842e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008432:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008436:	1b92      	subs	r2, r2, r6
 8008438:	6122      	str	r2, [r4, #16]
 800843a:	464b      	mov	r3, r9
 800843c:	4621      	mov	r1, r4
 800843e:	4640      	mov	r0, r8
 8008440:	f8cd a000 	str.w	sl, [sp]
 8008444:	aa03      	add	r2, sp, #12
 8008446:	f7ff fee1 	bl	800820c <_printf_common>
 800844a:	3001      	adds	r0, #1
 800844c:	d14a      	bne.n	80084e4 <_printf_i+0x1f4>
 800844e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008452:	b004      	add	sp, #16
 8008454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	f043 0320 	orr.w	r3, r3, #32
 800845e:	6023      	str	r3, [r4, #0]
 8008460:	2778      	movs	r7, #120	@ 0x78
 8008462:	4832      	ldr	r0, [pc, #200]	@ (800852c <_printf_i+0x23c>)
 8008464:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	6831      	ldr	r1, [r6, #0]
 800846c:	061f      	lsls	r7, r3, #24
 800846e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008472:	d402      	bmi.n	800847a <_printf_i+0x18a>
 8008474:	065f      	lsls	r7, r3, #25
 8008476:	bf48      	it	mi
 8008478:	b2ad      	uxthmi	r5, r5
 800847a:	6031      	str	r1, [r6, #0]
 800847c:	07d9      	lsls	r1, r3, #31
 800847e:	bf44      	itt	mi
 8008480:	f043 0320 	orrmi.w	r3, r3, #32
 8008484:	6023      	strmi	r3, [r4, #0]
 8008486:	b11d      	cbz	r5, 8008490 <_printf_i+0x1a0>
 8008488:	2310      	movs	r3, #16
 800848a:	e7ab      	b.n	80083e4 <_printf_i+0xf4>
 800848c:	4826      	ldr	r0, [pc, #152]	@ (8008528 <_printf_i+0x238>)
 800848e:	e7e9      	b.n	8008464 <_printf_i+0x174>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	f023 0320 	bic.w	r3, r3, #32
 8008496:	6023      	str	r3, [r4, #0]
 8008498:	e7f6      	b.n	8008488 <_printf_i+0x198>
 800849a:	4616      	mov	r6, r2
 800849c:	e7bd      	b.n	800841a <_printf_i+0x12a>
 800849e:	6833      	ldr	r3, [r6, #0]
 80084a0:	6825      	ldr	r5, [r4, #0]
 80084a2:	1d18      	adds	r0, r3, #4
 80084a4:	6961      	ldr	r1, [r4, #20]
 80084a6:	6030      	str	r0, [r6, #0]
 80084a8:	062e      	lsls	r6, r5, #24
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	d501      	bpl.n	80084b2 <_printf_i+0x1c2>
 80084ae:	6019      	str	r1, [r3, #0]
 80084b0:	e002      	b.n	80084b8 <_printf_i+0x1c8>
 80084b2:	0668      	lsls	r0, r5, #25
 80084b4:	d5fb      	bpl.n	80084ae <_printf_i+0x1be>
 80084b6:	8019      	strh	r1, [r3, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	4616      	mov	r6, r2
 80084bc:	6123      	str	r3, [r4, #16]
 80084be:	e7bc      	b.n	800843a <_printf_i+0x14a>
 80084c0:	6833      	ldr	r3, [r6, #0]
 80084c2:	2100      	movs	r1, #0
 80084c4:	1d1a      	adds	r2, r3, #4
 80084c6:	6032      	str	r2, [r6, #0]
 80084c8:	681e      	ldr	r6, [r3, #0]
 80084ca:	6862      	ldr	r2, [r4, #4]
 80084cc:	4630      	mov	r0, r6
 80084ce:	f000 fb31 	bl	8008b34 <memchr>
 80084d2:	b108      	cbz	r0, 80084d8 <_printf_i+0x1e8>
 80084d4:	1b80      	subs	r0, r0, r6
 80084d6:	6060      	str	r0, [r4, #4]
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	2300      	movs	r3, #0
 80084de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e2:	e7aa      	b.n	800843a <_printf_i+0x14a>
 80084e4:	4632      	mov	r2, r6
 80084e6:	4649      	mov	r1, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	6923      	ldr	r3, [r4, #16]
 80084ec:	47d0      	blx	sl
 80084ee:	3001      	adds	r0, #1
 80084f0:	d0ad      	beq.n	800844e <_printf_i+0x15e>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	079b      	lsls	r3, r3, #30
 80084f6:	d413      	bmi.n	8008520 <_printf_i+0x230>
 80084f8:	68e0      	ldr	r0, [r4, #12]
 80084fa:	9b03      	ldr	r3, [sp, #12]
 80084fc:	4298      	cmp	r0, r3
 80084fe:	bfb8      	it	lt
 8008500:	4618      	movlt	r0, r3
 8008502:	e7a6      	b.n	8008452 <_printf_i+0x162>
 8008504:	2301      	movs	r3, #1
 8008506:	4632      	mov	r2, r6
 8008508:	4649      	mov	r1, r9
 800850a:	4640      	mov	r0, r8
 800850c:	47d0      	blx	sl
 800850e:	3001      	adds	r0, #1
 8008510:	d09d      	beq.n	800844e <_printf_i+0x15e>
 8008512:	3501      	adds	r5, #1
 8008514:	68e3      	ldr	r3, [r4, #12]
 8008516:	9903      	ldr	r1, [sp, #12]
 8008518:	1a5b      	subs	r3, r3, r1
 800851a:	42ab      	cmp	r3, r5
 800851c:	dcf2      	bgt.n	8008504 <_printf_i+0x214>
 800851e:	e7eb      	b.n	80084f8 <_printf_i+0x208>
 8008520:	2500      	movs	r5, #0
 8008522:	f104 0619 	add.w	r6, r4, #25
 8008526:	e7f5      	b.n	8008514 <_printf_i+0x224>
 8008528:	08009b60 	.word	0x08009b60
 800852c:	08009b71 	.word	0x08009b71

08008530 <_scanf_chars>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4615      	mov	r5, r2
 8008536:	688a      	ldr	r2, [r1, #8]
 8008538:	4680      	mov	r8, r0
 800853a:	460c      	mov	r4, r1
 800853c:	b932      	cbnz	r2, 800854c <_scanf_chars+0x1c>
 800853e:	698a      	ldr	r2, [r1, #24]
 8008540:	2a00      	cmp	r2, #0
 8008542:	bf14      	ite	ne
 8008544:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008548:	2201      	moveq	r2, #1
 800854a:	608a      	str	r2, [r1, #8]
 800854c:	2700      	movs	r7, #0
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80085e0 <_scanf_chars+0xb0>
 8008554:	06d1      	lsls	r1, r2, #27
 8008556:	bf5f      	itttt	pl
 8008558:	681a      	ldrpl	r2, [r3, #0]
 800855a:	1d11      	addpl	r1, r2, #4
 800855c:	6019      	strpl	r1, [r3, #0]
 800855e:	6816      	ldrpl	r6, [r2, #0]
 8008560:	69a0      	ldr	r0, [r4, #24]
 8008562:	b188      	cbz	r0, 8008588 <_scanf_chars+0x58>
 8008564:	2801      	cmp	r0, #1
 8008566:	d107      	bne.n	8008578 <_scanf_chars+0x48>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	6963      	ldr	r3, [r4, #20]
 800856e:	5c9b      	ldrb	r3, [r3, r2]
 8008570:	b953      	cbnz	r3, 8008588 <_scanf_chars+0x58>
 8008572:	2f00      	cmp	r7, #0
 8008574:	d031      	beq.n	80085da <_scanf_chars+0xaa>
 8008576:	e022      	b.n	80085be <_scanf_chars+0x8e>
 8008578:	2802      	cmp	r0, #2
 800857a:	d120      	bne.n	80085be <_scanf_chars+0x8e>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008584:	071b      	lsls	r3, r3, #28
 8008586:	d41a      	bmi.n	80085be <_scanf_chars+0x8e>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	3701      	adds	r7, #1
 800858c:	06da      	lsls	r2, r3, #27
 800858e:	bf5e      	ittt	pl
 8008590:	682b      	ldrpl	r3, [r5, #0]
 8008592:	781b      	ldrbpl	r3, [r3, #0]
 8008594:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008598:	682a      	ldr	r2, [r5, #0]
 800859a:	686b      	ldr	r3, [r5, #4]
 800859c:	3201      	adds	r2, #1
 800859e:	602a      	str	r2, [r5, #0]
 80085a0:	68a2      	ldr	r2, [r4, #8]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	3a01      	subs	r2, #1
 80085a6:	606b      	str	r3, [r5, #4]
 80085a8:	60a2      	str	r2, [r4, #8]
 80085aa:	b142      	cbz	r2, 80085be <_scanf_chars+0x8e>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dcd7      	bgt.n	8008560 <_scanf_chars+0x30>
 80085b0:	4629      	mov	r1, r5
 80085b2:	4640      	mov	r0, r8
 80085b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80085b8:	4798      	blx	r3
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d0d0      	beq.n	8008560 <_scanf_chars+0x30>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	f013 0310 	ands.w	r3, r3, #16
 80085c4:	d105      	bne.n	80085d2 <_scanf_chars+0xa2>
 80085c6:	68e2      	ldr	r2, [r4, #12]
 80085c8:	3201      	adds	r2, #1
 80085ca:	60e2      	str	r2, [r4, #12]
 80085cc:	69a2      	ldr	r2, [r4, #24]
 80085ce:	b102      	cbz	r2, 80085d2 <_scanf_chars+0xa2>
 80085d0:	7033      	strb	r3, [r6, #0]
 80085d2:	2000      	movs	r0, #0
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	443b      	add	r3, r7
 80085d8:	6123      	str	r3, [r4, #16]
 80085da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085de:	bf00      	nop
 80085e0:	08009a4f 	.word	0x08009a4f

080085e4 <_scanf_i>:
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e8:	460c      	mov	r4, r1
 80085ea:	4698      	mov	r8, r3
 80085ec:	4b72      	ldr	r3, [pc, #456]	@ (80087b8 <_scanf_i+0x1d4>)
 80085ee:	b087      	sub	sp, #28
 80085f0:	4682      	mov	sl, r0
 80085f2:	4616      	mov	r6, r2
 80085f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085f8:	ab03      	add	r3, sp, #12
 80085fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80085fe:	4b6f      	ldr	r3, [pc, #444]	@ (80087bc <_scanf_i+0x1d8>)
 8008600:	69a1      	ldr	r1, [r4, #24]
 8008602:	4a6f      	ldr	r2, [pc, #444]	@ (80087c0 <_scanf_i+0x1dc>)
 8008604:	4627      	mov	r7, r4
 8008606:	2903      	cmp	r1, #3
 8008608:	bf08      	it	eq
 800860a:	461a      	moveq	r2, r3
 800860c:	68a3      	ldr	r3, [r4, #8]
 800860e:	9201      	str	r2, [sp, #4]
 8008610:	1e5a      	subs	r2, r3, #1
 8008612:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008616:	bf81      	itttt	hi
 8008618:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800861c:	eb03 0905 	addhi.w	r9, r3, r5
 8008620:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008624:	60a3      	strhi	r3, [r4, #8]
 8008626:	f857 3b1c 	ldr.w	r3, [r7], #28
 800862a:	bf98      	it	ls
 800862c:	f04f 0900 	movls.w	r9, #0
 8008630:	463d      	mov	r5, r7
 8008632:	f04f 0b00 	mov.w	fp, #0
 8008636:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	6831      	ldr	r1, [r6, #0]
 800863e:	ab03      	add	r3, sp, #12
 8008640:	2202      	movs	r2, #2
 8008642:	7809      	ldrb	r1, [r1, #0]
 8008644:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008648:	f000 fa74 	bl	8008b34 <memchr>
 800864c:	b328      	cbz	r0, 800869a <_scanf_i+0xb6>
 800864e:	f1bb 0f01 	cmp.w	fp, #1
 8008652:	d159      	bne.n	8008708 <_scanf_i+0x124>
 8008654:	6862      	ldr	r2, [r4, #4]
 8008656:	b92a      	cbnz	r2, 8008664 <_scanf_i+0x80>
 8008658:	2108      	movs	r1, #8
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	6061      	str	r1, [r4, #4]
 800865e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008662:	6022      	str	r2, [r4, #0]
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800866a:	6022      	str	r2, [r4, #0]
 800866c:	68a2      	ldr	r2, [r4, #8]
 800866e:	1e51      	subs	r1, r2, #1
 8008670:	60a1      	str	r1, [r4, #8]
 8008672:	b192      	cbz	r2, 800869a <_scanf_i+0xb6>
 8008674:	6832      	ldr	r2, [r6, #0]
 8008676:	1c51      	adds	r1, r2, #1
 8008678:	6031      	str	r1, [r6, #0]
 800867a:	7812      	ldrb	r2, [r2, #0]
 800867c:	f805 2b01 	strb.w	r2, [r5], #1
 8008680:	6872      	ldr	r2, [r6, #4]
 8008682:	3a01      	subs	r2, #1
 8008684:	2a00      	cmp	r2, #0
 8008686:	6072      	str	r2, [r6, #4]
 8008688:	dc07      	bgt.n	800869a <_scanf_i+0xb6>
 800868a:	4631      	mov	r1, r6
 800868c:	4650      	mov	r0, sl
 800868e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008692:	4790      	blx	r2
 8008694:	2800      	cmp	r0, #0
 8008696:	f040 8085 	bne.w	80087a4 <_scanf_i+0x1c0>
 800869a:	f10b 0b01 	add.w	fp, fp, #1
 800869e:	f1bb 0f03 	cmp.w	fp, #3
 80086a2:	d1cb      	bne.n	800863c <_scanf_i+0x58>
 80086a4:	6863      	ldr	r3, [r4, #4]
 80086a6:	b90b      	cbnz	r3, 80086ac <_scanf_i+0xc8>
 80086a8:	230a      	movs	r3, #10
 80086aa:	6063      	str	r3, [r4, #4]
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	4945      	ldr	r1, [pc, #276]	@ (80087c4 <_scanf_i+0x1e0>)
 80086b0:	6960      	ldr	r0, [r4, #20]
 80086b2:	1ac9      	subs	r1, r1, r3
 80086b4:	f000 f991 	bl	80089da <__sccl>
 80086b8:	f04f 0b00 	mov.w	fp, #0
 80086bc:	68a3      	ldr	r3, [r4, #8]
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d03d      	beq.n	8008740 <_scanf_i+0x15c>
 80086c4:	6831      	ldr	r1, [r6, #0]
 80086c6:	6960      	ldr	r0, [r4, #20]
 80086c8:	f891 c000 	ldrb.w	ip, [r1]
 80086cc:	f810 000c 	ldrb.w	r0, [r0, ip]
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d035      	beq.n	8008740 <_scanf_i+0x15c>
 80086d4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80086d8:	d124      	bne.n	8008724 <_scanf_i+0x140>
 80086da:	0510      	lsls	r0, r2, #20
 80086dc:	d522      	bpl.n	8008724 <_scanf_i+0x140>
 80086de:	f10b 0b01 	add.w	fp, fp, #1
 80086e2:	f1b9 0f00 	cmp.w	r9, #0
 80086e6:	d003      	beq.n	80086f0 <_scanf_i+0x10c>
 80086e8:	3301      	adds	r3, #1
 80086ea:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80086ee:	60a3      	str	r3, [r4, #8]
 80086f0:	6873      	ldr	r3, [r6, #4]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	6073      	str	r3, [r6, #4]
 80086f8:	dd1b      	ble.n	8008732 <_scanf_i+0x14e>
 80086fa:	6833      	ldr	r3, [r6, #0]
 80086fc:	3301      	adds	r3, #1
 80086fe:	6033      	str	r3, [r6, #0]
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	3b01      	subs	r3, #1
 8008704:	60a3      	str	r3, [r4, #8]
 8008706:	e7d9      	b.n	80086bc <_scanf_i+0xd8>
 8008708:	f1bb 0f02 	cmp.w	fp, #2
 800870c:	d1ae      	bne.n	800866c <_scanf_i+0x88>
 800870e:	6822      	ldr	r2, [r4, #0]
 8008710:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008714:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008718:	d1bf      	bne.n	800869a <_scanf_i+0xb6>
 800871a:	2110      	movs	r1, #16
 800871c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008720:	6061      	str	r1, [r4, #4]
 8008722:	e7a2      	b.n	800866a <_scanf_i+0x86>
 8008724:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008728:	6022      	str	r2, [r4, #0]
 800872a:	780b      	ldrb	r3, [r1, #0]
 800872c:	f805 3b01 	strb.w	r3, [r5], #1
 8008730:	e7de      	b.n	80086f0 <_scanf_i+0x10c>
 8008732:	4631      	mov	r1, r6
 8008734:	4650      	mov	r0, sl
 8008736:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800873a:	4798      	blx	r3
 800873c:	2800      	cmp	r0, #0
 800873e:	d0df      	beq.n	8008700 <_scanf_i+0x11c>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	05d9      	lsls	r1, r3, #23
 8008744:	d50d      	bpl.n	8008762 <_scanf_i+0x17e>
 8008746:	42bd      	cmp	r5, r7
 8008748:	d909      	bls.n	800875e <_scanf_i+0x17a>
 800874a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800874e:	4632      	mov	r2, r6
 8008750:	4650      	mov	r0, sl
 8008752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008756:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800875a:	4798      	blx	r3
 800875c:	464d      	mov	r5, r9
 800875e:	42bd      	cmp	r5, r7
 8008760:	d028      	beq.n	80087b4 <_scanf_i+0x1d0>
 8008762:	6822      	ldr	r2, [r4, #0]
 8008764:	f012 0210 	ands.w	r2, r2, #16
 8008768:	d113      	bne.n	8008792 <_scanf_i+0x1ae>
 800876a:	702a      	strb	r2, [r5, #0]
 800876c:	4639      	mov	r1, r7
 800876e:	6863      	ldr	r3, [r4, #4]
 8008770:	4650      	mov	r0, sl
 8008772:	9e01      	ldr	r6, [sp, #4]
 8008774:	47b0      	blx	r6
 8008776:	f8d8 3000 	ldr.w	r3, [r8]
 800877a:	6821      	ldr	r1, [r4, #0]
 800877c:	1d1a      	adds	r2, r3, #4
 800877e:	f8c8 2000 	str.w	r2, [r8]
 8008782:	f011 0f20 	tst.w	r1, #32
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	d00f      	beq.n	80087aa <_scanf_i+0x1c6>
 800878a:	6018      	str	r0, [r3, #0]
 800878c:	68e3      	ldr	r3, [r4, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60e3      	str	r3, [r4, #12]
 8008792:	2000      	movs	r0, #0
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	1bed      	subs	r5, r5, r7
 8008798:	445d      	add	r5, fp
 800879a:	442b      	add	r3, r5
 800879c:	6123      	str	r3, [r4, #16]
 800879e:	b007      	add	sp, #28
 80087a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a4:	f04f 0b00 	mov.w	fp, #0
 80087a8:	e7ca      	b.n	8008740 <_scanf_i+0x15c>
 80087aa:	07ca      	lsls	r2, r1, #31
 80087ac:	bf4c      	ite	mi
 80087ae:	8018      	strhmi	r0, [r3, #0]
 80087b0:	6018      	strpl	r0, [r3, #0]
 80087b2:	e7eb      	b.n	800878c <_scanf_i+0x1a8>
 80087b4:	2001      	movs	r0, #1
 80087b6:	e7f2      	b.n	800879e <_scanf_i+0x1ba>
 80087b8:	08009a00 	.word	0x08009a00
 80087bc:	08008c45 	.word	0x08008c45
 80087c0:	08008d25 	.word	0x08008d25
 80087c4:	08009b92 	.word	0x08009b92

080087c8 <__sflush_r>:
 80087c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	0716      	lsls	r6, r2, #28
 80087d0:	4605      	mov	r5, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	d454      	bmi.n	8008880 <__sflush_r+0xb8>
 80087d6:	684b      	ldr	r3, [r1, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dc02      	bgt.n	80087e2 <__sflush_r+0x1a>
 80087dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dd48      	ble.n	8008874 <__sflush_r+0xac>
 80087e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087e4:	2e00      	cmp	r6, #0
 80087e6:	d045      	beq.n	8008874 <__sflush_r+0xac>
 80087e8:	2300      	movs	r3, #0
 80087ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087ee:	682f      	ldr	r7, [r5, #0]
 80087f0:	6a21      	ldr	r1, [r4, #32]
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	d030      	beq.n	8008858 <__sflush_r+0x90>
 80087f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	0759      	lsls	r1, r3, #29
 80087fc:	d505      	bpl.n	800880a <__sflush_r+0x42>
 80087fe:	6863      	ldr	r3, [r4, #4]
 8008800:	1ad2      	subs	r2, r2, r3
 8008802:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008804:	b10b      	cbz	r3, 800880a <__sflush_r+0x42>
 8008806:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008808:	1ad2      	subs	r2, r2, r3
 800880a:	2300      	movs	r3, #0
 800880c:	4628      	mov	r0, r5
 800880e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008810:	6a21      	ldr	r1, [r4, #32]
 8008812:	47b0      	blx	r6
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	d106      	bne.n	8008828 <__sflush_r+0x60>
 800881a:	6829      	ldr	r1, [r5, #0]
 800881c:	291d      	cmp	r1, #29
 800881e:	d82b      	bhi.n	8008878 <__sflush_r+0xb0>
 8008820:	4a28      	ldr	r2, [pc, #160]	@ (80088c4 <__sflush_r+0xfc>)
 8008822:	410a      	asrs	r2, r1
 8008824:	07d6      	lsls	r6, r2, #31
 8008826:	d427      	bmi.n	8008878 <__sflush_r+0xb0>
 8008828:	2200      	movs	r2, #0
 800882a:	6062      	str	r2, [r4, #4]
 800882c:	6922      	ldr	r2, [r4, #16]
 800882e:	04d9      	lsls	r1, r3, #19
 8008830:	6022      	str	r2, [r4, #0]
 8008832:	d504      	bpl.n	800883e <__sflush_r+0x76>
 8008834:	1c42      	adds	r2, r0, #1
 8008836:	d101      	bne.n	800883c <__sflush_r+0x74>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	b903      	cbnz	r3, 800883e <__sflush_r+0x76>
 800883c:	6560      	str	r0, [r4, #84]	@ 0x54
 800883e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008840:	602f      	str	r7, [r5, #0]
 8008842:	b1b9      	cbz	r1, 8008874 <__sflush_r+0xac>
 8008844:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008848:	4299      	cmp	r1, r3
 800884a:	d002      	beq.n	8008852 <__sflush_r+0x8a>
 800884c:	4628      	mov	r0, r5
 800884e:	f7ff f82b 	bl	80078a8 <_free_r>
 8008852:	2300      	movs	r3, #0
 8008854:	6363      	str	r3, [r4, #52]	@ 0x34
 8008856:	e00d      	b.n	8008874 <__sflush_r+0xac>
 8008858:	2301      	movs	r3, #1
 800885a:	4628      	mov	r0, r5
 800885c:	47b0      	blx	r6
 800885e:	4602      	mov	r2, r0
 8008860:	1c50      	adds	r0, r2, #1
 8008862:	d1c9      	bne.n	80087f8 <__sflush_r+0x30>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0c6      	beq.n	80087f8 <__sflush_r+0x30>
 800886a:	2b1d      	cmp	r3, #29
 800886c:	d001      	beq.n	8008872 <__sflush_r+0xaa>
 800886e:	2b16      	cmp	r3, #22
 8008870:	d11d      	bne.n	80088ae <__sflush_r+0xe6>
 8008872:	602f      	str	r7, [r5, #0]
 8008874:	2000      	movs	r0, #0
 8008876:	e021      	b.n	80088bc <__sflush_r+0xf4>
 8008878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887c:	b21b      	sxth	r3, r3
 800887e:	e01a      	b.n	80088b6 <__sflush_r+0xee>
 8008880:	690f      	ldr	r7, [r1, #16]
 8008882:	2f00      	cmp	r7, #0
 8008884:	d0f6      	beq.n	8008874 <__sflush_r+0xac>
 8008886:	0793      	lsls	r3, r2, #30
 8008888:	bf18      	it	ne
 800888a:	2300      	movne	r3, #0
 800888c:	680e      	ldr	r6, [r1, #0]
 800888e:	bf08      	it	eq
 8008890:	694b      	ldreq	r3, [r1, #20]
 8008892:	1bf6      	subs	r6, r6, r7
 8008894:	600f      	str	r7, [r1, #0]
 8008896:	608b      	str	r3, [r1, #8]
 8008898:	2e00      	cmp	r6, #0
 800889a:	ddeb      	ble.n	8008874 <__sflush_r+0xac>
 800889c:	4633      	mov	r3, r6
 800889e:	463a      	mov	r2, r7
 80088a0:	4628      	mov	r0, r5
 80088a2:	6a21      	ldr	r1, [r4, #32]
 80088a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80088a8:	47e0      	blx	ip
 80088aa:	2800      	cmp	r0, #0
 80088ac:	dc07      	bgt.n	80088be <__sflush_r+0xf6>
 80088ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088be:	4407      	add	r7, r0
 80088c0:	1a36      	subs	r6, r6, r0
 80088c2:	e7e9      	b.n	8008898 <__sflush_r+0xd0>
 80088c4:	dfbffffe 	.word	0xdfbffffe

080088c8 <_fflush_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	690b      	ldr	r3, [r1, #16]
 80088cc:	4605      	mov	r5, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	b913      	cbnz	r3, 80088d8 <_fflush_r+0x10>
 80088d2:	2500      	movs	r5, #0
 80088d4:	4628      	mov	r0, r5
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	b118      	cbz	r0, 80088e2 <_fflush_r+0x1a>
 80088da:	6a03      	ldr	r3, [r0, #32]
 80088dc:	b90b      	cbnz	r3, 80088e2 <_fflush_r+0x1a>
 80088de:	f7fe fd69 	bl	80073b4 <__sinit>
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f3      	beq.n	80088d2 <_fflush_r+0xa>
 80088ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088ec:	07d0      	lsls	r0, r2, #31
 80088ee:	d404      	bmi.n	80088fa <_fflush_r+0x32>
 80088f0:	0599      	lsls	r1, r3, #22
 80088f2:	d402      	bmi.n	80088fa <_fflush_r+0x32>
 80088f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088f6:	f7fe ffc6 	bl	8007886 <__retarget_lock_acquire_recursive>
 80088fa:	4628      	mov	r0, r5
 80088fc:	4621      	mov	r1, r4
 80088fe:	f7ff ff63 	bl	80087c8 <__sflush_r>
 8008902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008904:	4605      	mov	r5, r0
 8008906:	07da      	lsls	r2, r3, #31
 8008908:	d4e4      	bmi.n	80088d4 <_fflush_r+0xc>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	d4e1      	bmi.n	80088d4 <_fflush_r+0xc>
 8008910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008912:	f7fe ffb9 	bl	8007888 <__retarget_lock_release_recursive>
 8008916:	e7dd      	b.n	80088d4 <_fflush_r+0xc>

08008918 <__swhatbuf_r>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	460c      	mov	r4, r1
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	4615      	mov	r5, r2
 8008922:	2900      	cmp	r1, #0
 8008924:	461e      	mov	r6, r3
 8008926:	b096      	sub	sp, #88	@ 0x58
 8008928:	da0c      	bge.n	8008944 <__swhatbuf_r+0x2c>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	2100      	movs	r1, #0
 800892e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008932:	bf14      	ite	ne
 8008934:	2340      	movne	r3, #64	@ 0x40
 8008936:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800893a:	2000      	movs	r0, #0
 800893c:	6031      	str	r1, [r6, #0]
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	b016      	add	sp, #88	@ 0x58
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	466a      	mov	r2, sp
 8008946:	f000 f8d3 	bl	8008af0 <_fstat_r>
 800894a:	2800      	cmp	r0, #0
 800894c:	dbed      	blt.n	800892a <__swhatbuf_r+0x12>
 800894e:	9901      	ldr	r1, [sp, #4]
 8008950:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008954:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008958:	4259      	negs	r1, r3
 800895a:	4159      	adcs	r1, r3
 800895c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008960:	e7eb      	b.n	800893a <__swhatbuf_r+0x22>

08008962 <__smakebuf_r>:
 8008962:	898b      	ldrh	r3, [r1, #12]
 8008964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008966:	079d      	lsls	r5, r3, #30
 8008968:	4606      	mov	r6, r0
 800896a:	460c      	mov	r4, r1
 800896c:	d507      	bpl.n	800897e <__smakebuf_r+0x1c>
 800896e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	6123      	str	r3, [r4, #16]
 8008976:	2301      	movs	r3, #1
 8008978:	6163      	str	r3, [r4, #20]
 800897a:	b003      	add	sp, #12
 800897c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800897e:	466a      	mov	r2, sp
 8008980:	ab01      	add	r3, sp, #4
 8008982:	f7ff ffc9 	bl	8008918 <__swhatbuf_r>
 8008986:	9f00      	ldr	r7, [sp, #0]
 8008988:	4605      	mov	r5, r0
 800898a:	4639      	mov	r1, r7
 800898c:	4630      	mov	r0, r6
 800898e:	f7fe fbc3 	bl	8007118 <_malloc_r>
 8008992:	b948      	cbnz	r0, 80089a8 <__smakebuf_r+0x46>
 8008994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008998:	059a      	lsls	r2, r3, #22
 800899a:	d4ee      	bmi.n	800897a <__smakebuf_r+0x18>
 800899c:	f023 0303 	bic.w	r3, r3, #3
 80089a0:	f043 0302 	orr.w	r3, r3, #2
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	e7e2      	b.n	800896e <__smakebuf_r+0xc>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	6020      	str	r0, [r4, #0]
 80089b8:	b15b      	cbz	r3, 80089d2 <__smakebuf_r+0x70>
 80089ba:	4630      	mov	r0, r6
 80089bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089c0:	f000 f8a8 	bl	8008b14 <_isatty_r>
 80089c4:	b128      	cbz	r0, 80089d2 <__smakebuf_r+0x70>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f023 0303 	bic.w	r3, r3, #3
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	431d      	orrs	r5, r3
 80089d6:	81a5      	strh	r5, [r4, #12]
 80089d8:	e7cf      	b.n	800897a <__smakebuf_r+0x18>

080089da <__sccl>:
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	780b      	ldrb	r3, [r1, #0]
 80089de:	4604      	mov	r4, r0
 80089e0:	2b5e      	cmp	r3, #94	@ 0x5e
 80089e2:	bf0b      	itete	eq
 80089e4:	784b      	ldrbeq	r3, [r1, #1]
 80089e6:	1c4a      	addne	r2, r1, #1
 80089e8:	1c8a      	addeq	r2, r1, #2
 80089ea:	2100      	movne	r1, #0
 80089ec:	bf08      	it	eq
 80089ee:	2101      	moveq	r1, #1
 80089f0:	3801      	subs	r0, #1
 80089f2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80089f6:	f800 1f01 	strb.w	r1, [r0, #1]!
 80089fa:	42a8      	cmp	r0, r5
 80089fc:	d1fb      	bne.n	80089f6 <__sccl+0x1c>
 80089fe:	b90b      	cbnz	r3, 8008a04 <__sccl+0x2a>
 8008a00:	1e50      	subs	r0, r2, #1
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	f081 0101 	eor.w	r1, r1, #1
 8008a08:	4610      	mov	r0, r2
 8008a0a:	54e1      	strb	r1, [r4, r3]
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008a12:	2d2d      	cmp	r5, #45	@ 0x2d
 8008a14:	d005      	beq.n	8008a22 <__sccl+0x48>
 8008a16:	2d5d      	cmp	r5, #93	@ 0x5d
 8008a18:	d016      	beq.n	8008a48 <__sccl+0x6e>
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	d0f1      	beq.n	8008a02 <__sccl+0x28>
 8008a1e:	462b      	mov	r3, r5
 8008a20:	e7f2      	b.n	8008a08 <__sccl+0x2e>
 8008a22:	7846      	ldrb	r6, [r0, #1]
 8008a24:	2e5d      	cmp	r6, #93	@ 0x5d
 8008a26:	d0fa      	beq.n	8008a1e <__sccl+0x44>
 8008a28:	42b3      	cmp	r3, r6
 8008a2a:	dcf8      	bgt.n	8008a1e <__sccl+0x44>
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	3002      	adds	r0, #2
 8008a30:	3201      	adds	r2, #1
 8008a32:	4296      	cmp	r6, r2
 8008a34:	54a1      	strb	r1, [r4, r2]
 8008a36:	dcfb      	bgt.n	8008a30 <__sccl+0x56>
 8008a38:	1af2      	subs	r2, r6, r3
 8008a3a:	3a01      	subs	r2, #1
 8008a3c:	42b3      	cmp	r3, r6
 8008a3e:	bfa8      	it	ge
 8008a40:	2200      	movge	r2, #0
 8008a42:	1c5d      	adds	r5, r3, #1
 8008a44:	18ab      	adds	r3, r5, r2
 8008a46:	e7e1      	b.n	8008a0c <__sccl+0x32>
 8008a48:	4610      	mov	r0, r2
 8008a4a:	e7da      	b.n	8008a02 <__sccl+0x28>

08008a4c <__submore>:
 8008a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a50:	460c      	mov	r4, r1
 8008a52:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008a54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a58:	4299      	cmp	r1, r3
 8008a5a:	d11b      	bne.n	8008a94 <__submore+0x48>
 8008a5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a60:	f7fe fb5a 	bl	8007118 <_malloc_r>
 8008a64:	b918      	cbnz	r0, 8008a6e <__submore+0x22>
 8008a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a72:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008a74:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008a78:	6360      	str	r0, [r4, #52]	@ 0x34
 8008a7a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008a7e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008a82:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008a86:	7043      	strb	r3, [r0, #1]
 8008a88:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008a8c:	7003      	strb	r3, [r0, #0]
 8008a8e:	6020      	str	r0, [r4, #0]
 8008a90:	2000      	movs	r0, #0
 8008a92:	e7ea      	b.n	8008a6a <__submore+0x1e>
 8008a94:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008a96:	0077      	lsls	r7, r6, #1
 8008a98:	463a      	mov	r2, r7
 8008a9a:	f7fe fbd1 	bl	8007240 <_realloc_r>
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d0e0      	beq.n	8008a66 <__submore+0x1a>
 8008aa4:	eb00 0806 	add.w	r8, r0, r6
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4632      	mov	r2, r6
 8008aac:	4640      	mov	r0, r8
 8008aae:	f7fe feec 	bl	800788a <memcpy>
 8008ab2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008ab6:	f8c4 8000 	str.w	r8, [r4]
 8008aba:	e7e9      	b.n	8008a90 <__submore+0x44>

08008abc <memmove>:
 8008abc:	4288      	cmp	r0, r1
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	eb01 0402 	add.w	r4, r1, r2
 8008ac4:	d902      	bls.n	8008acc <memmove+0x10>
 8008ac6:	4284      	cmp	r4, r0
 8008ac8:	4623      	mov	r3, r4
 8008aca:	d807      	bhi.n	8008adc <memmove+0x20>
 8008acc:	1e43      	subs	r3, r0, #1
 8008ace:	42a1      	cmp	r1, r4
 8008ad0:	d008      	beq.n	8008ae4 <memmove+0x28>
 8008ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ada:	e7f8      	b.n	8008ace <memmove+0x12>
 8008adc:	4601      	mov	r1, r0
 8008ade:	4402      	add	r2, r0
 8008ae0:	428a      	cmp	r2, r1
 8008ae2:	d100      	bne.n	8008ae6 <memmove+0x2a>
 8008ae4:	bd10      	pop	{r4, pc}
 8008ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aee:	e7f7      	b.n	8008ae0 <memmove+0x24>

08008af0 <_fstat_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	2300      	movs	r3, #0
 8008af4:	4d06      	ldr	r5, [pc, #24]	@ (8008b10 <_fstat_r+0x20>)
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	4611      	mov	r1, r2
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	f7fb f83b 	bl	8003b78 <_fstat>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d102      	bne.n	8008b0c <_fstat_r+0x1c>
 8008b06:	682b      	ldr	r3, [r5, #0]
 8008b08:	b103      	cbz	r3, 8008b0c <_fstat_r+0x1c>
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000d94 	.word	0x20000d94

08008b14 <_isatty_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	2300      	movs	r3, #0
 8008b18:	4d05      	ldr	r5, [pc, #20]	@ (8008b30 <_isatty_r+0x1c>)
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	f7fb f839 	bl	8003b96 <_isatty>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_isatty_r+0x1a>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_isatty_r+0x1a>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	20000d94 	.word	0x20000d94

08008b34 <memchr>:
 8008b34:	4603      	mov	r3, r0
 8008b36:	b510      	push	{r4, lr}
 8008b38:	b2c9      	uxtb	r1, r1
 8008b3a:	4402      	add	r2, r0
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	d101      	bne.n	8008b46 <memchr+0x12>
 8008b42:	2000      	movs	r0, #0
 8008b44:	e003      	b.n	8008b4e <memchr+0x1a>
 8008b46:	7804      	ldrb	r4, [r0, #0]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	428c      	cmp	r4, r1
 8008b4c:	d1f6      	bne.n	8008b3c <memchr+0x8>
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <_strtol_l.constprop.0>:
 8008b50:	2b24      	cmp	r3, #36	@ 0x24
 8008b52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b56:	4686      	mov	lr, r0
 8008b58:	4690      	mov	r8, r2
 8008b5a:	d801      	bhi.n	8008b60 <_strtol_l.constprop.0+0x10>
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d106      	bne.n	8008b6e <_strtol_l.constprop.0+0x1e>
 8008b60:	f7fe fe66 	bl	8007830 <__errno>
 8008b64:	2316      	movs	r3, #22
 8008b66:	6003      	str	r3, [r0, #0]
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	460d      	mov	r5, r1
 8008b70:	4833      	ldr	r0, [pc, #204]	@ (8008c40 <_strtol_l.constprop.0+0xf0>)
 8008b72:	462a      	mov	r2, r5
 8008b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b78:	5d06      	ldrb	r6, [r0, r4]
 8008b7a:	f016 0608 	ands.w	r6, r6, #8
 8008b7e:	d1f8      	bne.n	8008b72 <_strtol_l.constprop.0+0x22>
 8008b80:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b82:	d12d      	bne.n	8008be0 <_strtol_l.constprop.0+0x90>
 8008b84:	2601      	movs	r6, #1
 8008b86:	782c      	ldrb	r4, [r5, #0]
 8008b88:	1c95      	adds	r5, r2, #2
 8008b8a:	f033 0210 	bics.w	r2, r3, #16
 8008b8e:	d109      	bne.n	8008ba4 <_strtol_l.constprop.0+0x54>
 8008b90:	2c30      	cmp	r4, #48	@ 0x30
 8008b92:	d12a      	bne.n	8008bea <_strtol_l.constprop.0+0x9a>
 8008b94:	782a      	ldrb	r2, [r5, #0]
 8008b96:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b9a:	2a58      	cmp	r2, #88	@ 0x58
 8008b9c:	d125      	bne.n	8008bea <_strtol_l.constprop.0+0x9a>
 8008b9e:	2310      	movs	r3, #16
 8008ba0:	786c      	ldrb	r4, [r5, #1]
 8008ba2:	3502      	adds	r5, #2
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008baa:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008bae:	fbbc f9f3 	udiv	r9, ip, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bb8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008bbc:	2f09      	cmp	r7, #9
 8008bbe:	d81b      	bhi.n	8008bf8 <_strtol_l.constprop.0+0xa8>
 8008bc0:	463c      	mov	r4, r7
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	dd27      	ble.n	8008c16 <_strtol_l.constprop.0+0xc6>
 8008bc6:	1c57      	adds	r7, r2, #1
 8008bc8:	d007      	beq.n	8008bda <_strtol_l.constprop.0+0x8a>
 8008bca:	4581      	cmp	r9, r0
 8008bcc:	d320      	bcc.n	8008c10 <_strtol_l.constprop.0+0xc0>
 8008bce:	d101      	bne.n	8008bd4 <_strtol_l.constprop.0+0x84>
 8008bd0:	45a2      	cmp	sl, r4
 8008bd2:	db1d      	blt.n	8008c10 <_strtol_l.constprop.0+0xc0>
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	fb00 4003 	mla	r0, r0, r3, r4
 8008bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bde:	e7eb      	b.n	8008bb8 <_strtol_l.constprop.0+0x68>
 8008be0:	2c2b      	cmp	r4, #43	@ 0x2b
 8008be2:	bf04      	itt	eq
 8008be4:	782c      	ldrbeq	r4, [r5, #0]
 8008be6:	1c95      	addeq	r5, r2, #2
 8008be8:	e7cf      	b.n	8008b8a <_strtol_l.constprop.0+0x3a>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1da      	bne.n	8008ba4 <_strtol_l.constprop.0+0x54>
 8008bee:	2c30      	cmp	r4, #48	@ 0x30
 8008bf0:	bf0c      	ite	eq
 8008bf2:	2308      	moveq	r3, #8
 8008bf4:	230a      	movne	r3, #10
 8008bf6:	e7d5      	b.n	8008ba4 <_strtol_l.constprop.0+0x54>
 8008bf8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008bfc:	2f19      	cmp	r7, #25
 8008bfe:	d801      	bhi.n	8008c04 <_strtol_l.constprop.0+0xb4>
 8008c00:	3c37      	subs	r4, #55	@ 0x37
 8008c02:	e7de      	b.n	8008bc2 <_strtol_l.constprop.0+0x72>
 8008c04:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c08:	2f19      	cmp	r7, #25
 8008c0a:	d804      	bhi.n	8008c16 <_strtol_l.constprop.0+0xc6>
 8008c0c:	3c57      	subs	r4, #87	@ 0x57
 8008c0e:	e7d8      	b.n	8008bc2 <_strtol_l.constprop.0+0x72>
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c14:	e7e1      	b.n	8008bda <_strtol_l.constprop.0+0x8a>
 8008c16:	1c53      	adds	r3, r2, #1
 8008c18:	d108      	bne.n	8008c2c <_strtol_l.constprop.0+0xdc>
 8008c1a:	2322      	movs	r3, #34	@ 0x22
 8008c1c:	4660      	mov	r0, ip
 8008c1e:	f8ce 3000 	str.w	r3, [lr]
 8008c22:	f1b8 0f00 	cmp.w	r8, #0
 8008c26:	d0a0      	beq.n	8008b6a <_strtol_l.constprop.0+0x1a>
 8008c28:	1e69      	subs	r1, r5, #1
 8008c2a:	e006      	b.n	8008c3a <_strtol_l.constprop.0+0xea>
 8008c2c:	b106      	cbz	r6, 8008c30 <_strtol_l.constprop.0+0xe0>
 8008c2e:	4240      	negs	r0, r0
 8008c30:	f1b8 0f00 	cmp.w	r8, #0
 8008c34:	d099      	beq.n	8008b6a <_strtol_l.constprop.0+0x1a>
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	d1f6      	bne.n	8008c28 <_strtol_l.constprop.0+0xd8>
 8008c3a:	f8c8 1000 	str.w	r1, [r8]
 8008c3e:	e794      	b.n	8008b6a <_strtol_l.constprop.0+0x1a>
 8008c40:	08009a4f 	.word	0x08009a4f

08008c44 <_strtol_r>:
 8008c44:	f7ff bf84 	b.w	8008b50 <_strtol_l.constprop.0>

08008c48 <_strtoul_l.constprop.0>:
 8008c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	4686      	mov	lr, r0
 8008c4e:	460d      	mov	r5, r1
 8008c50:	4e33      	ldr	r6, [pc, #204]	@ (8008d20 <_strtoul_l.constprop.0+0xd8>)
 8008c52:	4628      	mov	r0, r5
 8008c54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c58:	5d37      	ldrb	r7, [r6, r4]
 8008c5a:	f017 0708 	ands.w	r7, r7, #8
 8008c5e:	d1f8      	bne.n	8008c52 <_strtoul_l.constprop.0+0xa>
 8008c60:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c62:	d12f      	bne.n	8008cc4 <_strtoul_l.constprop.0+0x7c>
 8008c64:	2701      	movs	r7, #1
 8008c66:	782c      	ldrb	r4, [r5, #0]
 8008c68:	1c85      	adds	r5, r0, #2
 8008c6a:	f033 0010 	bics.w	r0, r3, #16
 8008c6e:	d109      	bne.n	8008c84 <_strtoul_l.constprop.0+0x3c>
 8008c70:	2c30      	cmp	r4, #48	@ 0x30
 8008c72:	d12c      	bne.n	8008cce <_strtoul_l.constprop.0+0x86>
 8008c74:	7828      	ldrb	r0, [r5, #0]
 8008c76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008c7a:	2858      	cmp	r0, #88	@ 0x58
 8008c7c:	d127      	bne.n	8008cce <_strtoul_l.constprop.0+0x86>
 8008c7e:	2310      	movs	r3, #16
 8008c80:	786c      	ldrb	r4, [r5, #1]
 8008c82:	3502      	adds	r5, #2
 8008c84:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8008c88:	fbb8 f8f3 	udiv	r8, r8, r3
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	fb03 f908 	mul.w	r9, r3, r8
 8008c92:	4630      	mov	r0, r6
 8008c94:	ea6f 0909 	mvn.w	r9, r9
 8008c98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008c9c:	f1bc 0f09 	cmp.w	ip, #9
 8008ca0:	d81c      	bhi.n	8008cdc <_strtoul_l.constprop.0+0x94>
 8008ca2:	4664      	mov	r4, ip
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	dd2a      	ble.n	8008cfe <_strtoul_l.constprop.0+0xb6>
 8008ca8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8008cac:	d007      	beq.n	8008cbe <_strtoul_l.constprop.0+0x76>
 8008cae:	4580      	cmp	r8, r0
 8008cb0:	d322      	bcc.n	8008cf8 <_strtoul_l.constprop.0+0xb0>
 8008cb2:	d101      	bne.n	8008cb8 <_strtoul_l.constprop.0+0x70>
 8008cb4:	45a1      	cmp	r9, r4
 8008cb6:	db1f      	blt.n	8008cf8 <_strtoul_l.constprop.0+0xb0>
 8008cb8:	2601      	movs	r6, #1
 8008cba:	fb00 4003 	mla	r0, r0, r3, r4
 8008cbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cc2:	e7e9      	b.n	8008c98 <_strtoul_l.constprop.0+0x50>
 8008cc4:	2c2b      	cmp	r4, #43	@ 0x2b
 8008cc6:	bf04      	itt	eq
 8008cc8:	782c      	ldrbeq	r4, [r5, #0]
 8008cca:	1c85      	addeq	r5, r0, #2
 8008ccc:	e7cd      	b.n	8008c6a <_strtoul_l.constprop.0+0x22>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1d8      	bne.n	8008c84 <_strtoul_l.constprop.0+0x3c>
 8008cd2:	2c30      	cmp	r4, #48	@ 0x30
 8008cd4:	bf0c      	ite	eq
 8008cd6:	2308      	moveq	r3, #8
 8008cd8:	230a      	movne	r3, #10
 8008cda:	e7d3      	b.n	8008c84 <_strtoul_l.constprop.0+0x3c>
 8008cdc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008ce0:	f1bc 0f19 	cmp.w	ip, #25
 8008ce4:	d801      	bhi.n	8008cea <_strtoul_l.constprop.0+0xa2>
 8008ce6:	3c37      	subs	r4, #55	@ 0x37
 8008ce8:	e7dc      	b.n	8008ca4 <_strtoul_l.constprop.0+0x5c>
 8008cea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008cee:	f1bc 0f19 	cmp.w	ip, #25
 8008cf2:	d804      	bhi.n	8008cfe <_strtoul_l.constprop.0+0xb6>
 8008cf4:	3c57      	subs	r4, #87	@ 0x57
 8008cf6:	e7d5      	b.n	8008ca4 <_strtoul_l.constprop.0+0x5c>
 8008cf8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8008cfc:	e7df      	b.n	8008cbe <_strtoul_l.constprop.0+0x76>
 8008cfe:	1c73      	adds	r3, r6, #1
 8008d00:	d106      	bne.n	8008d10 <_strtoul_l.constprop.0+0xc8>
 8008d02:	2322      	movs	r3, #34	@ 0x22
 8008d04:	4630      	mov	r0, r6
 8008d06:	f8ce 3000 	str.w	r3, [lr]
 8008d0a:	b932      	cbnz	r2, 8008d1a <_strtoul_l.constprop.0+0xd2>
 8008d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d10:	b107      	cbz	r7, 8008d14 <_strtoul_l.constprop.0+0xcc>
 8008d12:	4240      	negs	r0, r0
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	d0f9      	beq.n	8008d0c <_strtoul_l.constprop.0+0xc4>
 8008d18:	b106      	cbz	r6, 8008d1c <_strtoul_l.constprop.0+0xd4>
 8008d1a:	1e69      	subs	r1, r5, #1
 8008d1c:	6011      	str	r1, [r2, #0]
 8008d1e:	e7f5      	b.n	8008d0c <_strtoul_l.constprop.0+0xc4>
 8008d20:	08009a4f 	.word	0x08009a4f

08008d24 <_strtoul_r>:
 8008d24:	f7ff bf90 	b.w	8008c48 <_strtoul_l.constprop.0>

08008d28 <_init>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	bf00      	nop
 8008d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2e:	bc08      	pop	{r3}
 8008d30:	469e      	mov	lr, r3
 8008d32:	4770      	bx	lr

08008d34 <_fini>:
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d36:	bf00      	nop
 8008d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3a:	bc08      	pop	{r3}
 8008d3c:	469e      	mov	lr, r3
 8008d3e:	4770      	bx	lr
